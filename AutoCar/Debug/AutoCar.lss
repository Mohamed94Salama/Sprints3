
AutoCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00007e48  00007edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  00800184  00800184  00008000  2**0
                  ALLOC
  3 .stab         00006648  00000000  00000000  00008000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007b5a  00000000  00000000  0000e648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000161a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00016362  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b91  00000000  00000000  00016570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ca  00000000  00000000  00019101  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000135c  00000000  00000000  0001a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001b928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000374  00000000  00000000  0001bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018c6  00000000  00000000  0001be7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0001d742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d4 31 	jmp	0x63a8	; 0x63a8 <__vector_1>
       8:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__vector_2>
       c:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 8a 2a 	jmp	0x5514	; 0x5514 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4e 21 	jmp	0x429c	; 0x429c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fe e7       	ldi	r31, 0x7E	; 126
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <main>
      8a:	0c 94 22 3f 	jmp	0x7e44	; 0x7e44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 a6 3e 	jmp	0x7d4c	; 0x7d4c <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <__epilogue_restores__>

00000288 <__ashldi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__ashldi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__ashldi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__ashldi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	49 81       	ldd	r20, Y+1	; 0x01
     2da:	5a 81       	ldd	r21, Y+2	; 0x02
     2dc:	6b 81       	ldd	r22, Y+3	; 0x03
     2de:	7c 81       	ldd	r23, Y+4	; 0x04
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__ashldi3+0x7c>
     2e4:	19 86       	std	Y+9, r1	; 0x09
     2e6:	1a 86       	std	Y+10, r1	; 0x0a
     2e8:	1b 86       	std	Y+11, r1	; 0x0b
     2ea:	1c 86       	std	Y+12, r1	; 0x0c
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__ashldi3+0x76>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	66 1f       	adc	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__ashldi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__ashldi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__ashldi3+0x94>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__ashldi3+0x8c>
     320:	89 87       	std	Y+9, r24	; 0x09
     322:	9a 87       	std	Y+10, r25	; 0x0a
     324:	ab 87       	std	Y+11, r26	; 0x0b
     326:	bc 87       	std	Y+12, r27	; 0x0c
     328:	04 c0       	rjmp	.+8      	; 0x332 <__ashldi3+0xaa>
     32a:	76 95       	lsr	r23
     32c:	67 95       	ror	r22
     32e:	57 95       	ror	r21
     330:	47 95       	ror	r20
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__ashldi3+0xa2>
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	9e 81       	ldd	r25, Y+6	; 0x06
     33a:	af 81       	ldd	r26, Y+7	; 0x07
     33c:	b8 85       	ldd	r27, Y+8	; 0x08
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__ashldi3+0xc0>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	aa 1f       	adc	r26, r26
     346:	bb 1f       	adc	r27, r27
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__ashldi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	4d 87       	std	Y+13, r20	; 0x0d
     356:	5e 87       	std	Y+14, r21	; 0x0e
     358:	6f 87       	std	Y+15, r22	; 0x0f
     35a:	78 8b       	std	Y+16, r23	; 0x10
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 b0 09 	call	0x1360	; 0x1360 <__subsf3>
     3b2:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__udivdi3>:
     3de:	ae e5       	ldi	r26, 0x5E	; 94
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 a6 3e 	jmp	0x7d4c	; 0x7d4c <__prologue_saves__>
     3ea:	a8 e0       	ldi	r26, 0x08	; 8
     3ec:	4e 01       	movw	r8, r28
     3ee:	08 94       	sec
     3f0:	81 1c       	adc	r8, r1
     3f2:	91 1c       	adc	r9, r1
     3f4:	f4 01       	movw	r30, r8
     3f6:	6a 2e       	mov	r6, r26
     3f8:	11 92       	st	Z+, r1
     3fa:	6a 94       	dec	r6
     3fc:	e9 f7       	brne	.-6      	; 0x3f8 <__udivdi3+0x1a>
     3fe:	29 83       	std	Y+1, r18	; 0x01
     400:	3a 83       	std	Y+2, r19	; 0x02
     402:	4b 83       	std	Y+3, r20	; 0x03
     404:	5c 83       	std	Y+4, r21	; 0x04
     406:	6d 83       	std	Y+5, r22	; 0x05
     408:	7e 83       	std	Y+6, r23	; 0x06
     40a:	8f 83       	std	Y+7, r24	; 0x07
     40c:	98 87       	std	Y+8, r25	; 0x08
     40e:	ce 01       	movw	r24, r28
     410:	09 96       	adiw	r24, 0x09	; 9
     412:	fc 01       	movw	r30, r24
     414:	11 92       	st	Z+, r1
     416:	aa 95       	dec	r26
     418:	e9 f7       	brne	.-6      	; 0x414 <__udivdi3+0x36>
     41a:	a9 86       	std	Y+9, r10	; 0x09
     41c:	ba 86       	std	Y+10, r11	; 0x0a
     41e:	cb 86       	std	Y+11, r12	; 0x0b
     420:	dc 86       	std	Y+12, r13	; 0x0c
     422:	ed 86       	std	Y+13, r14	; 0x0d
     424:	fe 86       	std	Y+14, r15	; 0x0e
     426:	0f 87       	std	Y+15, r16	; 0x0f
     428:	18 8b       	std	Y+16, r17	; 0x10
     42a:	29 84       	ldd	r2, Y+9	; 0x09
     42c:	3a 84       	ldd	r3, Y+10	; 0x0a
     42e:	4b 84       	ldd	r4, Y+11	; 0x0b
     430:	5c 84       	ldd	r5, Y+12	; 0x0c
     432:	ed 84       	ldd	r14, Y+13	; 0x0d
     434:	fe 84       	ldd	r15, Y+14	; 0x0e
     436:	0f 85       	ldd	r16, Y+15	; 0x0f
     438:	18 89       	ldd	r17, Y+16	; 0x10
     43a:	69 80       	ldd	r6, Y+1	; 0x01
     43c:	7a 80       	ldd	r7, Y+2	; 0x02
     43e:	8b 80       	ldd	r8, Y+3	; 0x03
     440:	9c 80       	ldd	r9, Y+4	; 0x04
     442:	6d a6       	std	Y+45, r6	; 0x2d
     444:	7e a6       	std	Y+46, r7	; 0x2e
     446:	8f a6       	std	Y+47, r8	; 0x2f
     448:	98 aa       	std	Y+48, r9	; 0x30
     44a:	6d 80       	ldd	r6, Y+5	; 0x05
     44c:	7e 80       	ldd	r7, Y+6	; 0x06
     44e:	8f 80       	ldd	r8, Y+7	; 0x07
     450:	98 84       	ldd	r9, Y+8	; 0x08
     452:	e1 14       	cp	r14, r1
     454:	f1 04       	cpc	r15, r1
     456:	01 05       	cpc	r16, r1
     458:	11 05       	cpc	r17, r1
     45a:	09 f0       	breq	.+2      	; 0x45e <__udivdi3+0x80>
     45c:	b3 c3       	rjmp	.+1894   	; 0xbc4 <__stack+0x365>
     45e:	62 14       	cp	r6, r2
     460:	73 04       	cpc	r7, r3
     462:	84 04       	cpc	r8, r4
     464:	95 04       	cpc	r9, r5
     466:	08 f0       	brcs	.+2      	; 0x46a <__udivdi3+0x8c>
     468:	3d c1       	rjmp	.+634    	; 0x6e4 <__udivdi3+0x306>
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	20 16       	cp	r2, r16
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	30 06       	cpc	r3, r16
     472:	01 e0       	ldi	r16, 0x01	; 1
     474:	40 06       	cpc	r4, r16
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	50 06       	cpc	r5, r16
     47a:	88 f4       	brcc	.+34     	; 0x49e <__udivdi3+0xc0>
     47c:	1f ef       	ldi	r17, 0xFF	; 255
     47e:	21 16       	cp	r2, r17
     480:	31 04       	cpc	r3, r1
     482:	41 04       	cpc	r4, r1
     484:	51 04       	cpc	r5, r1
     486:	39 f0       	breq	.+14     	; 0x496 <__udivdi3+0xb8>
     488:	30 f0       	brcs	.+12     	; 0x496 <__udivdi3+0xb8>
     48a:	48 e0       	ldi	r20, 0x08	; 8
     48c:	e4 2e       	mov	r14, r20
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	18 c0       	rjmp	.+48     	; 0x4c6 <__udivdi3+0xe8>
     496:	ee 24       	eor	r14, r14
     498:	ff 24       	eor	r15, r15
     49a:	87 01       	movw	r16, r14
     49c:	14 c0       	rjmp	.+40     	; 0x4c6 <__udivdi3+0xe8>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	22 16       	cp	r2, r18
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	32 06       	cpc	r3, r18
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	42 06       	cpc	r4, r18
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	52 06       	cpc	r5, r18
     4ae:	30 f0       	brcs	.+12     	; 0x4bc <__udivdi3+0xde>
     4b0:	38 e1       	ldi	r19, 0x18	; 24
     4b2:	e3 2e       	mov	r14, r19
     4b4:	f1 2c       	mov	r15, r1
     4b6:	01 2d       	mov	r16, r1
     4b8:	11 2d       	mov	r17, r1
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__udivdi3+0xe8>
     4bc:	20 e1       	ldi	r18, 0x10	; 16
     4be:	e2 2e       	mov	r14, r18
     4c0:	f1 2c       	mov	r15, r1
     4c2:	01 2d       	mov	r16, r1
     4c4:	11 2d       	mov	r17, r1
     4c6:	d2 01       	movw	r26, r4
     4c8:	c1 01       	movw	r24, r2
     4ca:	0e 2c       	mov	r0, r14
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <__udivdi3+0xf8>
     4ce:	b6 95       	lsr	r27
     4d0:	a7 95       	ror	r26
     4d2:	97 95       	ror	r25
     4d4:	87 95       	ror	r24
     4d6:	0a 94       	dec	r0
     4d8:	d2 f7       	brpl	.-12     	; 0x4ce <__udivdi3+0xf0>
     4da:	83 58       	subi	r24, 0x83	; 131
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	dc 01       	movw	r26, r24
     4e0:	2c 91       	ld	r18, X
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	8e 19       	sub	r24, r14
     4ec:	9f 09       	sbc	r25, r15
     4ee:	a0 0b       	sbc	r26, r16
     4f0:	b1 0b       	sbc	r27, r17
     4f2:	7c 01       	movw	r14, r24
     4f4:	8d 01       	movw	r16, r26
     4f6:	e2 1a       	sub	r14, r18
     4f8:	f1 08       	sbc	r15, r1
     4fa:	01 09       	sbc	r16, r1
     4fc:	11 09       	sbc	r17, r1
     4fe:	e1 14       	cp	r14, r1
     500:	f1 04       	cpc	r15, r1
     502:	01 05       	cpc	r16, r1
     504:	11 05       	cpc	r17, r1
     506:	a1 f1       	breq	.+104    	; 0x570 <__udivdi3+0x192>
     508:	0e 2c       	mov	r0, r14
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x136>
     50c:	22 0c       	add	r2, r2
     50e:	33 1c       	adc	r3, r3
     510:	44 1c       	adc	r4, r4
     512:	55 1c       	adc	r5, r5
     514:	0a 94       	dec	r0
     516:	d2 f7       	brpl	.-12     	; 0x50c <__udivdi3+0x12e>
     518:	a4 01       	movw	r20, r8
     51a:	93 01       	movw	r18, r6
     51c:	0e 2c       	mov	r0, r14
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__udivdi3+0x14a>
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	44 1f       	adc	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	0a 94       	dec	r0
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__udivdi3+0x142>
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	8e 19       	sub	r24, r14
     532:	9f 09       	sbc	r25, r15
     534:	6d a4       	ldd	r6, Y+45	; 0x2d
     536:	7e a4       	ldd	r7, Y+46	; 0x2e
     538:	8f a4       	ldd	r8, Y+47	; 0x2f
     53a:	98 a8       	ldd	r9, Y+48	; 0x30
     53c:	04 c0       	rjmp	.+8      	; 0x546 <__udivdi3+0x168>
     53e:	96 94       	lsr	r9
     540:	87 94       	ror	r8
     542:	77 94       	ror	r7
     544:	67 94       	ror	r6
     546:	8a 95       	dec	r24
     548:	d2 f7       	brpl	.-12     	; 0x53e <__udivdi3+0x160>
     54a:	62 2a       	or	r6, r18
     54c:	73 2a       	or	r7, r19
     54e:	84 2a       	or	r8, r20
     550:	95 2a       	or	r9, r21
     552:	ad a4       	ldd	r10, Y+45	; 0x2d
     554:	be a4       	ldd	r11, Y+46	; 0x2e
     556:	cf a4       	ldd	r12, Y+47	; 0x2f
     558:	d8 a8       	ldd	r13, Y+48	; 0x30
     55a:	04 c0       	rjmp	.+8      	; 0x564 <__udivdi3+0x186>
     55c:	aa 0c       	add	r10, r10
     55e:	bb 1c       	adc	r11, r11
     560:	cc 1c       	adc	r12, r12
     562:	dd 1c       	adc	r13, r13
     564:	ea 94       	dec	r14
     566:	d2 f7       	brpl	.-12     	; 0x55c <__udivdi3+0x17e>
     568:	ad a6       	std	Y+45, r10	; 0x2d
     56a:	be a6       	std	Y+46, r11	; 0x2e
     56c:	cf a6       	std	Y+47, r12	; 0x2f
     56e:	d8 aa       	std	Y+48, r13	; 0x30
     570:	62 01       	movw	r12, r4
     572:	ee 24       	eor	r14, r14
     574:	ff 24       	eor	r15, r15
     576:	cd aa       	std	Y+53, r12	; 0x35
     578:	de aa       	std	Y+54, r13	; 0x36
     57a:	ef aa       	std	Y+55, r14	; 0x37
     57c:	f8 ae       	std	Y+56, r15	; 0x38
     57e:	92 01       	movw	r18, r4
     580:	81 01       	movw	r16, r2
     582:	20 70       	andi	r18, 0x00	; 0
     584:	30 70       	andi	r19, 0x00	; 0
     586:	09 af       	std	Y+57, r16	; 0x39
     588:	1a af       	std	Y+58, r17	; 0x3a
     58a:	2b af       	std	Y+59, r18	; 0x3b
     58c:	3c af       	std	Y+60, r19	; 0x3c
     58e:	c4 01       	movw	r24, r8
     590:	b3 01       	movw	r22, r6
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     59a:	7b 01       	movw	r14, r22
     59c:	8c 01       	movw	r16, r24
     59e:	c4 01       	movw	r24, r8
     5a0:	b3 01       	movw	r22, r6
     5a2:	2d a9       	ldd	r18, Y+53	; 0x35
     5a4:	3e a9       	ldd	r19, Y+54	; 0x36
     5a6:	4f a9       	ldd	r20, Y+55	; 0x37
     5a8:	58 ad       	ldd	r21, Y+56	; 0x38
     5aa:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     5ae:	c9 01       	movw	r24, r18
     5b0:	da 01       	movw	r26, r20
     5b2:	3c 01       	movw	r6, r24
     5b4:	4d 01       	movw	r8, r26
     5b6:	c4 01       	movw	r24, r8
     5b8:	b3 01       	movw	r22, r6
     5ba:	29 ad       	ldd	r18, Y+57	; 0x39
     5bc:	3a ad       	ldd	r19, Y+58	; 0x3a
     5be:	4b ad       	ldd	r20, Y+59	; 0x3b
     5c0:	5c ad       	ldd	r21, Y+60	; 0x3c
     5c2:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	87 01       	movw	r16, r14
     5cc:	ff 24       	eor	r15, r15
     5ce:	ee 24       	eor	r14, r14
     5d0:	ad a4       	ldd	r10, Y+45	; 0x2d
     5d2:	be a4       	ldd	r11, Y+46	; 0x2e
     5d4:	cf a4       	ldd	r12, Y+47	; 0x2f
     5d6:	d8 a8       	ldd	r13, Y+48	; 0x30
     5d8:	c6 01       	movw	r24, r12
     5da:	aa 27       	eor	r26, r26
     5dc:	bb 27       	eor	r27, r27
     5de:	57 01       	movw	r10, r14
     5e0:	68 01       	movw	r12, r16
     5e2:	a8 2a       	or	r10, r24
     5e4:	b9 2a       	or	r11, r25
     5e6:	ca 2a       	or	r12, r26
     5e8:	db 2a       	or	r13, r27
     5ea:	a2 16       	cp	r10, r18
     5ec:	b3 06       	cpc	r11, r19
     5ee:	c4 06       	cpc	r12, r20
     5f0:	d5 06       	cpc	r13, r21
     5f2:	e0 f4       	brcc	.+56     	; 0x62c <__udivdi3+0x24e>
     5f4:	08 94       	sec
     5f6:	61 08       	sbc	r6, r1
     5f8:	71 08       	sbc	r7, r1
     5fa:	81 08       	sbc	r8, r1
     5fc:	91 08       	sbc	r9, r1
     5fe:	a2 0c       	add	r10, r2
     600:	b3 1c       	adc	r11, r3
     602:	c4 1c       	adc	r12, r4
     604:	d5 1c       	adc	r13, r5
     606:	a2 14       	cp	r10, r2
     608:	b3 04       	cpc	r11, r3
     60a:	c4 04       	cpc	r12, r4
     60c:	d5 04       	cpc	r13, r5
     60e:	70 f0       	brcs	.+28     	; 0x62c <__udivdi3+0x24e>
     610:	a2 16       	cp	r10, r18
     612:	b3 06       	cpc	r11, r19
     614:	c4 06       	cpc	r12, r20
     616:	d5 06       	cpc	r13, r21
     618:	48 f4       	brcc	.+18     	; 0x62c <__udivdi3+0x24e>
     61a:	08 94       	sec
     61c:	61 08       	sbc	r6, r1
     61e:	71 08       	sbc	r7, r1
     620:	81 08       	sbc	r8, r1
     622:	91 08       	sbc	r9, r1
     624:	a2 0c       	add	r10, r2
     626:	b3 1c       	adc	r11, r3
     628:	c4 1c       	adc	r12, r4
     62a:	d5 1c       	adc	r13, r5
     62c:	a2 1a       	sub	r10, r18
     62e:	b3 0a       	sbc	r11, r19
     630:	c4 0a       	sbc	r12, r20
     632:	d5 0a       	sbc	r13, r21
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	2d a9       	ldd	r18, Y+53	; 0x35
     63a:	3e a9       	ldd	r19, Y+54	; 0x36
     63c:	4f a9       	ldd	r20, Y+55	; 0x37
     63e:	58 ad       	ldd	r21, Y+56	; 0x38
     640:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     644:	7b 01       	movw	r14, r22
     646:	8c 01       	movw	r16, r24
     648:	c6 01       	movw	r24, r12
     64a:	b5 01       	movw	r22, r10
     64c:	2d a9       	ldd	r18, Y+53	; 0x35
     64e:	3e a9       	ldd	r19, Y+54	; 0x36
     650:	4f a9       	ldd	r20, Y+55	; 0x37
     652:	58 ad       	ldd	r21, Y+56	; 0x38
     654:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     658:	c9 01       	movw	r24, r18
     65a:	da 01       	movw	r26, r20
     65c:	5c 01       	movw	r10, r24
     65e:	6d 01       	movw	r12, r26
     660:	c6 01       	movw	r24, r12
     662:	b5 01       	movw	r22, r10
     664:	29 ad       	ldd	r18, Y+57	; 0x39
     666:	3a ad       	ldd	r19, Y+58	; 0x3a
     668:	4b ad       	ldd	r20, Y+59	; 0x3b
     66a:	5c ad       	ldd	r21, Y+60	; 0x3c
     66c:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	87 01       	movw	r16, r14
     676:	ff 24       	eor	r15, r15
     678:	ee 24       	eor	r14, r14
     67a:	8d a5       	ldd	r24, Y+45	; 0x2d
     67c:	9e a5       	ldd	r25, Y+46	; 0x2e
     67e:	af a5       	ldd	r26, Y+47	; 0x2f
     680:	b8 a9       	ldd	r27, Y+48	; 0x30
     682:	a0 70       	andi	r26, 0x00	; 0
     684:	b0 70       	andi	r27, 0x00	; 0
     686:	e8 2a       	or	r14, r24
     688:	f9 2a       	or	r15, r25
     68a:	0a 2b       	or	r16, r26
     68c:	1b 2b       	or	r17, r27
     68e:	e2 16       	cp	r14, r18
     690:	f3 06       	cpc	r15, r19
     692:	04 07       	cpc	r16, r20
     694:	15 07       	cpc	r17, r21
     696:	c0 f4       	brcc	.+48     	; 0x6c8 <__udivdi3+0x2ea>
     698:	08 94       	sec
     69a:	a1 08       	sbc	r10, r1
     69c:	b1 08       	sbc	r11, r1
     69e:	c1 08       	sbc	r12, r1
     6a0:	d1 08       	sbc	r13, r1
     6a2:	e2 0c       	add	r14, r2
     6a4:	f3 1c       	adc	r15, r3
     6a6:	04 1d       	adc	r16, r4
     6a8:	15 1d       	adc	r17, r5
     6aa:	e2 14       	cp	r14, r2
     6ac:	f3 04       	cpc	r15, r3
     6ae:	04 05       	cpc	r16, r4
     6b0:	15 05       	cpc	r17, r5
     6b2:	50 f0       	brcs	.+20     	; 0x6c8 <__udivdi3+0x2ea>
     6b4:	e2 16       	cp	r14, r18
     6b6:	f3 06       	cpc	r15, r19
     6b8:	04 07       	cpc	r16, r20
     6ba:	15 07       	cpc	r17, r21
     6bc:	28 f4       	brcc	.+10     	; 0x6c8 <__udivdi3+0x2ea>
     6be:	08 94       	sec
     6c0:	a1 08       	sbc	r10, r1
     6c2:	b1 08       	sbc	r11, r1
     6c4:	c1 08       	sbc	r12, r1
     6c6:	d1 08       	sbc	r13, r1
     6c8:	d3 01       	movw	r26, r6
     6ca:	99 27       	eor	r25, r25
     6cc:	88 27       	eor	r24, r24
     6ce:	86 01       	movw	r16, r12
     6d0:	75 01       	movw	r14, r10
     6d2:	e8 2a       	or	r14, r24
     6d4:	f9 2a       	or	r15, r25
     6d6:	0a 2b       	or	r16, r26
     6d8:	1b 2b       	or	r17, r27
     6da:	e9 aa       	std	Y+49, r14	; 0x31
     6dc:	fa aa       	std	Y+50, r15	; 0x32
     6de:	0b ab       	std	Y+51, r16	; 0x33
     6e0:	1c ab       	std	Y+52, r17	; 0x34
     6e2:	cf c4       	rjmp	.+2462   	; 0x1082 <__stack+0x823>
     6e4:	21 14       	cp	r2, r1
     6e6:	31 04       	cpc	r3, r1
     6e8:	41 04       	cpc	r4, r1
     6ea:	51 04       	cpc	r5, r1
     6ec:	71 f4       	brne	.+28     	; 0x70a <__udivdi3+0x32c>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     702:	c9 01       	movw	r24, r18
     704:	da 01       	movw	r26, r20
     706:	1c 01       	movw	r2, r24
     708:	2d 01       	movw	r4, r26
     70a:	00 e0       	ldi	r16, 0x00	; 0
     70c:	20 16       	cp	r2, r16
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	30 06       	cpc	r3, r16
     712:	01 e0       	ldi	r16, 0x01	; 1
     714:	40 06       	cpc	r4, r16
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	50 06       	cpc	r5, r16
     71a:	88 f4       	brcc	.+34     	; 0x73e <__udivdi3+0x360>
     71c:	1f ef       	ldi	r17, 0xFF	; 255
     71e:	21 16       	cp	r2, r17
     720:	31 04       	cpc	r3, r1
     722:	41 04       	cpc	r4, r1
     724:	51 04       	cpc	r5, r1
     726:	31 f0       	breq	.+12     	; 0x734 <__udivdi3+0x356>
     728:	28 f0       	brcs	.+10     	; 0x734 <__udivdi3+0x356>
     72a:	48 e0       	ldi	r20, 0x08	; 8
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	17 c0       	rjmp	.+46     	; 0x762 <__udivdi3+0x384>
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	12 c0       	rjmp	.+36     	; 0x762 <__udivdi3+0x384>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	22 16       	cp	r2, r18
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	32 06       	cpc	r3, r18
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	42 06       	cpc	r4, r18
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	52 06       	cpc	r5, r18
     74e:	28 f0       	brcs	.+10     	; 0x75a <__udivdi3+0x37c>
     750:	48 e1       	ldi	r20, 0x18	; 24
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	04 c0       	rjmp	.+8      	; 0x762 <__udivdi3+0x384>
     75a:	40 e1       	ldi	r20, 0x10	; 16
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	d2 01       	movw	r26, r4
     764:	c1 01       	movw	r24, r2
     766:	04 2e       	mov	r0, r20
     768:	04 c0       	rjmp	.+8      	; 0x772 <__udivdi3+0x394>
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	0a 94       	dec	r0
     774:	d2 f7       	brpl	.-12     	; 0x76a <__udivdi3+0x38c>
     776:	83 58       	subi	r24, 0x83	; 131
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	dc 01       	movw	r26, r24
     77c:	2c 91       	ld	r18, X
     77e:	e0 e2       	ldi	r30, 0x20	; 32
     780:	ee 2e       	mov	r14, r30
     782:	f1 2c       	mov	r15, r1
     784:	01 2d       	mov	r16, r1
     786:	11 2d       	mov	r17, r1
     788:	d8 01       	movw	r26, r16
     78a:	c7 01       	movw	r24, r14
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	a6 0b       	sbc	r26, r22
     792:	b7 0b       	sbc	r27, r23
     794:	82 1b       	sub	r24, r18
     796:	91 09       	sbc	r25, r1
     798:	a1 09       	sbc	r26, r1
     79a:	b1 09       	sbc	r27, r1
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	a1 05       	cpc	r26, r1
     7a0:	b1 05       	cpc	r27, r1
     7a2:	61 f4       	brne	.+24     	; 0x7bc <__udivdi3+0x3de>
     7a4:	64 01       	movw	r12, r8
     7a6:	53 01       	movw	r10, r6
     7a8:	a2 18       	sub	r10, r2
     7aa:	b3 08       	sbc	r11, r3
     7ac:	c4 08       	sbc	r12, r4
     7ae:	d5 08       	sbc	r13, r5
     7b0:	31 e0       	ldi	r19, 0x01	; 1
     7b2:	63 2e       	mov	r6, r19
     7b4:	71 2c       	mov	r7, r1
     7b6:	81 2c       	mov	r8, r1
     7b8:	91 2c       	mov	r9, r1
     7ba:	1e c1       	rjmp	.+572    	; 0x9f8 <__stack+0x199>
     7bc:	6f 96       	adiw	r28, 0x1f	; 31
     7be:	8f af       	std	Y+63, r24	; 0x3f
     7c0:	6f 97       	sbiw	r28, 0x1f	; 31
     7c2:	08 2e       	mov	r0, r24
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__udivdi3+0x3f0>
     7c6:	22 0c       	add	r2, r2
     7c8:	33 1c       	adc	r3, r3
     7ca:	44 1c       	adc	r4, r4
     7cc:	55 1c       	adc	r5, r5
     7ce:	0a 94       	dec	r0
     7d0:	d2 f7       	brpl	.-12     	; 0x7c6 <__udivdi3+0x3e8>
     7d2:	ee 2d       	mov	r30, r14
     7d4:	e8 1b       	sub	r30, r24
     7d6:	64 01       	movw	r12, r8
     7d8:	53 01       	movw	r10, r6
     7da:	0e 2e       	mov	r0, r30
     7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__udivdi3+0x408>
     7de:	d6 94       	lsr	r13
     7e0:	c7 94       	ror	r12
     7e2:	b7 94       	ror	r11
     7e4:	a7 94       	ror	r10
     7e6:	0a 94       	dec	r0
     7e8:	d2 f7       	brpl	.-12     	; 0x7de <__udivdi3+0x400>
     7ea:	a4 01       	movw	r20, r8
     7ec:	93 01       	movw	r18, r6
     7ee:	6f 96       	adiw	r28, 0x1f	; 31
     7f0:	0f ac       	ldd	r0, Y+63	; 0x3f
     7f2:	6f 97       	sbiw	r28, 0x1f	; 31
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <__udivdi3+0x420>
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	44 1f       	adc	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	0a 94       	dec	r0
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <__udivdi3+0x418>
     802:	6d a4       	ldd	r6, Y+45	; 0x2d
     804:	7e a4       	ldd	r7, Y+46	; 0x2e
     806:	8f a4       	ldd	r8, Y+47	; 0x2f
     808:	98 a8       	ldd	r9, Y+48	; 0x30
     80a:	0e 2e       	mov	r0, r30
     80c:	04 c0       	rjmp	.+8      	; 0x816 <__udivdi3+0x438>
     80e:	96 94       	lsr	r9
     810:	87 94       	ror	r8
     812:	77 94       	ror	r7
     814:	67 94       	ror	r6
     816:	0a 94       	dec	r0
     818:	d2 f7       	brpl	.-12     	; 0x80e <__udivdi3+0x430>
     81a:	84 01       	movw	r16, r8
     81c:	73 01       	movw	r14, r6
     81e:	e2 2a       	or	r14, r18
     820:	f3 2a       	or	r15, r19
     822:	04 2b       	or	r16, r20
     824:	15 2b       	or	r17, r21
     826:	e9 a6       	std	Y+41, r14	; 0x29
     828:	fa a6       	std	Y+42, r15	; 0x2a
     82a:	0b a7       	std	Y+43, r16	; 0x2b
     82c:	1c a7       	std	Y+44, r17	; 0x2c
     82e:	32 01       	movw	r6, r4
     830:	88 24       	eor	r8, r8
     832:	99 24       	eor	r9, r9
     834:	92 01       	movw	r18, r4
     836:	81 01       	movw	r16, r2
     838:	20 70       	andi	r18, 0x00	; 0
     83a:	30 70       	andi	r19, 0x00	; 0
     83c:	21 96       	adiw	r28, 0x01	; 1
     83e:	0c af       	std	Y+60, r16	; 0x3c
     840:	1d af       	std	Y+61, r17	; 0x3d
     842:	2e af       	std	Y+62, r18	; 0x3e
     844:	3f af       	std	Y+63, r19	; 0x3f
     846:	21 97       	sbiw	r28, 0x01	; 1
     848:	c6 01       	movw	r24, r12
     84a:	b5 01       	movw	r22, r10
     84c:	a4 01       	movw	r20, r8
     84e:	93 01       	movw	r18, r6
     850:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     854:	7b 01       	movw	r14, r22
     856:	8c 01       	movw	r16, r24
     858:	c6 01       	movw	r24, r12
     85a:	b5 01       	movw	r22, r10
     85c:	a4 01       	movw	r20, r8
     85e:	93 01       	movw	r18, r6
     860:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     864:	c9 01       	movw	r24, r18
     866:	da 01       	movw	r26, r20
     868:	25 96       	adiw	r28, 0x05	; 5
     86a:	8c af       	std	Y+60, r24	; 0x3c
     86c:	9d af       	std	Y+61, r25	; 0x3d
     86e:	ae af       	std	Y+62, r26	; 0x3e
     870:	bf af       	std	Y+63, r27	; 0x3f
     872:	25 97       	sbiw	r28, 0x05	; 5
     874:	bc 01       	movw	r22, r24
     876:	cd 01       	movw	r24, r26
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	2c ad       	ldd	r18, Y+60	; 0x3c
     87c:	3d ad       	ldd	r19, Y+61	; 0x3d
     87e:	4e ad       	ldd	r20, Y+62	; 0x3e
     880:	5f ad       	ldd	r21, Y+63	; 0x3f
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	87 01       	movw	r16, r14
     88e:	ff 24       	eor	r15, r15
     890:	ee 24       	eor	r14, r14
     892:	a9 a4       	ldd	r10, Y+41	; 0x29
     894:	ba a4       	ldd	r11, Y+42	; 0x2a
     896:	cb a4       	ldd	r12, Y+43	; 0x2b
     898:	dc a4       	ldd	r13, Y+44	; 0x2c
     89a:	c6 01       	movw	r24, r12
     89c:	aa 27       	eor	r26, r26
     89e:	bb 27       	eor	r27, r27
     8a0:	5c 01       	movw	r10, r24
     8a2:	6d 01       	movw	r12, r26
     8a4:	ae 28       	or	r10, r14
     8a6:	bf 28       	or	r11, r15
     8a8:	c0 2a       	or	r12, r16
     8aa:	d1 2a       	or	r13, r17
     8ac:	a2 16       	cp	r10, r18
     8ae:	b3 06       	cpc	r11, r19
     8b0:	c4 06       	cpc	r12, r20
     8b2:	d5 06       	cpc	r13, r21
     8b4:	60 f5       	brcc	.+88     	; 0x90e <__stack+0xaf>
     8b6:	25 96       	adiw	r28, 0x05	; 5
     8b8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8ba:	7d ad       	ldd	r23, Y+61	; 0x3d
     8bc:	8e ad       	ldd	r24, Y+62	; 0x3e
     8be:	9f ad       	ldd	r25, Y+63	; 0x3f
     8c0:	25 97       	sbiw	r28, 0x05	; 5
     8c2:	61 50       	subi	r22, 0x01	; 1
     8c4:	70 40       	sbci	r23, 0x00	; 0
     8c6:	80 40       	sbci	r24, 0x00	; 0
     8c8:	90 40       	sbci	r25, 0x00	; 0
     8ca:	25 96       	adiw	r28, 0x05	; 5
     8cc:	6c af       	std	Y+60, r22	; 0x3c
     8ce:	7d af       	std	Y+61, r23	; 0x3d
     8d0:	8e af       	std	Y+62, r24	; 0x3e
     8d2:	9f af       	std	Y+63, r25	; 0x3f
     8d4:	25 97       	sbiw	r28, 0x05	; 5
     8d6:	a2 0c       	add	r10, r2
     8d8:	b3 1c       	adc	r11, r3
     8da:	c4 1c       	adc	r12, r4
     8dc:	d5 1c       	adc	r13, r5
     8de:	a2 14       	cp	r10, r2
     8e0:	b3 04       	cpc	r11, r3
     8e2:	c4 04       	cpc	r12, r4
     8e4:	d5 04       	cpc	r13, r5
     8e6:	98 f0       	brcs	.+38     	; 0x90e <__stack+0xaf>
     8e8:	a2 16       	cp	r10, r18
     8ea:	b3 06       	cpc	r11, r19
     8ec:	c4 06       	cpc	r12, r20
     8ee:	d5 06       	cpc	r13, r21
     8f0:	70 f4       	brcc	.+28     	; 0x90e <__stack+0xaf>
     8f2:	61 50       	subi	r22, 0x01	; 1
     8f4:	70 40       	sbci	r23, 0x00	; 0
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	25 96       	adiw	r28, 0x05	; 5
     8fc:	6c af       	std	Y+60, r22	; 0x3c
     8fe:	7d af       	std	Y+61, r23	; 0x3d
     900:	8e af       	std	Y+62, r24	; 0x3e
     902:	9f af       	std	Y+63, r25	; 0x3f
     904:	25 97       	sbiw	r28, 0x05	; 5
     906:	a2 0c       	add	r10, r2
     908:	b3 1c       	adc	r11, r3
     90a:	c4 1c       	adc	r12, r4
     90c:	d5 1c       	adc	r13, r5
     90e:	a2 1a       	sub	r10, r18
     910:	b3 0a       	sbc	r11, r19
     912:	c4 0a       	sbc	r12, r20
     914:	d5 0a       	sbc	r13, r21
     916:	c6 01       	movw	r24, r12
     918:	b5 01       	movw	r22, r10
     91a:	a4 01       	movw	r20, r8
     91c:	93 01       	movw	r18, r6
     91e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	c6 01       	movw	r24, r12
     928:	b5 01       	movw	r22, r10
     92a:	a4 01       	movw	r20, r8
     92c:	93 01       	movw	r18, r6
     92e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	3c 01       	movw	r6, r24
     938:	4d 01       	movw	r8, r26
     93a:	c4 01       	movw	r24, r8
     93c:	b3 01       	movw	r22, r6
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	21 97       	sbiw	r28, 0x01	; 1
     94a:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	89 a5       	ldd	r24, Y+41	; 0x29
     95a:	9a a5       	ldd	r25, Y+42	; 0x2a
     95c:	ab a5       	ldd	r26, Y+43	; 0x2b
     95e:	bc a5       	ldd	r27, Y+44	; 0x2c
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	a8 2a       	or	r10, r24
     96a:	b9 2a       	or	r11, r25
     96c:	ca 2a       	or	r12, r26
     96e:	db 2a       	or	r13, r27
     970:	a2 16       	cp	r10, r18
     972:	b3 06       	cpc	r11, r19
     974:	c4 06       	cpc	r12, r20
     976:	d5 06       	cpc	r13, r21
     978:	e0 f4       	brcc	.+56     	; 0x9b2 <__stack+0x153>
     97a:	08 94       	sec
     97c:	61 08       	sbc	r6, r1
     97e:	71 08       	sbc	r7, r1
     980:	81 08       	sbc	r8, r1
     982:	91 08       	sbc	r9, r1
     984:	a2 0c       	add	r10, r2
     986:	b3 1c       	adc	r11, r3
     988:	c4 1c       	adc	r12, r4
     98a:	d5 1c       	adc	r13, r5
     98c:	a2 14       	cp	r10, r2
     98e:	b3 04       	cpc	r11, r3
     990:	c4 04       	cpc	r12, r4
     992:	d5 04       	cpc	r13, r5
     994:	70 f0       	brcs	.+28     	; 0x9b2 <__stack+0x153>
     996:	a2 16       	cp	r10, r18
     998:	b3 06       	cpc	r11, r19
     99a:	c4 06       	cpc	r12, r20
     99c:	d5 06       	cpc	r13, r21
     99e:	48 f4       	brcc	.+18     	; 0x9b2 <__stack+0x153>
     9a0:	08 94       	sec
     9a2:	61 08       	sbc	r6, r1
     9a4:	71 08       	sbc	r7, r1
     9a6:	81 08       	sbc	r8, r1
     9a8:	91 08       	sbc	r9, r1
     9aa:	a2 0c       	add	r10, r2
     9ac:	b3 1c       	adc	r11, r3
     9ae:	c4 1c       	adc	r12, r4
     9b0:	d5 1c       	adc	r13, r5
     9b2:	8d a5       	ldd	r24, Y+45	; 0x2d
     9b4:	9e a5       	ldd	r25, Y+46	; 0x2e
     9b6:	af a5       	ldd	r26, Y+47	; 0x2f
     9b8:	b8 a9       	ldd	r27, Y+48	; 0x30
     9ba:	6f 96       	adiw	r28, 0x1f	; 31
     9bc:	0f ac       	ldd	r0, Y+63	; 0x3f
     9be:	6f 97       	sbiw	r28, 0x1f	; 31
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__stack+0x16b>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__stack+0x163>
     9ce:	8d a7       	std	Y+45, r24	; 0x2d
     9d0:	9e a7       	std	Y+46, r25	; 0x2e
     9d2:	af a7       	std	Y+47, r26	; 0x2f
     9d4:	b8 ab       	std	Y+48, r27	; 0x30
     9d6:	a2 1a       	sub	r10, r18
     9d8:	b3 0a       	sbc	r11, r19
     9da:	c4 0a       	sbc	r12, r20
     9dc:	d5 0a       	sbc	r13, r21
     9de:	25 96       	adiw	r28, 0x05	; 5
     9e0:	ec ac       	ldd	r14, Y+60	; 0x3c
     9e2:	fd ac       	ldd	r15, Y+61	; 0x3d
     9e4:	0e ad       	ldd	r16, Y+62	; 0x3e
     9e6:	1f ad       	ldd	r17, Y+63	; 0x3f
     9e8:	25 97       	sbiw	r28, 0x05	; 5
     9ea:	d7 01       	movw	r26, r14
     9ec:	99 27       	eor	r25, r25
     9ee:	88 27       	eor	r24, r24
     9f0:	68 2a       	or	r6, r24
     9f2:	79 2a       	or	r7, r25
     9f4:	8a 2a       	or	r8, r26
     9f6:	9b 2a       	or	r9, r27
     9f8:	82 01       	movw	r16, r4
     9fa:	22 27       	eor	r18, r18
     9fc:	33 27       	eor	r19, r19
     9fe:	29 96       	adiw	r28, 0x09	; 9
     a00:	0c af       	std	Y+60, r16	; 0x3c
     a02:	1d af       	std	Y+61, r17	; 0x3d
     a04:	2e af       	std	Y+62, r18	; 0x3e
     a06:	3f af       	std	Y+63, r19	; 0x3f
     a08:	29 97       	sbiw	r28, 0x09	; 9
     a0a:	a2 01       	movw	r20, r4
     a0c:	91 01       	movw	r18, r2
     a0e:	40 70       	andi	r20, 0x00	; 0
     a10:	50 70       	andi	r21, 0x00	; 0
     a12:	2d 96       	adiw	r28, 0x0d	; 13
     a14:	2c af       	std	Y+60, r18	; 0x3c
     a16:	3d af       	std	Y+61, r19	; 0x3d
     a18:	4e af       	std	Y+62, r20	; 0x3e
     a1a:	5f af       	std	Y+63, r21	; 0x3f
     a1c:	2d 97       	sbiw	r28, 0x0d	; 13
     a1e:	c6 01       	movw	r24, r12
     a20:	b5 01       	movw	r22, r10
     a22:	29 96       	adiw	r28, 0x09	; 9
     a24:	2c ad       	ldd	r18, Y+60	; 0x3c
     a26:	3d ad       	ldd	r19, Y+61	; 0x3d
     a28:	4e ad       	ldd	r20, Y+62	; 0x3e
     a2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
     a36:	c6 01       	movw	r24, r12
     a38:	b5 01       	movw	r22, r10
     a3a:	29 96       	adiw	r28, 0x09	; 9
     a3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a40:	4e ad       	ldd	r20, Y+62	; 0x3e
     a42:	5f ad       	ldd	r21, Y+63	; 0x3f
     a44:	29 97       	sbiw	r28, 0x09	; 9
     a46:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     a4a:	c9 01       	movw	r24, r18
     a4c:	da 01       	movw	r26, r20
     a4e:	61 96       	adiw	r28, 0x11	; 17
     a50:	8c af       	std	Y+60, r24	; 0x3c
     a52:	9d af       	std	Y+61, r25	; 0x3d
     a54:	ae af       	std	Y+62, r26	; 0x3e
     a56:	bf af       	std	Y+63, r27	; 0x3f
     a58:	61 97       	sbiw	r28, 0x11	; 17
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	2d 96       	adiw	r28, 0x0d	; 13
     a60:	2c ad       	ldd	r18, Y+60	; 0x3c
     a62:	3d ad       	ldd	r19, Y+61	; 0x3d
     a64:	4e ad       	ldd	r20, Y+62	; 0x3e
     a66:	5f ad       	ldd	r21, Y+63	; 0x3f
     a68:	2d 97       	sbiw	r28, 0x0d	; 13
     a6a:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	87 01       	movw	r16, r14
     a74:	ff 24       	eor	r15, r15
     a76:	ee 24       	eor	r14, r14
     a78:	ad a4       	ldd	r10, Y+45	; 0x2d
     a7a:	be a4       	ldd	r11, Y+46	; 0x2e
     a7c:	cf a4       	ldd	r12, Y+47	; 0x2f
     a7e:	d8 a8       	ldd	r13, Y+48	; 0x30
     a80:	c6 01       	movw	r24, r12
     a82:	aa 27       	eor	r26, r26
     a84:	bb 27       	eor	r27, r27
     a86:	57 01       	movw	r10, r14
     a88:	68 01       	movw	r12, r16
     a8a:	a8 2a       	or	r10, r24
     a8c:	b9 2a       	or	r11, r25
     a8e:	ca 2a       	or	r12, r26
     a90:	db 2a       	or	r13, r27
     a92:	a2 16       	cp	r10, r18
     a94:	b3 06       	cpc	r11, r19
     a96:	c4 06       	cpc	r12, r20
     a98:	d5 06       	cpc	r13, r21
     a9a:	60 f5       	brcc	.+88     	; 0xaf4 <__stack+0x295>
     a9c:	61 96       	adiw	r28, 0x11	; 17
     a9e:	6c ad       	ldd	r22, Y+60	; 0x3c
     aa0:	7d ad       	ldd	r23, Y+61	; 0x3d
     aa2:	8e ad       	ldd	r24, Y+62	; 0x3e
     aa4:	9f ad       	ldd	r25, Y+63	; 0x3f
     aa6:	61 97       	sbiw	r28, 0x11	; 17
     aa8:	61 50       	subi	r22, 0x01	; 1
     aaa:	70 40       	sbci	r23, 0x00	; 0
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	61 96       	adiw	r28, 0x11	; 17
     ab2:	6c af       	std	Y+60, r22	; 0x3c
     ab4:	7d af       	std	Y+61, r23	; 0x3d
     ab6:	8e af       	std	Y+62, r24	; 0x3e
     ab8:	9f af       	std	Y+63, r25	; 0x3f
     aba:	61 97       	sbiw	r28, 0x11	; 17
     abc:	a2 0c       	add	r10, r2
     abe:	b3 1c       	adc	r11, r3
     ac0:	c4 1c       	adc	r12, r4
     ac2:	d5 1c       	adc	r13, r5
     ac4:	a2 14       	cp	r10, r2
     ac6:	b3 04       	cpc	r11, r3
     ac8:	c4 04       	cpc	r12, r4
     aca:	d5 04       	cpc	r13, r5
     acc:	98 f0       	brcs	.+38     	; 0xaf4 <__stack+0x295>
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	70 f4       	brcc	.+28     	; 0xaf4 <__stack+0x295>
     ad8:	61 50       	subi	r22, 0x01	; 1
     ada:	70 40       	sbci	r23, 0x00	; 0
     adc:	80 40       	sbci	r24, 0x00	; 0
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	61 96       	adiw	r28, 0x11	; 17
     ae2:	6c af       	std	Y+60, r22	; 0x3c
     ae4:	7d af       	std	Y+61, r23	; 0x3d
     ae6:	8e af       	std	Y+62, r24	; 0x3e
     ae8:	9f af       	std	Y+63, r25	; 0x3f
     aea:	61 97       	sbiw	r28, 0x11	; 17
     aec:	a2 0c       	add	r10, r2
     aee:	b3 1c       	adc	r11, r3
     af0:	c4 1c       	adc	r12, r4
     af2:	d5 1c       	adc	r13, r5
     af4:	a2 1a       	sub	r10, r18
     af6:	b3 0a       	sbc	r11, r19
     af8:	c4 0a       	sbc	r12, r20
     afa:	d5 0a       	sbc	r13, r21
     afc:	c6 01       	movw	r24, r12
     afe:	b5 01       	movw	r22, r10
     b00:	29 96       	adiw	r28, 0x09	; 9
     b02:	2c ad       	ldd	r18, Y+60	; 0x3c
     b04:	3d ad       	ldd	r19, Y+61	; 0x3d
     b06:	4e ad       	ldd	r20, Y+62	; 0x3e
     b08:	5f ad       	ldd	r21, Y+63	; 0x3f
     b0a:	29 97       	sbiw	r28, 0x09	; 9
     b0c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	c6 01       	movw	r24, r12
     b16:	b5 01       	movw	r22, r10
     b18:	29 96       	adiw	r28, 0x09	; 9
     b1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b20:	5f ad       	ldd	r21, Y+63	; 0x3f
     b22:	29 97       	sbiw	r28, 0x09	; 9
     b24:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     b28:	c9 01       	movw	r24, r18
     b2a:	da 01       	movw	r26, r20
     b2c:	5c 01       	movw	r10, r24
     b2e:	6d 01       	movw	r12, r26
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	2d 96       	adiw	r28, 0x0d	; 13
     b36:	2c ad       	ldd	r18, Y+60	; 0x3c
     b38:	3d ad       	ldd	r19, Y+61	; 0x3d
     b3a:	4e ad       	ldd	r20, Y+62	; 0x3e
     b3c:	5f ad       	ldd	r21, Y+63	; 0x3f
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     b44:	9b 01       	movw	r18, r22
     b46:	ac 01       	movw	r20, r24
     b48:	87 01       	movw	r16, r14
     b4a:	ff 24       	eor	r15, r15
     b4c:	ee 24       	eor	r14, r14
     b4e:	8d a5       	ldd	r24, Y+45	; 0x2d
     b50:	9e a5       	ldd	r25, Y+46	; 0x2e
     b52:	af a5       	ldd	r26, Y+47	; 0x2f
     b54:	b8 a9       	ldd	r27, Y+48	; 0x30
     b56:	a0 70       	andi	r26, 0x00	; 0
     b58:	b0 70       	andi	r27, 0x00	; 0
     b5a:	e8 2a       	or	r14, r24
     b5c:	f9 2a       	or	r15, r25
     b5e:	0a 2b       	or	r16, r26
     b60:	1b 2b       	or	r17, r27
     b62:	e2 16       	cp	r14, r18
     b64:	f3 06       	cpc	r15, r19
     b66:	04 07       	cpc	r16, r20
     b68:	15 07       	cpc	r17, r21
     b6a:	c0 f4       	brcc	.+48     	; 0xb9c <__stack+0x33d>
     b6c:	08 94       	sec
     b6e:	a1 08       	sbc	r10, r1
     b70:	b1 08       	sbc	r11, r1
     b72:	c1 08       	sbc	r12, r1
     b74:	d1 08       	sbc	r13, r1
     b76:	e2 0c       	add	r14, r2
     b78:	f3 1c       	adc	r15, r3
     b7a:	04 1d       	adc	r16, r4
     b7c:	15 1d       	adc	r17, r5
     b7e:	e2 14       	cp	r14, r2
     b80:	f3 04       	cpc	r15, r3
     b82:	04 05       	cpc	r16, r4
     b84:	15 05       	cpc	r17, r5
     b86:	50 f0       	brcs	.+20     	; 0xb9c <__stack+0x33d>
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	28 f4       	brcc	.+10     	; 0xb9c <__stack+0x33d>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	61 96       	adiw	r28, 0x11	; 17
     b9e:	ec ac       	ldd	r14, Y+60	; 0x3c
     ba0:	fd ac       	ldd	r15, Y+61	; 0x3d
     ba2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ba4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ba6:	61 97       	sbiw	r28, 0x11	; 17
     ba8:	d7 01       	movw	r26, r14
     baa:	99 27       	eor	r25, r25
     bac:	88 27       	eor	r24, r24
     bae:	96 01       	movw	r18, r12
     bb0:	85 01       	movw	r16, r10
     bb2:	08 2b       	or	r16, r24
     bb4:	19 2b       	or	r17, r25
     bb6:	2a 2b       	or	r18, r26
     bb8:	3b 2b       	or	r19, r27
     bba:	09 ab       	std	Y+49, r16	; 0x31
     bbc:	1a ab       	std	Y+50, r17	; 0x32
     bbe:	2b ab       	std	Y+51, r18	; 0x33
     bc0:	3c ab       	std	Y+52, r19	; 0x34
     bc2:	62 c2       	rjmp	.+1220   	; 0x1088 <__stack+0x829>
     bc4:	6e 14       	cp	r6, r14
     bc6:	7f 04       	cpc	r7, r15
     bc8:	80 06       	cpc	r8, r16
     bca:	91 06       	cpc	r9, r17
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__stack+0x371>
     bce:	51 c2       	rjmp	.+1186   	; 0x1072 <__stack+0x813>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	e2 16       	cp	r14, r18
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	f2 06       	cpc	r15, r18
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	02 07       	cpc	r16, r18
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	12 07       	cpc	r17, r18
     be0:	88 f4       	brcc	.+34     	; 0xc04 <__stack+0x3a5>
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	e3 16       	cp	r14, r19
     be6:	f1 04       	cpc	r15, r1
     be8:	01 05       	cpc	r16, r1
     bea:	11 05       	cpc	r17, r1
     bec:	31 f0       	breq	.+12     	; 0xbfa <__stack+0x39b>
     bee:	28 f0       	brcs	.+10     	; 0xbfa <__stack+0x39b>
     bf0:	48 e0       	ldi	r20, 0x08	; 8
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <__stack+0x3c9>
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	12 c0       	rjmp	.+36     	; 0xc28 <__stack+0x3c9>
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	e4 16       	cp	r14, r20
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	f4 06       	cpc	r15, r20
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	04 07       	cpc	r16, r20
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	14 07       	cpc	r17, r20
     c14:	28 f0       	brcs	.+10     	; 0xc20 <__stack+0x3c1>
     c16:	48 e1       	ldi	r20, 0x18	; 24
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__stack+0x3c9>
     c20:	40 e1       	ldi	r20, 0x10	; 16
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	d8 01       	movw	r26, r16
     c2a:	c7 01       	movw	r24, r14
     c2c:	04 2e       	mov	r0, r20
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__stack+0x3d9>
     c30:	b6 95       	lsr	r27
     c32:	a7 95       	ror	r26
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__stack+0x3d1>
     c3c:	83 58       	subi	r24, 0x83	; 131
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	dc 01       	movw	r26, r24
     c42:	2c 91       	ld	r18, X
     c44:	30 e2       	ldi	r19, 0x20	; 32
     c46:	a3 2e       	mov	r10, r19
     c48:	b1 2c       	mov	r11, r1
     c4a:	c1 2c       	mov	r12, r1
     c4c:	d1 2c       	mov	r13, r1
     c4e:	d6 01       	movw	r26, r12
     c50:	c5 01       	movw	r24, r10
     c52:	84 1b       	sub	r24, r20
     c54:	95 0b       	sbc	r25, r21
     c56:	a6 0b       	sbc	r26, r22
     c58:	b7 0b       	sbc	r27, r23
     c5a:	82 1b       	sub	r24, r18
     c5c:	91 09       	sbc	r25, r1
     c5e:	a1 09       	sbc	r26, r1
     c60:	b1 09       	sbc	r27, r1
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
     c68:	89 f4       	brne	.+34     	; 0xc8c <__stack+0x42d>
     c6a:	e6 14       	cp	r14, r6
     c6c:	f7 04       	cpc	r15, r7
     c6e:	08 05       	cpc	r16, r8
     c70:	19 05       	cpc	r17, r9
     c72:	08 f4       	brcc	.+2      	; 0xc76 <__stack+0x417>
     c74:	f2 c1       	rjmp	.+996    	; 0x105a <__stack+0x7fb>
     c76:	6d a4       	ldd	r6, Y+45	; 0x2d
     c78:	7e a4       	ldd	r7, Y+46	; 0x2e
     c7a:	8f a4       	ldd	r8, Y+47	; 0x2f
     c7c:	98 a8       	ldd	r9, Y+48	; 0x30
     c7e:	62 14       	cp	r6, r2
     c80:	73 04       	cpc	r7, r3
     c82:	84 04       	cpc	r8, r4
     c84:	95 04       	cpc	r9, r5
     c86:	08 f0       	brcs	.+2      	; 0xc8a <__stack+0x42b>
     c88:	e8 c1       	rjmp	.+976    	; 0x105a <__stack+0x7fb>
     c8a:	f3 c1       	rjmp	.+998    	; 0x1072 <__stack+0x813>
     c8c:	6e 96       	adiw	r28, 0x1e	; 30
     c8e:	8f af       	std	Y+63, r24	; 0x3f
     c90:	6e 97       	sbiw	r28, 0x1e	; 30
     c92:	08 2e       	mov	r0, r24
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	ee 0c       	add	r14, r14
     c98:	ff 1c       	adc	r15, r15
     c9a:	00 1f       	adc	r16, r16
     c9c:	11 1f       	adc	r17, r17
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	6a 2d       	mov	r22, r10
     ca4:	68 1b       	sub	r22, r24
     ca6:	d2 01       	movw	r26, r4
     ca8:	c1 01       	movw	r24, r2
     caa:	06 2e       	mov	r0, r22
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__stack+0x457>
     cae:	b6 95       	lsr	r27
     cb0:	a7 95       	ror	r26
     cb2:	97 95       	ror	r25
     cb4:	87 95       	ror	r24
     cb6:	0a 94       	dec	r0
     cb8:	d2 f7       	brpl	.-12     	; 0xcae <__stack+0x44f>
     cba:	5c 01       	movw	r10, r24
     cbc:	6d 01       	movw	r12, r26
     cbe:	ae 28       	or	r10, r14
     cc0:	bf 28       	or	r11, r15
     cc2:	c0 2a       	or	r12, r16
     cc4:	d1 2a       	or	r13, r17
     cc6:	ad a2       	std	Y+37, r10	; 0x25
     cc8:	be a2       	std	Y+38, r11	; 0x26
     cca:	cf a2       	std	Y+39, r12	; 0x27
     ccc:	d8 a6       	std	Y+40, r13	; 0x28
     cce:	72 01       	movw	r14, r4
     cd0:	61 01       	movw	r12, r2
     cd2:	6e 96       	adiw	r28, 0x1e	; 30
     cd4:	0f ac       	ldd	r0, Y+63	; 0x3f
     cd6:	6e 97       	sbiw	r28, 0x1e	; 30
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x483>
     cda:	cc 0c       	add	r12, r12
     cdc:	dd 1c       	adc	r13, r13
     cde:	ee 1c       	adc	r14, r14
     ce0:	ff 1c       	adc	r15, r15
     ce2:	0a 94       	dec	r0
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <__stack+0x47b>
     ce6:	c9 a2       	std	Y+33, r12	; 0x21
     ce8:	da a2       	std	Y+34, r13	; 0x22
     cea:	eb a2       	std	Y+35, r14	; 0x23
     cec:	fc a2       	std	Y+36, r15	; 0x24
     cee:	64 01       	movw	r12, r8
     cf0:	53 01       	movw	r10, r6
     cf2:	06 2e       	mov	r0, r22
     cf4:	04 c0       	rjmp	.+8      	; 0xcfe <__stack+0x49f>
     cf6:	d6 94       	lsr	r13
     cf8:	c7 94       	ror	r12
     cfa:	b7 94       	ror	r11
     cfc:	a7 94       	ror	r10
     cfe:	0a 94       	dec	r0
     d00:	d2 f7       	brpl	.-12     	; 0xcf6 <__stack+0x497>
     d02:	d4 01       	movw	r26, r8
     d04:	c3 01       	movw	r24, r6
     d06:	6e 96       	adiw	r28, 0x1e	; 30
     d08:	0f ac       	ldd	r0, Y+63	; 0x3f
     d0a:	6e 97       	sbiw	r28, 0x1e	; 30
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__stack+0x4b7>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	aa 1f       	adc	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	0a 94       	dec	r0
     d18:	d2 f7       	brpl	.-12     	; 0xd0e <__stack+0x4af>
     d1a:	ed a4       	ldd	r14, Y+45	; 0x2d
     d1c:	fe a4       	ldd	r15, Y+46	; 0x2e
     d1e:	0f a5       	ldd	r16, Y+47	; 0x2f
     d20:	18 a9       	ldd	r17, Y+48	; 0x30
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x4cd>
     d24:	16 95       	lsr	r17
     d26:	07 95       	ror	r16
     d28:	f7 94       	ror	r15
     d2a:	e7 94       	ror	r14
     d2c:	6a 95       	dec	r22
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x4c5>
     d30:	37 01       	movw	r6, r14
     d32:	48 01       	movw	r8, r16
     d34:	68 2a       	or	r6, r24
     d36:	79 2a       	or	r7, r25
     d38:	8a 2a       	or	r8, r26
     d3a:	9b 2a       	or	r9, r27
     d3c:	6d 8e       	std	Y+29, r6	; 0x1d
     d3e:	7e 8e       	std	Y+30, r7	; 0x1e
     d40:	8f 8e       	std	Y+31, r8	; 0x1f
     d42:	98 a2       	std	Y+32, r9	; 0x20
     d44:	ed a0       	ldd	r14, Y+37	; 0x25
     d46:	fe a0       	ldd	r15, Y+38	; 0x26
     d48:	0f a1       	ldd	r16, Y+39	; 0x27
     d4a:	18 a5       	ldd	r17, Y+40	; 0x28
     d4c:	38 01       	movw	r6, r16
     d4e:	88 24       	eor	r8, r8
     d50:	99 24       	eor	r9, r9
     d52:	98 01       	movw	r18, r16
     d54:	87 01       	movw	r16, r14
     d56:	20 70       	andi	r18, 0x00	; 0
     d58:	30 70       	andi	r19, 0x00	; 0
     d5a:	65 96       	adiw	r28, 0x15	; 21
     d5c:	0c af       	std	Y+60, r16	; 0x3c
     d5e:	1d af       	std	Y+61, r17	; 0x3d
     d60:	2e af       	std	Y+62, r18	; 0x3e
     d62:	3f af       	std	Y+63, r19	; 0x3f
     d64:	65 97       	sbiw	r28, 0x15	; 21
     d66:	c6 01       	movw	r24, r12
     d68:	b5 01       	movw	r22, r10
     d6a:	a4 01       	movw	r20, r8
     d6c:	93 01       	movw	r18, r6
     d6e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     d72:	7b 01       	movw	r14, r22
     d74:	8c 01       	movw	r16, r24
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	a4 01       	movw	r20, r8
     d7c:	93 01       	movw	r18, r6
     d7e:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     d82:	c9 01       	movw	r24, r18
     d84:	da 01       	movw	r26, r20
     d86:	1c 01       	movw	r2, r24
     d88:	2d 01       	movw	r4, r26
     d8a:	c2 01       	movw	r24, r4
     d8c:	b1 01       	movw	r22, r2
     d8e:	65 96       	adiw	r28, 0x15	; 21
     d90:	2c ad       	ldd	r18, Y+60	; 0x3c
     d92:	3d ad       	ldd	r19, Y+61	; 0x3d
     d94:	4e ad       	ldd	r20, Y+62	; 0x3e
     d96:	5f ad       	ldd	r21, Y+63	; 0x3f
     d98:	65 97       	sbiw	r28, 0x15	; 21
     d9a:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     d9e:	9b 01       	movw	r18, r22
     da0:	ac 01       	movw	r20, r24
     da2:	87 01       	movw	r16, r14
     da4:	ff 24       	eor	r15, r15
     da6:	ee 24       	eor	r14, r14
     da8:	ad 8c       	ldd	r10, Y+29	; 0x1d
     daa:	be 8c       	ldd	r11, Y+30	; 0x1e
     dac:	cf 8c       	ldd	r12, Y+31	; 0x1f
     dae:	d8 a0       	ldd	r13, Y+32	; 0x20
     db0:	c6 01       	movw	r24, r12
     db2:	aa 27       	eor	r26, r26
     db4:	bb 27       	eor	r27, r27
     db6:	57 01       	movw	r10, r14
     db8:	68 01       	movw	r12, r16
     dba:	a8 2a       	or	r10, r24
     dbc:	b9 2a       	or	r11, r25
     dbe:	ca 2a       	or	r12, r26
     dc0:	db 2a       	or	r13, r27
     dc2:	a2 16       	cp	r10, r18
     dc4:	b3 06       	cpc	r11, r19
     dc6:	c4 06       	cpc	r12, r20
     dc8:	d5 06       	cpc	r13, r21
     dca:	00 f5       	brcc	.+64     	; 0xe0c <__stack+0x5ad>
     dcc:	08 94       	sec
     dce:	21 08       	sbc	r2, r1
     dd0:	31 08       	sbc	r3, r1
     dd2:	41 08       	sbc	r4, r1
     dd4:	51 08       	sbc	r5, r1
     dd6:	ed a0       	ldd	r14, Y+37	; 0x25
     dd8:	fe a0       	ldd	r15, Y+38	; 0x26
     dda:	0f a1       	ldd	r16, Y+39	; 0x27
     ddc:	18 a5       	ldd	r17, Y+40	; 0x28
     dde:	ae 0c       	add	r10, r14
     de0:	bf 1c       	adc	r11, r15
     de2:	c0 1e       	adc	r12, r16
     de4:	d1 1e       	adc	r13, r17
     de6:	ae 14       	cp	r10, r14
     de8:	bf 04       	cpc	r11, r15
     dea:	c0 06       	cpc	r12, r16
     dec:	d1 06       	cpc	r13, r17
     dee:	70 f0       	brcs	.+28     	; 0xe0c <__stack+0x5ad>
     df0:	a2 16       	cp	r10, r18
     df2:	b3 06       	cpc	r11, r19
     df4:	c4 06       	cpc	r12, r20
     df6:	d5 06       	cpc	r13, r21
     df8:	48 f4       	brcc	.+18     	; 0xe0c <__stack+0x5ad>
     dfa:	08 94       	sec
     dfc:	21 08       	sbc	r2, r1
     dfe:	31 08       	sbc	r3, r1
     e00:	41 08       	sbc	r4, r1
     e02:	51 08       	sbc	r5, r1
     e04:	ae 0c       	add	r10, r14
     e06:	bf 1c       	adc	r11, r15
     e08:	c0 1e       	adc	r12, r16
     e0a:	d1 1e       	adc	r13, r17
     e0c:	a2 1a       	sub	r10, r18
     e0e:	b3 0a       	sbc	r11, r19
     e10:	c4 0a       	sbc	r12, r20
     e12:	d5 0a       	sbc	r13, r21
     e14:	c6 01       	movw	r24, r12
     e16:	b5 01       	movw	r22, r10
     e18:	a4 01       	movw	r20, r8
     e1a:	93 01       	movw	r18, r6
     e1c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     e20:	7b 01       	movw	r14, r22
     e22:	8c 01       	movw	r16, r24
     e24:	c6 01       	movw	r24, r12
     e26:	b5 01       	movw	r22, r10
     e28:	a4 01       	movw	r20, r8
     e2a:	93 01       	movw	r18, r6
     e2c:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
     e30:	c9 01       	movw	r24, r18
     e32:	da 01       	movw	r26, r20
     e34:	3c 01       	movw	r6, r24
     e36:	4d 01       	movw	r8, r26
     e38:	c4 01       	movw	r24, r8
     e3a:	b3 01       	movw	r22, r6
     e3c:	65 96       	adiw	r28, 0x15	; 21
     e3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e40:	3d ad       	ldd	r19, Y+61	; 0x3d
     e42:	4e ad       	ldd	r20, Y+62	; 0x3e
     e44:	5f ad       	ldd	r21, Y+63	; 0x3f
     e46:	65 97       	sbiw	r28, 0x15	; 21
     e48:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     e4c:	9b 01       	movw	r18, r22
     e4e:	ac 01       	movw	r20, r24
     e50:	87 01       	movw	r16, r14
     e52:	ff 24       	eor	r15, r15
     e54:	ee 24       	eor	r14, r14
     e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e58:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e5a:	af 8d       	ldd	r26, Y+31	; 0x1f
     e5c:	b8 a1       	ldd	r27, Y+32	; 0x20
     e5e:	a0 70       	andi	r26, 0x00	; 0
     e60:	b0 70       	andi	r27, 0x00	; 0
     e62:	57 01       	movw	r10, r14
     e64:	68 01       	movw	r12, r16
     e66:	a8 2a       	or	r10, r24
     e68:	b9 2a       	or	r11, r25
     e6a:	ca 2a       	or	r12, r26
     e6c:	db 2a       	or	r13, r27
     e6e:	a2 16       	cp	r10, r18
     e70:	b3 06       	cpc	r11, r19
     e72:	c4 06       	cpc	r12, r20
     e74:	d5 06       	cpc	r13, r21
     e76:	00 f5       	brcc	.+64     	; 0xeb8 <__stack+0x659>
     e78:	08 94       	sec
     e7a:	61 08       	sbc	r6, r1
     e7c:	71 08       	sbc	r7, r1
     e7e:	81 08       	sbc	r8, r1
     e80:	91 08       	sbc	r9, r1
     e82:	6d a1       	ldd	r22, Y+37	; 0x25
     e84:	7e a1       	ldd	r23, Y+38	; 0x26
     e86:	8f a1       	ldd	r24, Y+39	; 0x27
     e88:	98 a5       	ldd	r25, Y+40	; 0x28
     e8a:	a6 0e       	add	r10, r22
     e8c:	b7 1e       	adc	r11, r23
     e8e:	c8 1e       	adc	r12, r24
     e90:	d9 1e       	adc	r13, r25
     e92:	a6 16       	cp	r10, r22
     e94:	b7 06       	cpc	r11, r23
     e96:	c8 06       	cpc	r12, r24
     e98:	d9 06       	cpc	r13, r25
     e9a:	70 f0       	brcs	.+28     	; 0xeb8 <__stack+0x659>
     e9c:	a2 16       	cp	r10, r18
     e9e:	b3 06       	cpc	r11, r19
     ea0:	c4 06       	cpc	r12, r20
     ea2:	d5 06       	cpc	r13, r21
     ea4:	48 f4       	brcc	.+18     	; 0xeb8 <__stack+0x659>
     ea6:	08 94       	sec
     ea8:	61 08       	sbc	r6, r1
     eaa:	71 08       	sbc	r7, r1
     eac:	81 08       	sbc	r8, r1
     eae:	91 08       	sbc	r9, r1
     eb0:	a6 0e       	add	r10, r22
     eb2:	b7 1e       	adc	r11, r23
     eb4:	c8 1e       	adc	r12, r24
     eb6:	d9 1e       	adc	r13, r25
     eb8:	d6 01       	movw	r26, r12
     eba:	c5 01       	movw	r24, r10
     ebc:	82 1b       	sub	r24, r18
     ebe:	93 0b       	sbc	r25, r19
     ec0:	a4 0b       	sbc	r26, r20
     ec2:	b5 0b       	sbc	r27, r21
     ec4:	89 8f       	std	Y+25, r24	; 0x19
     ec6:	9a 8f       	std	Y+26, r25	; 0x1a
     ec8:	ab 8f       	std	Y+27, r26	; 0x1b
     eca:	bc 8f       	std	Y+28, r27	; 0x1c
     ecc:	d1 01       	movw	r26, r2
     ece:	99 27       	eor	r25, r25
     ed0:	88 27       	eor	r24, r24
     ed2:	64 01       	movw	r12, r8
     ed4:	53 01       	movw	r10, r6
     ed6:	a8 2a       	or	r10, r24
     ed8:	b9 2a       	or	r11, r25
     eda:	ca 2a       	or	r12, r26
     edc:	db 2a       	or	r13, r27
     ede:	a9 aa       	std	Y+49, r10	; 0x31
     ee0:	ba aa       	std	Y+50, r11	; 0x32
     ee2:	cb aa       	std	Y+51, r12	; 0x33
     ee4:	dc aa       	std	Y+52, r13	; 0x34
     ee6:	86 01       	movw	r16, r12
     ee8:	75 01       	movw	r14, r10
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	e2 22       	and	r14, r18
     ef4:	f3 22       	and	r15, r19
     ef6:	04 23       	and	r16, r20
     ef8:	15 23       	and	r17, r21
     efa:	a6 01       	movw	r20, r12
     efc:	66 27       	eor	r22, r22
     efe:	77 27       	eor	r23, r23
     f00:	6d 96       	adiw	r28, 0x1d	; 29
     f02:	4c af       	std	Y+60, r20	; 0x3c
     f04:	5d af       	std	Y+61, r21	; 0x3d
     f06:	6e af       	std	Y+62, r22	; 0x3e
     f08:	7f af       	std	Y+63, r23	; 0x3f
     f0a:	6d 97       	sbiw	r28, 0x1d	; 29
     f0c:	a9 a0       	ldd	r10, Y+33	; 0x21
     f0e:	ba a0       	ldd	r11, Y+34	; 0x22
     f10:	cb a0       	ldd	r12, Y+35	; 0x23
     f12:	dc a0       	ldd	r13, Y+36	; 0x24
     f14:	6f ef       	ldi	r22, 0xFF	; 255
     f16:	7f ef       	ldi	r23, 0xFF	; 255
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a6 22       	and	r10, r22
     f1e:	b7 22       	and	r11, r23
     f20:	c8 22       	and	r12, r24
     f22:	d9 22       	and	r13, r25
     f24:	89 a1       	ldd	r24, Y+33	; 0x21
     f26:	9a a1       	ldd	r25, Y+34	; 0x22
     f28:	ab a1       	ldd	r26, Y+35	; 0x23
     f2a:	bc a1       	ldd	r27, Y+36	; 0x24
     f2c:	1d 01       	movw	r2, r26
     f2e:	44 24       	eor	r4, r4
     f30:	55 24       	eor	r5, r5
     f32:	c8 01       	movw	r24, r16
     f34:	b7 01       	movw	r22, r14
     f36:	a6 01       	movw	r20, r12
     f38:	95 01       	movw	r18, r10
     f3a:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     f3e:	69 96       	adiw	r28, 0x19	; 25
     f40:	6c af       	std	Y+60, r22	; 0x3c
     f42:	7d af       	std	Y+61, r23	; 0x3d
     f44:	8e af       	std	Y+62, r24	; 0x3e
     f46:	9f af       	std	Y+63, r25	; 0x3f
     f48:	69 97       	sbiw	r28, 0x19	; 25
     f4a:	c8 01       	movw	r24, r16
     f4c:	b7 01       	movw	r22, r14
     f4e:	a2 01       	movw	r20, r4
     f50:	91 01       	movw	r18, r2
     f52:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     f56:	3b 01       	movw	r6, r22
     f58:	4c 01       	movw	r8, r24
     f5a:	6d 96       	adiw	r28, 0x1d	; 29
     f5c:	6c ad       	ldd	r22, Y+60	; 0x3c
     f5e:	7d ad       	ldd	r23, Y+61	; 0x3d
     f60:	8e ad       	ldd	r24, Y+62	; 0x3e
     f62:	9f ad       	ldd	r25, Y+63	; 0x3f
     f64:	6d 97       	sbiw	r28, 0x1d	; 29
     f66:	a6 01       	movw	r20, r12
     f68:	95 01       	movw	r18, r10
     f6a:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     f6e:	7b 01       	movw	r14, r22
     f70:	8c 01       	movw	r16, r24
     f72:	6d 96       	adiw	r28, 0x1d	; 29
     f74:	6c ad       	ldd	r22, Y+60	; 0x3c
     f76:	7d ad       	ldd	r23, Y+61	; 0x3d
     f78:	8e ad       	ldd	r24, Y+62	; 0x3e
     f7a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f7c:	6d 97       	sbiw	r28, 0x1d	; 29
     f7e:	a2 01       	movw	r20, r4
     f80:	91 01       	movw	r18, r2
     f82:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
     f86:	5b 01       	movw	r10, r22
     f88:	6c 01       	movw	r12, r24
     f8a:	a8 01       	movw	r20, r16
     f8c:	97 01       	movw	r18, r14
     f8e:	26 0d       	add	r18, r6
     f90:	37 1d       	adc	r19, r7
     f92:	48 1d       	adc	r20, r8
     f94:	59 1d       	adc	r21, r9
     f96:	69 96       	adiw	r28, 0x19	; 25
     f98:	6c ac       	ldd	r6, Y+60	; 0x3c
     f9a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f9c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f9e:	9f ac       	ldd	r9, Y+63	; 0x3f
     fa0:	69 97       	sbiw	r28, 0x19	; 25
     fa2:	c4 01       	movw	r24, r8
     fa4:	aa 27       	eor	r26, r26
     fa6:	bb 27       	eor	r27, r27
     fa8:	28 0f       	add	r18, r24
     faa:	39 1f       	adc	r19, r25
     fac:	4a 1f       	adc	r20, r26
     fae:	5b 1f       	adc	r21, r27
     fb0:	2e 15       	cp	r18, r14
     fb2:	3f 05       	cpc	r19, r15
     fb4:	40 07       	cpc	r20, r16
     fb6:	51 07       	cpc	r21, r17
     fb8:	48 f4       	brcc	.+18     	; 0xfcc <__stack+0x76d>
     fba:	e1 2c       	mov	r14, r1
     fbc:	f1 2c       	mov	r15, r1
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	06 2f       	mov	r16, r22
     fc2:	11 2d       	mov	r17, r1
     fc4:	ae 0c       	add	r10, r14
     fc6:	bf 1c       	adc	r11, r15
     fc8:	c0 1e       	adc	r12, r16
     fca:	d1 1e       	adc	r13, r17
     fcc:	ca 01       	movw	r24, r20
     fce:	aa 27       	eor	r26, r26
     fd0:	bb 27       	eor	r27, r27
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	6a 0d       	add	r22, r10
     fd8:	7b 1d       	adc	r23, r11
     fda:	8c 1d       	adc	r24, r12
     fdc:	9d 1d       	adc	r25, r13
     fde:	69 8c       	ldd	r6, Y+25	; 0x19
     fe0:	7a 8c       	ldd	r7, Y+26	; 0x1a
     fe2:	8b 8c       	ldd	r8, Y+27	; 0x1b
     fe4:	9c 8c       	ldd	r9, Y+28	; 0x1c
     fe6:	66 16       	cp	r6, r22
     fe8:	77 06       	cpc	r7, r23
     fea:	88 06       	cpc	r8, r24
     fec:	99 06       	cpc	r9, r25
     fee:	40 f1       	brcs	.+80     	; 0x1040 <__stack+0x7e1>
     ff0:	66 15       	cp	r22, r6
     ff2:	77 05       	cpc	r23, r7
     ff4:	88 05       	cpc	r24, r8
     ff6:	99 05       	cpc	r25, r9
     ff8:	09 f0       	breq	.+2      	; 0xffc <__stack+0x79d>
     ffa:	43 c0       	rjmp	.+134    	; 0x1082 <__stack+0x823>
     ffc:	d9 01       	movw	r26, r18
     ffe:	99 27       	eor	r25, r25
    1000:	88 27       	eor	r24, r24
    1002:	69 96       	adiw	r28, 0x19	; 25
    1004:	2c ad       	ldd	r18, Y+60	; 0x3c
    1006:	3d ad       	ldd	r19, Y+61	; 0x3d
    1008:	4e ad       	ldd	r20, Y+62	; 0x3e
    100a:	5f ad       	ldd	r21, Y+63	; 0x3f
    100c:	69 97       	sbiw	r28, 0x19	; 25
    100e:	40 70       	andi	r20, 0x00	; 0
    1010:	50 70       	andi	r21, 0x00	; 0
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	a4 1f       	adc	r26, r20
    1018:	b5 1f       	adc	r27, r21
    101a:	2d a5       	ldd	r18, Y+45	; 0x2d
    101c:	3e a5       	ldd	r19, Y+46	; 0x2e
    101e:	4f a5       	ldd	r20, Y+47	; 0x2f
    1020:	58 a9       	ldd	r21, Y+48	; 0x30
    1022:	6e 96       	adiw	r28, 0x1e	; 30
    1024:	0f ac       	ldd	r0, Y+63	; 0x3f
    1026:	6e 97       	sbiw	r28, 0x1e	; 30
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <__stack+0x7d3>
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	44 1f       	adc	r20, r20
    1030:	55 1f       	adc	r21, r21
    1032:	0a 94       	dec	r0
    1034:	d2 f7       	brpl	.-12     	; 0x102a <__stack+0x7cb>
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	4a 07       	cpc	r20, r26
    103c:	5b 07       	cpc	r21, r27
    103e:	08 f5       	brcc	.+66     	; 0x1082 <__stack+0x823>
    1040:	09 a9       	ldd	r16, Y+49	; 0x31
    1042:	1a a9       	ldd	r17, Y+50	; 0x32
    1044:	2b a9       	ldd	r18, Y+51	; 0x33
    1046:	3c a9       	ldd	r19, Y+52	; 0x34
    1048:	01 50       	subi	r16, 0x01	; 1
    104a:	10 40       	sbci	r17, 0x00	; 0
    104c:	20 40       	sbci	r18, 0x00	; 0
    104e:	30 40       	sbci	r19, 0x00	; 0
    1050:	09 ab       	std	Y+49, r16	; 0x31
    1052:	1a ab       	std	Y+50, r17	; 0x32
    1054:	2b ab       	std	Y+51, r18	; 0x33
    1056:	3c ab       	std	Y+52, r19	; 0x34
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <__stack+0x823>
    105a:	66 24       	eor	r6, r6
    105c:	77 24       	eor	r7, r7
    105e:	43 01       	movw	r8, r6
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	29 ab       	std	Y+49, r18	; 0x31
    106a:	3a ab       	std	Y+50, r19	; 0x32
    106c:	4b ab       	std	Y+51, r20	; 0x33
    106e:	5c ab       	std	Y+52, r21	; 0x34
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <__stack+0x829>
    1072:	66 24       	eor	r6, r6
    1074:	77 24       	eor	r7, r7
    1076:	43 01       	movw	r8, r6
    1078:	19 aa       	std	Y+49, r1	; 0x31
    107a:	1a aa       	std	Y+50, r1	; 0x32
    107c:	1b aa       	std	Y+51, r1	; 0x33
    107e:	1c aa       	std	Y+52, r1	; 0x34
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <__stack+0x829>
    1082:	66 24       	eor	r6, r6
    1084:	77 24       	eor	r7, r7
    1086:	43 01       	movw	r8, r6
    1088:	fe 01       	movw	r30, r28
    108a:	71 96       	adiw	r30, 0x11	; 17
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	df 01       	movw	r26, r30
    1090:	1d 92       	st	X+, r1
    1092:	8a 95       	dec	r24
    1094:	e9 f7       	brne	.-6      	; 0x1090 <__stack+0x831>
    1096:	a9 a8       	ldd	r10, Y+49	; 0x31
    1098:	ba a8       	ldd	r11, Y+50	; 0x32
    109a:	cb a8       	ldd	r12, Y+51	; 0x33
    109c:	dc a8       	ldd	r13, Y+52	; 0x34
    109e:	a9 8a       	std	Y+17, r10	; 0x11
    10a0:	ba 8a       	std	Y+18, r11	; 0x12
    10a2:	cb 8a       	std	Y+19, r12	; 0x13
    10a4:	dc 8a       	std	Y+20, r13	; 0x14
    10a6:	6d 8a       	std	Y+21, r6	; 0x15
    10a8:	7e 8a       	std	Y+22, r7	; 0x16
    10aa:	8f 8a       	std	Y+23, r8	; 0x17
    10ac:	98 8e       	std	Y+24, r9	; 0x18
    10ae:	29 a9       	ldd	r18, Y+49	; 0x31
    10b0:	3a 89       	ldd	r19, Y+18	; 0x12
    10b2:	4b 89       	ldd	r20, Y+19	; 0x13
    10b4:	5c 89       	ldd	r21, Y+20	; 0x14
    10b6:	66 2d       	mov	r22, r6
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	c2 5a       	subi	r28, 0xA2	; 162
    10c0:	df 4f       	sbci	r29, 0xFF	; 255
    10c2:	e2 e1       	ldi	r30, 0x12	; 18
    10c4:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <__epilogue_restores__>

000010c8 <_fpadd_parts>:
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	ea e6       	ldi	r30, 0x6A	; 106
    10ce:	f8 e0       	ldi	r31, 0x08	; 8
    10d0:	0c 94 a6 3e 	jmp	0x7d4c	; 0x7d4c <__prologue_saves__>
    10d4:	dc 01       	movw	r26, r24
    10d6:	2b 01       	movw	r4, r22
    10d8:	fa 01       	movw	r30, r20
    10da:	9c 91       	ld	r25, X
    10dc:	92 30       	cpi	r25, 0x02	; 2
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <_fpadd_parts+0x1a>
    10e0:	39 c1       	rjmp	.+626    	; 0x1354 <_fpadd_parts+0x28c>
    10e2:	eb 01       	movw	r28, r22
    10e4:	88 81       	ld	r24, Y
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <_fpadd_parts+0x24>
    10ea:	33 c1       	rjmp	.+614    	; 0x1352 <_fpadd_parts+0x28a>
    10ec:	94 30       	cpi	r25, 0x04	; 4
    10ee:	69 f4       	brne	.+26     	; 0x110a <_fpadd_parts+0x42>
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <_fpadd_parts+0x2e>
    10f4:	2f c1       	rjmp	.+606    	; 0x1354 <_fpadd_parts+0x28c>
    10f6:	11 96       	adiw	r26, 0x01	; 1
    10f8:	9c 91       	ld	r25, X
    10fa:	11 97       	sbiw	r26, 0x01	; 1
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	98 17       	cp	r25, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <_fpadd_parts+0x3c>
    1102:	28 c1       	rjmp	.+592    	; 0x1354 <_fpadd_parts+0x28c>
    1104:	a5 e7       	ldi	r26, 0x75	; 117
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	25 c1       	rjmp	.+586    	; 0x1354 <_fpadd_parts+0x28c>
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	09 f4       	brne	.+2      	; 0x1110 <_fpadd_parts+0x48>
    110e:	21 c1       	rjmp	.+578    	; 0x1352 <_fpadd_parts+0x28a>
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	a9 f4       	brne	.+42     	; 0x113e <_fpadd_parts+0x76>
    1114:	92 30       	cpi	r25, 0x02	; 2
    1116:	09 f0       	breq	.+2      	; 0x111a <_fpadd_parts+0x52>
    1118:	1d c1       	rjmp	.+570    	; 0x1354 <_fpadd_parts+0x28c>
    111a:	9a 01       	movw	r18, r20
    111c:	ad 01       	movw	r20, r26
    111e:	88 e0       	ldi	r24, 0x08	; 8
    1120:	ea 01       	movw	r28, r20
    1122:	09 90       	ld	r0, Y+
    1124:	ae 01       	movw	r20, r28
    1126:	e9 01       	movw	r28, r18
    1128:	09 92       	st	Y+, r0
    112a:	9e 01       	movw	r18, r28
    112c:	81 50       	subi	r24, 0x01	; 1
    112e:	c1 f7       	brne	.-16     	; 0x1120 <_fpadd_parts+0x58>
    1130:	e2 01       	movw	r28, r4
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	9c 91       	ld	r25, X
    1138:	89 23       	and	r24, r25
    113a:	81 83       	std	Z+1, r24	; 0x01
    113c:	08 c1       	rjmp	.+528    	; 0x134e <_fpadd_parts+0x286>
    113e:	92 30       	cpi	r25, 0x02	; 2
    1140:	09 f4       	brne	.+2      	; 0x1144 <_fpadd_parts+0x7c>
    1142:	07 c1       	rjmp	.+526    	; 0x1352 <_fpadd_parts+0x28a>
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	2d 90       	ld	r2, X+
    1148:	3c 90       	ld	r3, X
    114a:	13 97       	sbiw	r26, 0x03	; 3
    114c:	eb 01       	movw	r28, r22
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	14 96       	adiw	r26, 0x04	; 4
    1154:	ad 90       	ld	r10, X+
    1156:	bd 90       	ld	r11, X+
    1158:	cd 90       	ld	r12, X+
    115a:	dc 90       	ld	r13, X
    115c:	17 97       	sbiw	r26, 0x07	; 7
    115e:	ec 80       	ldd	r14, Y+4	; 0x04
    1160:	fd 80       	ldd	r15, Y+5	; 0x05
    1162:	0e 81       	ldd	r16, Y+6	; 0x06
    1164:	1f 81       	ldd	r17, Y+7	; 0x07
    1166:	91 01       	movw	r18, r2
    1168:	28 1b       	sub	r18, r24
    116a:	39 0b       	sbc	r19, r25
    116c:	b9 01       	movw	r22, r18
    116e:	37 ff       	sbrs	r19, 7
    1170:	04 c0       	rjmp	.+8      	; 0x117a <_fpadd_parts+0xb2>
    1172:	66 27       	eor	r22, r22
    1174:	77 27       	eor	r23, r23
    1176:	62 1b       	sub	r22, r18
    1178:	73 0b       	sbc	r23, r19
    117a:	60 32       	cpi	r22, 0x20	; 32
    117c:	71 05       	cpc	r23, r1
    117e:	0c f0       	brlt	.+2      	; 0x1182 <_fpadd_parts+0xba>
    1180:	61 c0       	rjmp	.+194    	; 0x1244 <_fpadd_parts+0x17c>
    1182:	12 16       	cp	r1, r18
    1184:	13 06       	cpc	r1, r19
    1186:	6c f5       	brge	.+90     	; 0x11e2 <_fpadd_parts+0x11a>
    1188:	37 01       	movw	r6, r14
    118a:	48 01       	movw	r8, r16
    118c:	06 2e       	mov	r0, r22
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <_fpadd_parts+0xd0>
    1190:	96 94       	lsr	r9
    1192:	87 94       	ror	r8
    1194:	77 94       	ror	r7
    1196:	67 94       	ror	r6
    1198:	0a 94       	dec	r0
    119a:	d2 f7       	brpl	.-12     	; 0x1190 <_fpadd_parts+0xc8>
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <_fpadd_parts+0xe6>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	6a 95       	dec	r22
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <_fpadd_parts+0xde>
    11b2:	21 50       	subi	r18, 0x01	; 1
    11b4:	30 40       	sbci	r19, 0x00	; 0
    11b6:	40 40       	sbci	r20, 0x00	; 0
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	2e 21       	and	r18, r14
    11bc:	3f 21       	and	r19, r15
    11be:	40 23       	and	r20, r16
    11c0:	51 23       	and	r21, r17
    11c2:	21 15       	cp	r18, r1
    11c4:	31 05       	cpc	r19, r1
    11c6:	41 05       	cpc	r20, r1
    11c8:	51 05       	cpc	r21, r1
    11ca:	21 f0       	breq	.+8      	; 0x11d4 <_fpadd_parts+0x10c>
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	79 01       	movw	r14, r18
    11d6:	8a 01       	movw	r16, r20
    11d8:	e6 28       	or	r14, r6
    11da:	f7 28       	or	r15, r7
    11dc:	08 29       	or	r16, r8
    11de:	19 29       	or	r17, r9
    11e0:	3c c0       	rjmp	.+120    	; 0x125a <_fpadd_parts+0x192>
    11e2:	23 2b       	or	r18, r19
    11e4:	d1 f1       	breq	.+116    	; 0x125a <_fpadd_parts+0x192>
    11e6:	26 0e       	add	r2, r22
    11e8:	37 1e       	adc	r3, r23
    11ea:	35 01       	movw	r6, r10
    11ec:	46 01       	movw	r8, r12
    11ee:	06 2e       	mov	r0, r22
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <_fpadd_parts+0x132>
    11f2:	96 94       	lsr	r9
    11f4:	87 94       	ror	r8
    11f6:	77 94       	ror	r7
    11f8:	67 94       	ror	r6
    11fa:	0a 94       	dec	r0
    11fc:	d2 f7       	brpl	.-12     	; 0x11f2 <_fpadd_parts+0x12a>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <_fpadd_parts+0x148>
    1208:	22 0f       	add	r18, r18
    120a:	33 1f       	adc	r19, r19
    120c:	44 1f       	adc	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	6a 95       	dec	r22
    1212:	d2 f7       	brpl	.-12     	; 0x1208 <_fpadd_parts+0x140>
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	30 40       	sbci	r19, 0x00	; 0
    1218:	40 40       	sbci	r20, 0x00	; 0
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	2a 21       	and	r18, r10
    121e:	3b 21       	and	r19, r11
    1220:	4c 21       	and	r20, r12
    1222:	5d 21       	and	r21, r13
    1224:	21 15       	cp	r18, r1
    1226:	31 05       	cpc	r19, r1
    1228:	41 05       	cpc	r20, r1
    122a:	51 05       	cpc	r21, r1
    122c:	21 f0       	breq	.+8      	; 0x1236 <_fpadd_parts+0x16e>
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	59 01       	movw	r10, r18
    1238:	6a 01       	movw	r12, r20
    123a:	a6 28       	or	r10, r6
    123c:	b7 28       	or	r11, r7
    123e:	c8 28       	or	r12, r8
    1240:	d9 28       	or	r13, r9
    1242:	0b c0       	rjmp	.+22     	; 0x125a <_fpadd_parts+0x192>
    1244:	82 15       	cp	r24, r2
    1246:	93 05       	cpc	r25, r3
    1248:	2c f0       	brlt	.+10     	; 0x1254 <_fpadd_parts+0x18c>
    124a:	1c 01       	movw	r2, r24
    124c:	aa 24       	eor	r10, r10
    124e:	bb 24       	eor	r11, r11
    1250:	65 01       	movw	r12, r10
    1252:	03 c0       	rjmp	.+6      	; 0x125a <_fpadd_parts+0x192>
    1254:	ee 24       	eor	r14, r14
    1256:	ff 24       	eor	r15, r15
    1258:	87 01       	movw	r16, r14
    125a:	11 96       	adiw	r26, 0x01	; 1
    125c:	9c 91       	ld	r25, X
    125e:	d2 01       	movw	r26, r4
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	8c 91       	ld	r24, X
    1264:	98 17       	cp	r25, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <_fpadd_parts+0x1a2>
    1268:	45 c0       	rjmp	.+138    	; 0x12f4 <_fpadd_parts+0x22c>
    126a:	99 23       	and	r25, r25
    126c:	39 f0       	breq	.+14     	; 0x127c <_fpadd_parts+0x1b4>
    126e:	a8 01       	movw	r20, r16
    1270:	97 01       	movw	r18, r14
    1272:	2a 19       	sub	r18, r10
    1274:	3b 09       	sbc	r19, r11
    1276:	4c 09       	sbc	r20, r12
    1278:	5d 09       	sbc	r21, r13
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <_fpadd_parts+0x1c0>
    127c:	a6 01       	movw	r20, r12
    127e:	95 01       	movw	r18, r10
    1280:	2e 19       	sub	r18, r14
    1282:	3f 09       	sbc	r19, r15
    1284:	40 0b       	sbc	r20, r16
    1286:	51 0b       	sbc	r21, r17
    1288:	57 fd       	sbrc	r21, 7
    128a:	08 c0       	rjmp	.+16     	; 0x129c <_fpadd_parts+0x1d4>
    128c:	11 82       	std	Z+1, r1	; 0x01
    128e:	33 82       	std	Z+3, r3	; 0x03
    1290:	22 82       	std	Z+2, r2	; 0x02
    1292:	24 83       	std	Z+4, r18	; 0x04
    1294:	35 83       	std	Z+5, r19	; 0x05
    1296:	46 83       	std	Z+6, r20	; 0x06
    1298:	57 83       	std	Z+7, r21	; 0x07
    129a:	1d c0       	rjmp	.+58     	; 0x12d6 <_fpadd_parts+0x20e>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	81 83       	std	Z+1, r24	; 0x01
    12a0:	33 82       	std	Z+3, r3	; 0x03
    12a2:	22 82       	std	Z+2, r2	; 0x02
    12a4:	88 27       	eor	r24, r24
    12a6:	99 27       	eor	r25, r25
    12a8:	dc 01       	movw	r26, r24
    12aa:	82 1b       	sub	r24, r18
    12ac:	93 0b       	sbc	r25, r19
    12ae:	a4 0b       	sbc	r26, r20
    12b0:	b5 0b       	sbc	r27, r21
    12b2:	84 83       	std	Z+4, r24	; 0x04
    12b4:	95 83       	std	Z+5, r25	; 0x05
    12b6:	a6 83       	std	Z+6, r26	; 0x06
    12b8:	b7 83       	std	Z+7, r27	; 0x07
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <_fpadd_parts+0x20e>
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	44 1f       	adc	r20, r20
    12c2:	55 1f       	adc	r21, r21
    12c4:	24 83       	std	Z+4, r18	; 0x04
    12c6:	35 83       	std	Z+5, r19	; 0x05
    12c8:	46 83       	std	Z+6, r20	; 0x06
    12ca:	57 83       	std	Z+7, r21	; 0x07
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	93 81       	ldd	r25, Z+3	; 0x03
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	93 83       	std	Z+3, r25	; 0x03
    12d4:	82 83       	std	Z+2, r24	; 0x02
    12d6:	24 81       	ldd	r18, Z+4	; 0x04
    12d8:	35 81       	ldd	r19, Z+5	; 0x05
    12da:	46 81       	ldd	r20, Z+6	; 0x06
    12dc:	57 81       	ldd	r21, Z+7	; 0x07
    12de:	da 01       	movw	r26, r20
    12e0:	c9 01       	movw	r24, r18
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	a1 09       	sbc	r26, r1
    12e6:	b1 09       	sbc	r27, r1
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	af 4f       	sbci	r26, 0xFF	; 255
    12ee:	bf 43       	sbci	r27, 0x3F	; 63
    12f0:	28 f3       	brcs	.-54     	; 0x12bc <_fpadd_parts+0x1f4>
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <_fpadd_parts+0x242>
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	33 82       	std	Z+3, r3	; 0x03
    12f8:	22 82       	std	Z+2, r2	; 0x02
    12fa:	ea 0c       	add	r14, r10
    12fc:	fb 1c       	adc	r15, r11
    12fe:	0c 1d       	adc	r16, r12
    1300:	1d 1d       	adc	r17, r13
    1302:	e4 82       	std	Z+4, r14	; 0x04
    1304:	f5 82       	std	Z+5, r15	; 0x05
    1306:	06 83       	std	Z+6, r16	; 0x06
    1308:	17 83       	std	Z+7, r17	; 0x07
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	80 83       	st	Z, r24
    130e:	24 81       	ldd	r18, Z+4	; 0x04
    1310:	35 81       	ldd	r19, Z+5	; 0x05
    1312:	46 81       	ldd	r20, Z+6	; 0x06
    1314:	57 81       	ldd	r21, Z+7	; 0x07
    1316:	57 ff       	sbrs	r21, 7
    1318:	1a c0       	rjmp	.+52     	; 0x134e <_fpadd_parts+0x286>
    131a:	c9 01       	movw	r24, r18
    131c:	aa 27       	eor	r26, r26
    131e:	97 fd       	sbrc	r25, 7
    1320:	a0 95       	com	r26
    1322:	ba 2f       	mov	r27, r26
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	a0 70       	andi	r26, 0x00	; 0
    132a:	b0 70       	andi	r27, 0x00	; 0
    132c:	56 95       	lsr	r21
    132e:	47 95       	ror	r20
    1330:	37 95       	ror	r19
    1332:	27 95       	ror	r18
    1334:	82 2b       	or	r24, r18
    1336:	93 2b       	or	r25, r19
    1338:	a4 2b       	or	r26, r20
    133a:	b5 2b       	or	r27, r21
    133c:	84 83       	std	Z+4, r24	; 0x04
    133e:	95 83       	std	Z+5, r25	; 0x05
    1340:	a6 83       	std	Z+6, r26	; 0x06
    1342:	b7 83       	std	Z+7, r27	; 0x07
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	93 83       	std	Z+3, r25	; 0x03
    134c:	82 83       	std	Z+2, r24	; 0x02
    134e:	df 01       	movw	r26, r30
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <_fpadd_parts+0x28c>
    1352:	d2 01       	movw	r26, r4
    1354:	cd 01       	movw	r24, r26
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	e2 e1       	ldi	r30, 0x12	; 18
    135c:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <__epilogue_restores__>

00001360 <__subsf3>:
    1360:	a0 e2       	ldi	r26, 0x20	; 32
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e6 eb       	ldi	r30, 0xB6	; 182
    1366:	f9 e0       	ldi	r31, 0x09	; 9
    1368:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <__prologue_saves__+0x18>
    136c:	69 83       	std	Y+1, r22	; 0x01
    136e:	7a 83       	std	Y+2, r23	; 0x02
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	2d 83       	std	Y+5, r18	; 0x05
    1376:	3e 83       	std	Y+6, r19	; 0x06
    1378:	4f 83       	std	Y+7, r20	; 0x07
    137a:	58 87       	std	Y+8, r21	; 0x08
    137c:	e9 e0       	ldi	r30, 0x09	; 9
    137e:	ee 2e       	mov	r14, r30
    1380:	f1 2c       	mov	r15, r1
    1382:	ec 0e       	add	r14, r28
    1384:	fd 1e       	adc	r15, r29
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	b7 01       	movw	r22, r14
    138c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1390:	8e 01       	movw	r16, r28
    1392:	0f 5e       	subi	r16, 0xEF	; 239
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	ce 01       	movw	r24, r28
    1398:	05 96       	adiw	r24, 0x05	; 5
    139a:	b8 01       	movw	r22, r16
    139c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    13a0:	8a 89       	ldd	r24, Y+18	; 0x12
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	89 27       	eor	r24, r25
    13a6:	8a 8b       	std	Y+18, r24	; 0x12
    13a8:	c7 01       	movw	r24, r14
    13aa:	b8 01       	movw	r22, r16
    13ac:	ae 01       	movw	r20, r28
    13ae:	47 5e       	subi	r20, 0xE7	; 231
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_fpadd_parts>
    13b6:	0e 94 98 0c 	call	0x1930	; 0x1930 <__pack_f>
    13ba:	a0 96       	adiw	r28, 0x20	; 32
    13bc:	e6 e0       	ldi	r30, 0x06	; 6
    13be:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__epilogue_restores__+0x18>

000013c2 <__addsf3>:
    13c2:	a0 e2       	ldi	r26, 0x20	; 32
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e7 ee       	ldi	r30, 0xE7	; 231
    13c8:	f9 e0       	ldi	r31, 0x09	; 9
    13ca:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <__prologue_saves__+0x18>
    13ce:	69 83       	std	Y+1, r22	; 0x01
    13d0:	7a 83       	std	Y+2, r23	; 0x02
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	2d 83       	std	Y+5, r18	; 0x05
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	4f 83       	std	Y+7, r20	; 0x07
    13dc:	58 87       	std	Y+8, r21	; 0x08
    13de:	f9 e0       	ldi	r31, 0x09	; 9
    13e0:	ef 2e       	mov	r14, r31
    13e2:	f1 2c       	mov	r15, r1
    13e4:	ec 0e       	add	r14, r28
    13e6:	fd 1e       	adc	r15, r29
    13e8:	ce 01       	movw	r24, r28
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	b7 01       	movw	r22, r14
    13ee:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    13f2:	8e 01       	movw	r16, r28
    13f4:	0f 5e       	subi	r16, 0xEF	; 239
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	ce 01       	movw	r24, r28
    13fa:	05 96       	adiw	r24, 0x05	; 5
    13fc:	b8 01       	movw	r22, r16
    13fe:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1402:	c7 01       	movw	r24, r14
    1404:	b8 01       	movw	r22, r16
    1406:	ae 01       	movw	r20, r28
    1408:	47 5e       	subi	r20, 0xE7	; 231
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_fpadd_parts>
    1410:	0e 94 98 0c 	call	0x1930	; 0x1930 <__pack_f>
    1414:	a0 96       	adiw	r28, 0x20	; 32
    1416:	e6 e0       	ldi	r30, 0x06	; 6
    1418:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__epilogue_restores__+0x18>

0000141c <__mulsf3>:
    141c:	a0 e2       	ldi	r26, 0x20	; 32
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e1       	ldi	r30, 0x14	; 20
    1422:	fa e0       	ldi	r31, 0x0A	; 10
    1424:	0c 94 a6 3e 	jmp	0x7d4c	; 0x7d4c <__prologue_saves__>
    1428:	69 83       	std	Y+1, r22	; 0x01
    142a:	7a 83       	std	Y+2, r23	; 0x02
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	2d 83       	std	Y+5, r18	; 0x05
    1432:	3e 83       	std	Y+6, r19	; 0x06
    1434:	4f 83       	std	Y+7, r20	; 0x07
    1436:	58 87       	std	Y+8, r21	; 0x08
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	be 01       	movw	r22, r28
    143e:	67 5f       	subi	r22, 0xF7	; 247
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1446:	ce 01       	movw	r24, r28
    1448:	05 96       	adiw	r24, 0x05	; 5
    144a:	be 01       	movw	r22, r28
    144c:	6f 5e       	subi	r22, 0xEF	; 239
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1454:	99 85       	ldd	r25, Y+9	; 0x09
    1456:	92 30       	cpi	r25, 0x02	; 2
    1458:	88 f0       	brcs	.+34     	; 0x147c <__mulsf3+0x60>
    145a:	89 89       	ldd	r24, Y+17	; 0x11
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	c8 f0       	brcs	.+50     	; 0x1492 <__mulsf3+0x76>
    1460:	94 30       	cpi	r25, 0x04	; 4
    1462:	19 f4       	brne	.+6      	; 0x146a <__mulsf3+0x4e>
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	51 f4       	brne	.+20     	; 0x147c <__mulsf3+0x60>
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__mulsf3+0x56>
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	29 f4       	brne	.+10     	; 0x1478 <__mulsf3+0x5c>
    146e:	92 30       	cpi	r25, 0x02	; 2
    1470:	81 f4       	brne	.+32     	; 0x1492 <__mulsf3+0x76>
    1472:	85 e7       	ldi	r24, 0x75	; 117
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	c6 c0       	rjmp	.+396    	; 0x1604 <__mulsf3+0x1e8>
    1478:	92 30       	cpi	r25, 0x02	; 2
    147a:	49 f4       	brne	.+18     	; 0x148e <__mulsf3+0x72>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	8a 89       	ldd	r24, Y+18	; 0x12
    1482:	98 13       	cpse	r25, r24
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	2a 87       	std	Y+10, r18	; 0x0a
    1488:	ce 01       	movw	r24, r28
    148a:	09 96       	adiw	r24, 0x09	; 9
    148c:	bb c0       	rjmp	.+374    	; 0x1604 <__mulsf3+0x1e8>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	49 f4       	brne	.+18     	; 0x14a4 <__mulsf3+0x88>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	9a 85       	ldd	r25, Y+10	; 0x0a
    1496:	8a 89       	ldd	r24, Y+18	; 0x12
    1498:	98 13       	cpse	r25, r24
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	2a 8b       	std	Y+18, r18	; 0x12
    149e:	ce 01       	movw	r24, r28
    14a0:	41 96       	adiw	r24, 0x11	; 17
    14a2:	b0 c0       	rjmp	.+352    	; 0x1604 <__mulsf3+0x1e8>
    14a4:	2d 84       	ldd	r2, Y+13	; 0x0d
    14a6:	3e 84       	ldd	r3, Y+14	; 0x0e
    14a8:	4f 84       	ldd	r4, Y+15	; 0x0f
    14aa:	58 88       	ldd	r5, Y+16	; 0x10
    14ac:	6d 88       	ldd	r6, Y+21	; 0x15
    14ae:	7e 88       	ldd	r7, Y+22	; 0x16
    14b0:	8f 88       	ldd	r8, Y+23	; 0x17
    14b2:	98 8c       	ldd	r9, Y+24	; 0x18
    14b4:	ee 24       	eor	r14, r14
    14b6:	ff 24       	eor	r15, r15
    14b8:	87 01       	movw	r16, r14
    14ba:	aa 24       	eor	r10, r10
    14bc:	bb 24       	eor	r11, r11
    14be:	65 01       	movw	r12, r10
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	e0 e0       	ldi	r30, 0x00	; 0
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	c1 01       	movw	r24, r2
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	89 2b       	or	r24, r25
    14d4:	e9 f0       	breq	.+58     	; 0x1510 <__mulsf3+0xf4>
    14d6:	e6 0c       	add	r14, r6
    14d8:	f7 1c       	adc	r15, r7
    14da:	08 1d       	adc	r16, r8
    14dc:	19 1d       	adc	r17, r9
    14de:	9a 01       	movw	r18, r20
    14e0:	ab 01       	movw	r20, r22
    14e2:	2a 0d       	add	r18, r10
    14e4:	3b 1d       	adc	r19, r11
    14e6:	4c 1d       	adc	r20, r12
    14e8:	5d 1d       	adc	r21, r13
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e0       	ldi	r26, 0x00	; 0
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e6 14       	cp	r14, r6
    14f4:	f7 04       	cpc	r15, r7
    14f6:	08 05       	cpc	r16, r8
    14f8:	19 05       	cpc	r17, r9
    14fa:	20 f4       	brcc	.+8      	; 0x1504 <__mulsf3+0xe8>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ba 01       	movw	r22, r20
    1506:	a9 01       	movw	r20, r18
    1508:	48 0f       	add	r20, r24
    150a:	59 1f       	adc	r21, r25
    150c:	6a 1f       	adc	r22, r26
    150e:	7b 1f       	adc	r23, r27
    1510:	aa 0c       	add	r10, r10
    1512:	bb 1c       	adc	r11, r11
    1514:	cc 1c       	adc	r12, r12
    1516:	dd 1c       	adc	r13, r13
    1518:	97 fe       	sbrs	r9, 7
    151a:	08 c0       	rjmp	.+16     	; 0x152c <__mulsf3+0x110>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	a8 2a       	or	r10, r24
    1526:	b9 2a       	or	r11, r25
    1528:	ca 2a       	or	r12, r26
    152a:	db 2a       	or	r13, r27
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	e0 32       	cpi	r30, 0x20	; 32
    1530:	f1 05       	cpc	r31, r1
    1532:	49 f0       	breq	.+18     	; 0x1546 <__mulsf3+0x12a>
    1534:	66 0c       	add	r6, r6
    1536:	77 1c       	adc	r7, r7
    1538:	88 1c       	adc	r8, r8
    153a:	99 1c       	adc	r9, r9
    153c:	56 94       	lsr	r5
    153e:	47 94       	ror	r4
    1540:	37 94       	ror	r3
    1542:	27 94       	ror	r2
    1544:	c3 cf       	rjmp	.-122    	; 0x14cc <__mulsf3+0xb0>
    1546:	fa 85       	ldd	r31, Y+10	; 0x0a
    1548:	ea 89       	ldd	r30, Y+18	; 0x12
    154a:	2b 89       	ldd	r18, Y+19	; 0x13
    154c:	3c 89       	ldd	r19, Y+20	; 0x14
    154e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1550:	9c 85       	ldd	r25, Y+12	; 0x0c
    1552:	28 0f       	add	r18, r24
    1554:	39 1f       	adc	r19, r25
    1556:	2e 5f       	subi	r18, 0xFE	; 254
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	17 c0       	rjmp	.+46     	; 0x158a <__mulsf3+0x16e>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	89 2b       	or	r24, r25
    1564:	61 f0       	breq	.+24     	; 0x157e <__mulsf3+0x162>
    1566:	16 95       	lsr	r17
    1568:	07 95       	ror	r16
    156a:	f7 94       	ror	r15
    156c:	e7 94       	ror	r14
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	b0 e8       	ldi	r27, 0x80	; 128
    1576:	e8 2a       	or	r14, r24
    1578:	f9 2a       	or	r15, r25
    157a:	0a 2b       	or	r16, r26
    157c:	1b 2b       	or	r17, r27
    157e:	76 95       	lsr	r23
    1580:	67 95       	ror	r22
    1582:	57 95       	ror	r21
    1584:	47 95       	ror	r20
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	77 fd       	sbrc	r23, 7
    158c:	e7 cf       	rjmp	.-50     	; 0x155c <__mulsf3+0x140>
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <__mulsf3+0x18c>
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	17 fd       	sbrc	r17, 7
    159a:	41 60       	ori	r20, 0x01	; 1
    159c:	ee 0c       	add	r14, r14
    159e:	ff 1c       	adc	r15, r15
    15a0:	00 1f       	adc	r16, r16
    15a2:	11 1f       	adc	r17, r17
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	30 40       	sbci	r19, 0x00	; 0
    15a8:	40 30       	cpi	r20, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	59 07       	cpc	r21, r25
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	69 07       	cpc	r22, r25
    15b2:	90 e4       	ldi	r25, 0x40	; 64
    15b4:	79 07       	cpc	r23, r25
    15b6:	60 f3       	brcs	.-40     	; 0x1590 <__mulsf3+0x174>
    15b8:	2b 8f       	std	Y+27, r18	; 0x1b
    15ba:	3c 8f       	std	Y+28, r19	; 0x1c
    15bc:	db 01       	movw	r26, r22
    15be:	ca 01       	movw	r24, r20
    15c0:	8f 77       	andi	r24, 0x7F	; 127
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	a0 70       	andi	r26, 0x00	; 0
    15c6:	b0 70       	andi	r27, 0x00	; 0
    15c8:	80 34       	cpi	r24, 0x40	; 64
    15ca:	91 05       	cpc	r25, r1
    15cc:	a1 05       	cpc	r26, r1
    15ce:	b1 05       	cpc	r27, r1
    15d0:	61 f4       	brne	.+24     	; 0x15ea <__mulsf3+0x1ce>
    15d2:	47 fd       	sbrc	r20, 7
    15d4:	0a c0       	rjmp	.+20     	; 0x15ea <__mulsf3+0x1ce>
    15d6:	e1 14       	cp	r14, r1
    15d8:	f1 04       	cpc	r15, r1
    15da:	01 05       	cpc	r16, r1
    15dc:	11 05       	cpc	r17, r1
    15de:	29 f0       	breq	.+10     	; 0x15ea <__mulsf3+0x1ce>
    15e0:	40 5c       	subi	r20, 0xC0	; 192
    15e2:	5f 4f       	sbci	r21, 0xFF	; 255
    15e4:	6f 4f       	sbci	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	40 78       	andi	r20, 0x80	; 128
    15ea:	1a 8e       	std	Y+26, r1	; 0x1a
    15ec:	fe 17       	cp	r31, r30
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <__mulsf3+0x1d8>
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	8a 8f       	std	Y+26, r24	; 0x1a
    15f4:	4d 8f       	std	Y+29, r20	; 0x1d
    15f6:	5e 8f       	std	Y+30, r21	; 0x1e
    15f8:	6f 8f       	std	Y+31, r22	; 0x1f
    15fa:	78 a3       	std	Y+32, r23	; 0x20
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	89 8f       	std	Y+25, r24	; 0x19
    1600:	ce 01       	movw	r24, r28
    1602:	49 96       	adiw	r24, 0x19	; 25
    1604:	0e 94 98 0c 	call	0x1930	; 0x1930 <__pack_f>
    1608:	a0 96       	adiw	r28, 0x20	; 32
    160a:	e2 e1       	ldi	r30, 0x12	; 18
    160c:	0c 94 c2 3e 	jmp	0x7d84	; 0x7d84 <__epilogue_restores__>

00001610 <__divsf3>:
    1610:	a8 e1       	ldi	r26, 0x18	; 24
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 ae 3e 	jmp	0x7d5c	; 0x7d5c <__prologue_saves__+0x10>
    161c:	69 83       	std	Y+1, r22	; 0x01
    161e:	7a 83       	std	Y+2, r23	; 0x02
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	2d 83       	std	Y+5, r18	; 0x05
    1626:	3e 83       	std	Y+6, r19	; 0x06
    1628:	4f 83       	std	Y+7, r20	; 0x07
    162a:	58 87       	std	Y+8, r21	; 0x08
    162c:	b9 e0       	ldi	r27, 0x09	; 9
    162e:	eb 2e       	mov	r14, r27
    1630:	f1 2c       	mov	r15, r1
    1632:	ec 0e       	add	r14, r28
    1634:	fd 1e       	adc	r15, r29
    1636:	ce 01       	movw	r24, r28
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	b7 01       	movw	r22, r14
    163c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1640:	8e 01       	movw	r16, r28
    1642:	0f 5e       	subi	r16, 0xEF	; 239
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	ce 01       	movw	r24, r28
    1648:	05 96       	adiw	r24, 0x05	; 5
    164a:	b8 01       	movw	r22, r16
    164c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1650:	29 85       	ldd	r18, Y+9	; 0x09
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	08 f4       	brcc	.+2      	; 0x1658 <__divsf3+0x48>
    1656:	7e c0       	rjmp	.+252    	; 0x1754 <__divsf3+0x144>
    1658:	39 89       	ldd	r19, Y+17	; 0x11
    165a:	32 30       	cpi	r19, 0x02	; 2
    165c:	10 f4       	brcc	.+4      	; 0x1662 <__divsf3+0x52>
    165e:	b8 01       	movw	r22, r16
    1660:	7c c0       	rjmp	.+248    	; 0x175a <__divsf3+0x14a>
    1662:	8a 85       	ldd	r24, Y+10	; 0x0a
    1664:	9a 89       	ldd	r25, Y+18	; 0x12
    1666:	89 27       	eor	r24, r25
    1668:	8a 87       	std	Y+10, r24	; 0x0a
    166a:	24 30       	cpi	r18, 0x04	; 4
    166c:	11 f0       	breq	.+4      	; 0x1672 <__divsf3+0x62>
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 f4       	brne	.+12     	; 0x167e <__divsf3+0x6e>
    1672:	23 17       	cp	r18, r19
    1674:	09 f0       	breq	.+2      	; 0x1678 <__divsf3+0x68>
    1676:	6e c0       	rjmp	.+220    	; 0x1754 <__divsf3+0x144>
    1678:	65 e7       	ldi	r22, 0x75	; 117
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	6e c0       	rjmp	.+220    	; 0x175a <__divsf3+0x14a>
    167e:	34 30       	cpi	r19, 0x04	; 4
    1680:	39 f4       	brne	.+14     	; 0x1690 <__divsf3+0x80>
    1682:	1d 86       	std	Y+13, r1	; 0x0d
    1684:	1e 86       	std	Y+14, r1	; 0x0e
    1686:	1f 86       	std	Y+15, r1	; 0x0f
    1688:	18 8a       	std	Y+16, r1	; 0x10
    168a:	1c 86       	std	Y+12, r1	; 0x0c
    168c:	1b 86       	std	Y+11, r1	; 0x0b
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <__divsf3+0x88>
    1690:	32 30       	cpi	r19, 0x02	; 2
    1692:	21 f4       	brne	.+8      	; 0x169c <__divsf3+0x8c>
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	89 87       	std	Y+9, r24	; 0x09
    1698:	b7 01       	movw	r22, r14
    169a:	5f c0       	rjmp	.+190    	; 0x175a <__divsf3+0x14a>
    169c:	2b 85       	ldd	r18, Y+11	; 0x0b
    169e:	3c 85       	ldd	r19, Y+12	; 0x0c
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	3c 87       	std	Y+12, r19	; 0x0c
    16aa:	2b 87       	std	Y+11, r18	; 0x0b
    16ac:	ed 84       	ldd	r14, Y+13	; 0x0d
    16ae:	fe 84       	ldd	r15, Y+14	; 0x0e
    16b0:	0f 85       	ldd	r16, Y+15	; 0x0f
    16b2:	18 89       	ldd	r17, Y+16	; 0x10
    16b4:	ad 88       	ldd	r10, Y+21	; 0x15
    16b6:	be 88       	ldd	r11, Y+22	; 0x16
    16b8:	cf 88       	ldd	r12, Y+23	; 0x17
    16ba:	d8 8c       	ldd	r13, Y+24	; 0x18
    16bc:	ea 14       	cp	r14, r10
    16be:	fb 04       	cpc	r15, r11
    16c0:	0c 05       	cpc	r16, r12
    16c2:	1d 05       	cpc	r17, r13
    16c4:	40 f4       	brcc	.+16     	; 0x16d6 <__divsf3+0xc6>
    16c6:	ee 0c       	add	r14, r14
    16c8:	ff 1c       	adc	r15, r15
    16ca:	00 1f       	adc	r16, r16
    16cc:	11 1f       	adc	r17, r17
    16ce:	21 50       	subi	r18, 0x01	; 1
    16d0:	30 40       	sbci	r19, 0x00	; 0
    16d2:	3c 87       	std	Y+12, r19	; 0x0c
    16d4:	2b 87       	std	Y+11, r18	; 0x0b
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e4       	ldi	r27, 0x40	; 64
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	ea 14       	cp	r14, r10
    16ec:	fb 04       	cpc	r15, r11
    16ee:	0c 05       	cpc	r16, r12
    16f0:	1d 05       	cpc	r17, r13
    16f2:	40 f0       	brcs	.+16     	; 0x1704 <__divsf3+0xf4>
    16f4:	28 2b       	or	r18, r24
    16f6:	39 2b       	or	r19, r25
    16f8:	4a 2b       	or	r20, r26
    16fa:	5b 2b       	or	r21, r27
    16fc:	ea 18       	sub	r14, r10
    16fe:	fb 08       	sbc	r15, r11
    1700:	0c 09       	sbc	r16, r12
    1702:	1d 09       	sbc	r17, r13
    1704:	b6 95       	lsr	r27
    1706:	a7 95       	ror	r26
    1708:	97 95       	ror	r25
    170a:	87 95       	ror	r24
    170c:	ee 0c       	add	r14, r14
    170e:	ff 1c       	adc	r15, r15
    1710:	00 1f       	adc	r16, r16
    1712:	11 1f       	adc	r17, r17
    1714:	6f 5f       	subi	r22, 0xFF	; 255
    1716:	7f 4f       	sbci	r23, 0xFF	; 255
    1718:	6f 31       	cpi	r22, 0x1F	; 31
    171a:	71 05       	cpc	r23, r1
    171c:	31 f7       	brne	.-52     	; 0x16ea <__divsf3+0xda>
    171e:	da 01       	movw	r26, r20
    1720:	c9 01       	movw	r24, r18
    1722:	8f 77       	andi	r24, 0x7F	; 127
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	a0 70       	andi	r26, 0x00	; 0
    1728:	b0 70       	andi	r27, 0x00	; 0
    172a:	80 34       	cpi	r24, 0x40	; 64
    172c:	91 05       	cpc	r25, r1
    172e:	a1 05       	cpc	r26, r1
    1730:	b1 05       	cpc	r27, r1
    1732:	61 f4       	brne	.+24     	; 0x174c <__divsf3+0x13c>
    1734:	27 fd       	sbrc	r18, 7
    1736:	0a c0       	rjmp	.+20     	; 0x174c <__divsf3+0x13c>
    1738:	e1 14       	cp	r14, r1
    173a:	f1 04       	cpc	r15, r1
    173c:	01 05       	cpc	r16, r1
    173e:	11 05       	cpc	r17, r1
    1740:	29 f0       	breq	.+10     	; 0x174c <__divsf3+0x13c>
    1742:	20 5c       	subi	r18, 0xC0	; 192
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	4f 4f       	sbci	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
    174a:	20 78       	andi	r18, 0x80	; 128
    174c:	2d 87       	std	Y+13, r18	; 0x0d
    174e:	3e 87       	std	Y+14, r19	; 0x0e
    1750:	4f 87       	std	Y+15, r20	; 0x0f
    1752:	58 8b       	std	Y+16, r21	; 0x10
    1754:	be 01       	movw	r22, r28
    1756:	67 5f       	subi	r22, 0xF7	; 247
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	cb 01       	movw	r24, r22
    175c:	0e 94 98 0c 	call	0x1930	; 0x1930 <__pack_f>
    1760:	68 96       	adiw	r28, 0x18	; 24
    1762:	ea e0       	ldi	r30, 0x0A	; 10
    1764:	0c 94 ca 3e 	jmp	0x7d94	; 0x7d94 <__epilogue_restores__+0x10>

00001768 <__gtsf2>:
    1768:	a8 e1       	ldi	r26, 0x18	; 24
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ea eb       	ldi	r30, 0xBA	; 186
    176e:	fb e0       	ldi	r31, 0x0B	; 11
    1770:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <__prologue_saves__+0x18>
    1774:	69 83       	std	Y+1, r22	; 0x01
    1776:	7a 83       	std	Y+2, r23	; 0x02
    1778:	8b 83       	std	Y+3, r24	; 0x03
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	2d 83       	std	Y+5, r18	; 0x05
    177e:	3e 83       	std	Y+6, r19	; 0x06
    1780:	4f 83       	std	Y+7, r20	; 0x07
    1782:	58 87       	std	Y+8, r21	; 0x08
    1784:	89 e0       	ldi	r24, 0x09	; 9
    1786:	e8 2e       	mov	r14, r24
    1788:	f1 2c       	mov	r15, r1
    178a:	ec 0e       	add	r14, r28
    178c:	fd 1e       	adc	r15, r29
    178e:	ce 01       	movw	r24, r28
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	b7 01       	movw	r22, r14
    1794:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1798:	8e 01       	movw	r16, r28
    179a:	0f 5e       	subi	r16, 0xEF	; 239
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	ce 01       	movw	r24, r28
    17a0:	05 96       	adiw	r24, 0x05	; 5
    17a2:	b8 01       	movw	r22, r16
    17a4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	82 30       	cpi	r24, 0x02	; 2
    17ac:	40 f0       	brcs	.+16     	; 0x17be <__gtsf2+0x56>
    17ae:	89 89       	ldd	r24, Y+17	; 0x11
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	28 f0       	brcs	.+10     	; 0x17be <__gtsf2+0x56>
    17b4:	c7 01       	movw	r24, r14
    17b6:	b8 01       	movw	r22, r16
    17b8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__fpcmp_parts_f>
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <__gtsf2+0x58>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	68 96       	adiw	r28, 0x18	; 24
    17c2:	e6 e0       	ldi	r30, 0x06	; 6
    17c4:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__epilogue_restores__+0x18>

000017c8 <__gesf2>:
    17c8:	a8 e1       	ldi	r26, 0x18	; 24
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea ee       	ldi	r30, 0xEA	; 234
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <__prologue_saves__+0x18>
    17d4:	69 83       	std	Y+1, r22	; 0x01
    17d6:	7a 83       	std	Y+2, r23	; 0x02
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	2d 83       	std	Y+5, r18	; 0x05
    17de:	3e 83       	std	Y+6, r19	; 0x06
    17e0:	4f 83       	std	Y+7, r20	; 0x07
    17e2:	58 87       	std	Y+8, r21	; 0x08
    17e4:	89 e0       	ldi	r24, 0x09	; 9
    17e6:	e8 2e       	mov	r14, r24
    17e8:	f1 2c       	mov	r15, r1
    17ea:	ec 0e       	add	r14, r28
    17ec:	fd 1e       	adc	r15, r29
    17ee:	ce 01       	movw	r24, r28
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	b7 01       	movw	r22, r14
    17f4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    17f8:	8e 01       	movw	r16, r28
    17fa:	0f 5e       	subi	r16, 0xEF	; 239
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	ce 01       	movw	r24, r28
    1800:	05 96       	adiw	r24, 0x05	; 5
    1802:	b8 01       	movw	r22, r16
    1804:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	40 f0       	brcs	.+16     	; 0x181e <__gesf2+0x56>
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	28 f0       	brcs	.+10     	; 0x181e <__gesf2+0x56>
    1814:	c7 01       	movw	r24, r14
    1816:	b8 01       	movw	r22, r16
    1818:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__fpcmp_parts_f>
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <__gesf2+0x58>
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	68 96       	adiw	r28, 0x18	; 24
    1822:	e6 e0       	ldi	r30, 0x06	; 6
    1824:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__epilogue_restores__+0x18>

00001828 <__ltsf2>:
    1828:	a8 e1       	ldi	r26, 0x18	; 24
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ea e1       	ldi	r30, 0x1A	; 26
    182e:	fc e0       	ldi	r31, 0x0C	; 12
    1830:	0c 94 b2 3e 	jmp	0x7d64	; 0x7d64 <__prologue_saves__+0x18>
    1834:	69 83       	std	Y+1, r22	; 0x01
    1836:	7a 83       	std	Y+2, r23	; 0x02
    1838:	8b 83       	std	Y+3, r24	; 0x03
    183a:	9c 83       	std	Y+4, r25	; 0x04
    183c:	2d 83       	std	Y+5, r18	; 0x05
    183e:	3e 83       	std	Y+6, r19	; 0x06
    1840:	4f 83       	std	Y+7, r20	; 0x07
    1842:	58 87       	std	Y+8, r21	; 0x08
    1844:	89 e0       	ldi	r24, 0x09	; 9
    1846:	e8 2e       	mov	r14, r24
    1848:	f1 2c       	mov	r15, r1
    184a:	ec 0e       	add	r14, r28
    184c:	fd 1e       	adc	r15, r29
    184e:	ce 01       	movw	r24, r28
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	b7 01       	movw	r22, r14
    1854:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1858:	8e 01       	movw	r16, r28
    185a:	0f 5e       	subi	r16, 0xEF	; 239
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	05 96       	adiw	r24, 0x05	; 5
    1862:	b8 01       	movw	r22, r16
    1864:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	40 f0       	brcs	.+16     	; 0x187e <__ltsf2+0x56>
    186e:	89 89       	ldd	r24, Y+17	; 0x11
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	28 f0       	brcs	.+10     	; 0x187e <__ltsf2+0x56>
    1874:	c7 01       	movw	r24, r14
    1876:	b8 01       	movw	r22, r16
    1878:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <__fpcmp_parts_f>
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <__ltsf2+0x58>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	68 96       	adiw	r28, 0x18	; 24
    1882:	e6 e0       	ldi	r30, 0x06	; 6
    1884:	0c 94 ce 3e 	jmp	0x7d9c	; 0x7d9c <__epilogue_restores__+0x18>

00001888 <__fixsfsi>:
    1888:	ac e0       	ldi	r26, 0x0C	; 12
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ea e4       	ldi	r30, 0x4A	; 74
    188e:	fc e0       	ldi	r31, 0x0C	; 12
    1890:	0c 94 b6 3e 	jmp	0x7d6c	; 0x7d6c <__prologue_saves__+0x20>
    1894:	69 83       	std	Y+1, r22	; 0x01
    1896:	7a 83       	std	Y+2, r23	; 0x02
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	ce 01       	movw	r24, r28
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	be 01       	movw	r22, r28
    18a2:	6b 5f       	subi	r22, 0xFB	; 251
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__unpack_f>
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	61 f1       	breq	.+88     	; 0x1908 <__fixsfsi+0x80>
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	50 f1       	brcs	.+84     	; 0x1908 <__fixsfsi+0x80>
    18b4:	84 30       	cpi	r24, 0x04	; 4
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <__fixsfsi+0x38>
    18b8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ba:	88 23       	and	r24, r24
    18bc:	51 f1       	breq	.+84     	; 0x1912 <__fixsfsi+0x8a>
    18be:	2e c0       	rjmp	.+92     	; 0x191c <__fixsfsi+0x94>
    18c0:	2f 81       	ldd	r18, Y+7	; 0x07
    18c2:	38 85       	ldd	r19, Y+8	; 0x08
    18c4:	37 fd       	sbrc	r19, 7
    18c6:	20 c0       	rjmp	.+64     	; 0x1908 <__fixsfsi+0x80>
    18c8:	6e 81       	ldd	r22, Y+6	; 0x06
    18ca:	2f 31       	cpi	r18, 0x1F	; 31
    18cc:	31 05       	cpc	r19, r1
    18ce:	1c f0       	brlt	.+6      	; 0x18d6 <__fixsfsi+0x4e>
    18d0:	66 23       	and	r22, r22
    18d2:	f9 f0       	breq	.+62     	; 0x1912 <__fixsfsi+0x8a>
    18d4:	23 c0       	rjmp	.+70     	; 0x191c <__fixsfsi+0x94>
    18d6:	8e e1       	ldi	r24, 0x1E	; 30
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	82 1b       	sub	r24, r18
    18dc:	93 0b       	sbc	r25, r19
    18de:	29 85       	ldd	r18, Y+9	; 0x09
    18e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    18e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <__fixsfsi+0x68>
    18e8:	56 95       	lsr	r21
    18ea:	47 95       	ror	r20
    18ec:	37 95       	ror	r19
    18ee:	27 95       	ror	r18
    18f0:	8a 95       	dec	r24
    18f2:	d2 f7       	brpl	.-12     	; 0x18e8 <__fixsfsi+0x60>
    18f4:	66 23       	and	r22, r22
    18f6:	b1 f0       	breq	.+44     	; 0x1924 <__fixsfsi+0x9c>
    18f8:	50 95       	com	r21
    18fa:	40 95       	com	r20
    18fc:	30 95       	com	r19
    18fe:	21 95       	neg	r18
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	4f 4f       	sbci	r20, 0xFF	; 255
    1904:	5f 4f       	sbci	r21, 0xFF	; 255
    1906:	0e c0       	rjmp	.+28     	; 0x1924 <__fixsfsi+0x9c>
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <__fixsfsi+0x9c>
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f ef       	ldi	r20, 0xFF	; 255
    1918:	5f e7       	ldi	r21, 0x7F	; 127
    191a:	04 c0       	rjmp	.+8      	; 0x1924 <__fixsfsi+0x9c>
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e8       	ldi	r21, 0x80	; 128
    1924:	b9 01       	movw	r22, r18
    1926:	ca 01       	movw	r24, r20
    1928:	2c 96       	adiw	r28, 0x0c	; 12
    192a:	e2 e0       	ldi	r30, 0x02	; 2
    192c:	0c 94 d2 3e 	jmp	0x7da4	; 0x7da4 <__epilogue_restores__+0x20>

00001930 <__pack_f>:
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	fc 01       	movw	r30, r24
    193c:	e4 80       	ldd	r14, Z+4	; 0x04
    193e:	f5 80       	ldd	r15, Z+5	; 0x05
    1940:	06 81       	ldd	r16, Z+6	; 0x06
    1942:	17 81       	ldd	r17, Z+7	; 0x07
    1944:	d1 80       	ldd	r13, Z+1	; 0x01
    1946:	80 81       	ld	r24, Z
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	48 f4       	brcc	.+18     	; 0x195e <__pack_f+0x2e>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e1       	ldi	r26, 0x10	; 16
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	a5 c0       	rjmp	.+330    	; 0x1aa8 <__pack_f+0x178>
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	09 f4       	brne	.+2      	; 0x1964 <__pack_f+0x34>
    1962:	9f c0       	rjmp	.+318    	; 0x1aa2 <__pack_f+0x172>
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	21 f4       	brne	.+8      	; 0x1970 <__pack_f+0x40>
    1968:	ee 24       	eor	r14, r14
    196a:	ff 24       	eor	r15, r15
    196c:	87 01       	movw	r16, r14
    196e:	05 c0       	rjmp	.+10     	; 0x197a <__pack_f+0x4a>
    1970:	e1 14       	cp	r14, r1
    1972:	f1 04       	cpc	r15, r1
    1974:	01 05       	cpc	r16, r1
    1976:	11 05       	cpc	r17, r1
    1978:	19 f4       	brne	.+6      	; 0x1980 <__pack_f+0x50>
    197a:	e0 e0       	ldi	r30, 0x00	; 0
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	96 c0       	rjmp	.+300    	; 0x1aac <__pack_f+0x17c>
    1980:	62 81       	ldd	r22, Z+2	; 0x02
    1982:	73 81       	ldd	r23, Z+3	; 0x03
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	62 38       	cpi	r22, 0x82	; 130
    1988:	79 07       	cpc	r23, r25
    198a:	0c f0       	brlt	.+2      	; 0x198e <__pack_f+0x5e>
    198c:	5b c0       	rjmp	.+182    	; 0x1a44 <__pack_f+0x114>
    198e:	22 e8       	ldi	r18, 0x82	; 130
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	26 1b       	sub	r18, r22
    1994:	37 0b       	sbc	r19, r23
    1996:	2a 31       	cpi	r18, 0x1A	; 26
    1998:	31 05       	cpc	r19, r1
    199a:	2c f0       	brlt	.+10     	; 0x19a6 <__pack_f+0x76>
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	2a c0       	rjmp	.+84     	; 0x19fa <__pack_f+0xca>
    19a6:	b8 01       	movw	r22, r16
    19a8:	a7 01       	movw	r20, r14
    19aa:	02 2e       	mov	r0, r18
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <__pack_f+0x86>
    19ae:	76 95       	lsr	r23
    19b0:	67 95       	ror	r22
    19b2:	57 95       	ror	r21
    19b4:	47 95       	ror	r20
    19b6:	0a 94       	dec	r0
    19b8:	d2 f7       	brpl	.-12     	; 0x19ae <__pack_f+0x7e>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <__pack_f+0x9c>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	aa 1f       	adc	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	2a 95       	dec	r18
    19ce:	d2 f7       	brpl	.-12     	; 0x19c4 <__pack_f+0x94>
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	a1 09       	sbc	r26, r1
    19d4:	b1 09       	sbc	r27, r1
    19d6:	8e 21       	and	r24, r14
    19d8:	9f 21       	and	r25, r15
    19da:	a0 23       	and	r26, r16
    19dc:	b1 23       	and	r27, r17
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	a1 05       	cpc	r26, r1
    19e2:	b1 05       	cpc	r27, r1
    19e4:	21 f0       	breq	.+8      	; 0x19ee <__pack_f+0xbe>
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	9a 01       	movw	r18, r20
    19f0:	ab 01       	movw	r20, r22
    19f2:	28 2b       	or	r18, r24
    19f4:	39 2b       	or	r19, r25
    19f6:	4a 2b       	or	r20, r26
    19f8:	5b 2b       	or	r21, r27
    19fa:	da 01       	movw	r26, r20
    19fc:	c9 01       	movw	r24, r18
    19fe:	8f 77       	andi	r24, 0x7F	; 127
    1a00:	90 70       	andi	r25, 0x00	; 0
    1a02:	a0 70       	andi	r26, 0x00	; 0
    1a04:	b0 70       	andi	r27, 0x00	; 0
    1a06:	80 34       	cpi	r24, 0x40	; 64
    1a08:	91 05       	cpc	r25, r1
    1a0a:	a1 05       	cpc	r26, r1
    1a0c:	b1 05       	cpc	r27, r1
    1a0e:	39 f4       	brne	.+14     	; 0x1a1e <__pack_f+0xee>
    1a10:	27 ff       	sbrs	r18, 7
    1a12:	09 c0       	rjmp	.+18     	; 0x1a26 <__pack_f+0xf6>
    1a14:	20 5c       	subi	r18, 0xC0	; 192
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	4f 4f       	sbci	r20, 0xFF	; 255
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <__pack_f+0xf6>
    1a1e:	21 5c       	subi	r18, 0xC1	; 193
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	4f 4f       	sbci	r20, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	e0 e0       	ldi	r30, 0x00	; 0
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	20 30       	cpi	r18, 0x00	; 0
    1a2c:	a0 e0       	ldi	r26, 0x00	; 0
    1a2e:	3a 07       	cpc	r19, r26
    1a30:	a0 e0       	ldi	r26, 0x00	; 0
    1a32:	4a 07       	cpc	r20, r26
    1a34:	a0 e4       	ldi	r26, 0x40	; 64
    1a36:	5a 07       	cpc	r21, r26
    1a38:	10 f0       	brcs	.+4      	; 0x1a3e <__pack_f+0x10e>
    1a3a:	e1 e0       	ldi	r30, 0x01	; 1
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	79 01       	movw	r14, r18
    1a40:	8a 01       	movw	r16, r20
    1a42:	27 c0       	rjmp	.+78     	; 0x1a92 <__pack_f+0x162>
    1a44:	60 38       	cpi	r22, 0x80	; 128
    1a46:	71 05       	cpc	r23, r1
    1a48:	64 f5       	brge	.+88     	; 0x1aa2 <__pack_f+0x172>
    1a4a:	fb 01       	movw	r30, r22
    1a4c:	e1 58       	subi	r30, 0x81	; 129
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	d8 01       	movw	r26, r16
    1a52:	c7 01       	movw	r24, r14
    1a54:	8f 77       	andi	r24, 0x7F	; 127
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	a0 70       	andi	r26, 0x00	; 0
    1a5a:	b0 70       	andi	r27, 0x00	; 0
    1a5c:	80 34       	cpi	r24, 0x40	; 64
    1a5e:	91 05       	cpc	r25, r1
    1a60:	a1 05       	cpc	r26, r1
    1a62:	b1 05       	cpc	r27, r1
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <__pack_f+0x144>
    1a66:	e7 fe       	sbrs	r14, 7
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <__pack_f+0x154>
    1a6a:	80 e4       	ldi	r24, 0x40	; 64
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <__pack_f+0x14c>
    1a74:	8f e3       	ldi	r24, 0x3F	; 63
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e8 0e       	add	r14, r24
    1a7e:	f9 1e       	adc	r15, r25
    1a80:	0a 1f       	adc	r16, r26
    1a82:	1b 1f       	adc	r17, r27
    1a84:	17 ff       	sbrs	r17, 7
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <__pack_f+0x162>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	31 96       	adiw	r30, 0x01	; 1
    1a92:	87 e0       	ldi	r24, 0x07	; 7
    1a94:	16 95       	lsr	r17
    1a96:	07 95       	ror	r16
    1a98:	f7 94       	ror	r15
    1a9a:	e7 94       	ror	r14
    1a9c:	8a 95       	dec	r24
    1a9e:	d1 f7       	brne	.-12     	; 0x1a94 <__pack_f+0x164>
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <__pack_f+0x17c>
    1aa2:	ee 24       	eor	r14, r14
    1aa4:	ff 24       	eor	r15, r15
    1aa6:	87 01       	movw	r16, r14
    1aa8:	ef ef       	ldi	r30, 0xFF	; 255
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	6e 2f       	mov	r22, r30
    1aae:	67 95       	ror	r22
    1ab0:	66 27       	eor	r22, r22
    1ab2:	67 95       	ror	r22
    1ab4:	90 2f       	mov	r25, r16
    1ab6:	9f 77       	andi	r25, 0x7F	; 127
    1ab8:	d7 94       	ror	r13
    1aba:	dd 24       	eor	r13, r13
    1abc:	d7 94       	ror	r13
    1abe:	8e 2f       	mov	r24, r30
    1ac0:	86 95       	lsr	r24
    1ac2:	49 2f       	mov	r20, r25
    1ac4:	46 2b       	or	r20, r22
    1ac6:	58 2f       	mov	r21, r24
    1ac8:	5d 29       	or	r21, r13
    1aca:	b7 01       	movw	r22, r14
    1acc:	ca 01       	movw	r24, r20
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	08 95       	ret

00001ada <__unpack_f>:
    1ada:	fc 01       	movw	r30, r24
    1adc:	db 01       	movw	r26, r22
    1ade:	40 81       	ld	r20, Z
    1ae0:	51 81       	ldd	r21, Z+1	; 0x01
    1ae2:	22 81       	ldd	r18, Z+2	; 0x02
    1ae4:	62 2f       	mov	r22, r18
    1ae6:	6f 77       	andi	r22, 0x7F	; 127
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	22 1f       	adc	r18, r18
    1aec:	22 27       	eor	r18, r18
    1aee:	22 1f       	adc	r18, r18
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	89 2f       	mov	r24, r25
    1af4:	88 0f       	add	r24, r24
    1af6:	82 2b       	or	r24, r18
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	99 1f       	adc	r25, r25
    1afe:	99 27       	eor	r25, r25
    1b00:	99 1f       	adc	r25, r25
    1b02:	11 96       	adiw	r26, 0x01	; 1
    1b04:	9c 93       	st	X, r25
    1b06:	11 97       	sbiw	r26, 0x01	; 1
    1b08:	21 15       	cp	r18, r1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	a9 f5       	brne	.+106    	; 0x1b78 <__unpack_f+0x9e>
    1b0e:	41 15       	cp	r20, r1
    1b10:	51 05       	cpc	r21, r1
    1b12:	61 05       	cpc	r22, r1
    1b14:	71 05       	cpc	r23, r1
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <__unpack_f+0x42>
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	37 c0       	rjmp	.+110    	; 0x1b8a <__unpack_f+0xb0>
    1b1c:	82 e8       	ldi	r24, 0x82	; 130
    1b1e:	9f ef       	ldi	r25, 0xFF	; 255
    1b20:	13 96       	adiw	r26, 0x03	; 3
    1b22:	9c 93       	st	X, r25
    1b24:	8e 93       	st	-X, r24
    1b26:	12 97       	sbiw	r26, 0x02	; 2
    1b28:	9a 01       	movw	r18, r20
    1b2a:	ab 01       	movw	r20, r22
    1b2c:	67 e0       	ldi	r22, 0x07	; 7
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	44 1f       	adc	r20, r20
    1b34:	55 1f       	adc	r21, r21
    1b36:	6a 95       	dec	r22
    1b38:	d1 f7       	brne	.-12     	; 0x1b2e <__unpack_f+0x54>
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	8c 93       	st	X, r24
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <__unpack_f+0x80>
    1b40:	22 0f       	add	r18, r18
    1b42:	33 1f       	adc	r19, r19
    1b44:	44 1f       	adc	r20, r20
    1b46:	55 1f       	adc	r21, r21
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	13 97       	sbiw	r26, 0x03	; 3
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	13 96       	adiw	r26, 0x03	; 3
    1b54:	9c 93       	st	X, r25
    1b56:	8e 93       	st	-X, r24
    1b58:	12 97       	sbiw	r26, 0x02	; 2
    1b5a:	20 30       	cpi	r18, 0x00	; 0
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	38 07       	cpc	r19, r24
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	48 07       	cpc	r20, r24
    1b64:	80 e4       	ldi	r24, 0x40	; 64
    1b66:	58 07       	cpc	r21, r24
    1b68:	58 f3       	brcs	.-42     	; 0x1b40 <__unpack_f+0x66>
    1b6a:	14 96       	adiw	r26, 0x04	; 4
    1b6c:	2d 93       	st	X+, r18
    1b6e:	3d 93       	st	X+, r19
    1b70:	4d 93       	st	X+, r20
    1b72:	5c 93       	st	X, r21
    1b74:	17 97       	sbiw	r26, 0x07	; 7
    1b76:	08 95       	ret
    1b78:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	79 f4       	brne	.+30     	; 0x1b9c <__unpack_f+0xc2>
    1b7e:	41 15       	cp	r20, r1
    1b80:	51 05       	cpc	r21, r1
    1b82:	61 05       	cpc	r22, r1
    1b84:	71 05       	cpc	r23, r1
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <__unpack_f+0xb4>
    1b88:	84 e0       	ldi	r24, 0x04	; 4
    1b8a:	8c 93       	st	X, r24
    1b8c:	08 95       	ret
    1b8e:	64 ff       	sbrs	r22, 4
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <__unpack_f+0xbe>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	8c 93       	st	X, r24
    1b96:	12 c0       	rjmp	.+36     	; 0x1bbc <__unpack_f+0xe2>
    1b98:	1c 92       	st	X, r1
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <__unpack_f+0xe2>
    1b9c:	2f 57       	subi	r18, 0x7F	; 127
    1b9e:	30 40       	sbci	r19, 0x00	; 0
    1ba0:	13 96       	adiw	r26, 0x03	; 3
    1ba2:	3c 93       	st	X, r19
    1ba4:	2e 93       	st	-X, r18
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	8c 93       	st	X, r24
    1bac:	87 e0       	ldi	r24, 0x07	; 7
    1bae:	44 0f       	add	r20, r20
    1bb0:	55 1f       	adc	r21, r21
    1bb2:	66 1f       	adc	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	8a 95       	dec	r24
    1bb8:	d1 f7       	brne	.-12     	; 0x1bae <__unpack_f+0xd4>
    1bba:	70 64       	ori	r23, 0x40	; 64
    1bbc:	14 96       	adiw	r26, 0x04	; 4
    1bbe:	4d 93       	st	X+, r20
    1bc0:	5d 93       	st	X+, r21
    1bc2:	6d 93       	st	X+, r22
    1bc4:	7c 93       	st	X, r23
    1bc6:	17 97       	sbiw	r26, 0x07	; 7
    1bc8:	08 95       	ret

00001bca <__fpcmp_parts_f>:
    1bca:	1f 93       	push	r17
    1bcc:	dc 01       	movw	r26, r24
    1bce:	fb 01       	movw	r30, r22
    1bd0:	9c 91       	ld	r25, X
    1bd2:	92 30       	cpi	r25, 0x02	; 2
    1bd4:	08 f4       	brcc	.+2      	; 0x1bd8 <__fpcmp_parts_f+0xe>
    1bd6:	47 c0       	rjmp	.+142    	; 0x1c66 <__fpcmp_parts_f+0x9c>
    1bd8:	80 81       	ld	r24, Z
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <__fpcmp_parts_f+0x16>
    1bde:	43 c0       	rjmp	.+134    	; 0x1c66 <__fpcmp_parts_f+0x9c>
    1be0:	94 30       	cpi	r25, 0x04	; 4
    1be2:	51 f4       	brne	.+20     	; 0x1bf8 <__fpcmp_parts_f+0x2e>
    1be4:	11 96       	adiw	r26, 0x01	; 1
    1be6:	1c 91       	ld	r17, X
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	99 f5       	brne	.+102    	; 0x1c52 <__fpcmp_parts_f+0x88>
    1bec:	81 81       	ldd	r24, Z+1	; 0x01
    1bee:	68 2f       	mov	r22, r24
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	61 1b       	sub	r22, r17
    1bf4:	71 09       	sbc	r23, r1
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <__fpcmp_parts_f+0xac>
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	21 f0       	breq	.+8      	; 0x1c04 <__fpcmp_parts_f+0x3a>
    1bfc:	92 30       	cpi	r25, 0x02	; 2
    1bfe:	31 f4       	brne	.+12     	; 0x1c0c <__fpcmp_parts_f+0x42>
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	b9 f1       	breq	.+110    	; 0x1c72 <__fpcmp_parts_f+0xa8>
    1c04:	81 81       	ldd	r24, Z+1	; 0x01
    1c06:	88 23       	and	r24, r24
    1c08:	89 f1       	breq	.+98     	; 0x1c6c <__fpcmp_parts_f+0xa2>
    1c0a:	2d c0       	rjmp	.+90     	; 0x1c66 <__fpcmp_parts_f+0x9c>
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	1c 91       	ld	r17, X
    1c10:	11 97       	sbiw	r26, 0x01	; 1
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	f1 f0       	breq	.+60     	; 0x1c52 <__fpcmp_parts_f+0x88>
    1c16:	81 81       	ldd	r24, Z+1	; 0x01
    1c18:	18 17       	cp	r17, r24
    1c1a:	d9 f4       	brne	.+54     	; 0x1c52 <__fpcmp_parts_f+0x88>
    1c1c:	12 96       	adiw	r26, 0x02	; 2
    1c1e:	2d 91       	ld	r18, X+
    1c20:	3c 91       	ld	r19, X
    1c22:	13 97       	sbiw	r26, 0x03	; 3
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	82 17       	cp	r24, r18
    1c2a:	93 07       	cpc	r25, r19
    1c2c:	94 f0       	brlt	.+36     	; 0x1c52 <__fpcmp_parts_f+0x88>
    1c2e:	28 17       	cp	r18, r24
    1c30:	39 07       	cpc	r19, r25
    1c32:	bc f0       	brlt	.+46     	; 0x1c62 <__fpcmp_parts_f+0x98>
    1c34:	14 96       	adiw	r26, 0x04	; 4
    1c36:	8d 91       	ld	r24, X+
    1c38:	9d 91       	ld	r25, X+
    1c3a:	0d 90       	ld	r0, X+
    1c3c:	bc 91       	ld	r27, X
    1c3e:	a0 2d       	mov	r26, r0
    1c40:	24 81       	ldd	r18, Z+4	; 0x04
    1c42:	35 81       	ldd	r19, Z+5	; 0x05
    1c44:	46 81       	ldd	r20, Z+6	; 0x06
    1c46:	57 81       	ldd	r21, Z+7	; 0x07
    1c48:	28 17       	cp	r18, r24
    1c4a:	39 07       	cpc	r19, r25
    1c4c:	4a 07       	cpc	r20, r26
    1c4e:	5b 07       	cpc	r21, r27
    1c50:	18 f4       	brcc	.+6      	; 0x1c58 <__fpcmp_parts_f+0x8e>
    1c52:	11 23       	and	r17, r17
    1c54:	41 f0       	breq	.+16     	; 0x1c66 <__fpcmp_parts_f+0x9c>
    1c56:	0a c0       	rjmp	.+20     	; 0x1c6c <__fpcmp_parts_f+0xa2>
    1c58:	82 17       	cp	r24, r18
    1c5a:	93 07       	cpc	r25, r19
    1c5c:	a4 07       	cpc	r26, r20
    1c5e:	b5 07       	cpc	r27, r21
    1c60:	40 f4       	brcc	.+16     	; 0x1c72 <__fpcmp_parts_f+0xa8>
    1c62:	11 23       	and	r17, r17
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <__fpcmp_parts_f+0xa2>
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <__fpcmp_parts_f+0xac>
    1c6c:	6f ef       	ldi	r22, 0xFF	; 255
    1c6e:	7f ef       	ldi	r23, 0xFF	; 255
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <__fpcmp_parts_f+0xac>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	cb 01       	movw	r24, r22
    1c78:	1f 91       	pop	r17
    1c7a:	08 95       	ret

00001c7c <TDelay_ms>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with ms
************************************************************************************/
enuErrorStatus_t TDelay_ms(uint8_t u8TimerNumber, uint64_t u64Time_ms, void(*pfCallback)(void))
{
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	ca 55       	subi	r28, 0x5A	; 90
    1c96:	d0 40       	sbci	r29, 0x00	; 0
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	8a 83       	std	Y+2, r24	; 0x02
    1ca4:	0b 83       	std	Y+3, r16	; 0x03
    1ca6:	1c 83       	std	Y+4, r17	; 0x04
    1ca8:	2d 83       	std	Y+5, r18	; 0x05
    1caa:	3e 83       	std	Y+6, r19	; 0x06
    1cac:	4f 83       	std	Y+7, r20	; 0x07
    1cae:	58 87       	std	Y+8, r21	; 0x08
    1cb0:	69 87       	std	Y+9, r22	; 0x09
    1cb2:	7a 87       	std	Y+10, r23	; 0x0a
    1cb4:	fc 86       	std	Y+12, r15	; 0x0c
    1cb6:	eb 86       	std	Y+11, r14	; 0x0b
	enuErrorStatus_t enuStatus = E_ERROR;
    1cb8:	19 82       	std	Y+1, r1	; 0x01
	/*Convert ms to us*/
	u64Time_ms *= TDELAY_THOUSAND_MULTIPLIER;
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	8d 87       	std	Y+13, r24	; 0x0d
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	9e 87       	std	Y+14, r25	; 0x0e
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	98 8b       	std	Y+16, r25	; 0x10
    1cca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ccc:	89 8b       	std	Y+17, r24	; 0x11
    1cce:	98 85       	ldd	r25, Y+8	; 0x08
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	9c 8b       	std	Y+20, r25	; 0x14
    1cda:	ad 84       	ldd	r10, Y+13	; 0x0d
    1cdc:	be 84       	ldd	r11, Y+14	; 0x0e
    1cde:	cf 84       	ldd	r12, Y+15	; 0x0f
    1ce0:	d8 88       	ldd	r13, Y+16	; 0x10
    1ce2:	e9 88       	ldd	r14, Y+17	; 0x11
    1ce4:	fa 88       	ldd	r15, Y+18	; 0x12
    1ce6:	0b 89       	ldd	r16, Y+19	; 0x13
    1ce8:	1c 89       	ldd	r17, Y+20	; 0x14
    1cea:	2a 2d       	mov	r18, r10
    1cec:	3b 2d       	mov	r19, r11
    1cee:	4c 2d       	mov	r20, r12
    1cf0:	5d 2d       	mov	r21, r13
    1cf2:	6e 2d       	mov	r22, r14
    1cf4:	7f 2d       	mov	r23, r15
    1cf6:	80 2f       	mov	r24, r16
    1cf8:	91 2f       	mov	r25, r17
    1cfa:	02 e0       	ldi	r16, 0x02	; 2
    1cfc:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    1d00:	2d 8b       	std	Y+21, r18	; 0x15
    1d02:	3e 8b       	std	Y+22, r19	; 0x16
    1d04:	4f 8b       	std	Y+23, r20	; 0x17
    1d06:	58 8f       	std	Y+24, r21	; 0x18
    1d08:	69 8f       	std	Y+25, r22	; 0x19
    1d0a:	7a 8f       	std	Y+26, r23	; 0x1a
    1d0c:	8b 8f       	std	Y+27, r24	; 0x1b
    1d0e:	9c 8f       	std	Y+28, r25	; 0x1c
    1d10:	2d 89       	ldd	r18, Y+21	; 0x15
    1d12:	3e 89       	ldd	r19, Y+22	; 0x16
    1d14:	4f 89       	ldd	r20, Y+23	; 0x17
    1d16:	58 8d       	ldd	r21, Y+24	; 0x18
    1d18:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d20:	05 e0       	ldi	r16, 0x05	; 5
    1d22:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    1d26:	2d 8f       	std	Y+29, r18	; 0x1d
    1d28:	3e 8f       	std	Y+30, r19	; 0x1e
    1d2a:	4f 8f       	std	Y+31, r20	; 0x1f
    1d2c:	58 a3       	std	Y+32, r21	; 0x20
    1d2e:	69 a3       	std	Y+33, r22	; 0x21
    1d30:	7a a3       	std	Y+34, r23	; 0x22
    1d32:	8b a3       	std	Y+35, r24	; 0x23
    1d34:	9c a3       	std	Y+36, r25	; 0x24
    1d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d38:	9d 89       	ldd	r25, Y+21	; 0x15
    1d3a:	89 1b       	sub	r24, r25
    1d3c:	8d a3       	std	Y+37, r24	; 0x25
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	8d a7       	std	Y+45, r24	; 0x2d
    1d42:	9d a1       	ldd	r25, Y+37	; 0x25
    1d44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d46:	89 17       	cp	r24, r25
    1d48:	08 f0       	brcs	.+2      	; 0x1d4c <TDelay_ms+0xd0>
    1d4a:	1d a6       	std	Y+45, r1	; 0x2d
    1d4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d4e:	8e 89       	ldd	r24, Y+22	; 0x16
    1d50:	98 1b       	sub	r25, r24
    1d52:	9e a3       	std	Y+38, r25	; 0x26
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	9e a7       	std	Y+46, r25	; 0x2e
    1d58:	8e a1       	ldd	r24, Y+38	; 0x26
    1d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d5c:	98 17       	cp	r25, r24
    1d5e:	08 f0       	brcs	.+2      	; 0x1d62 <TDelay_ms+0xe6>
    1d60:	1e a6       	std	Y+46, r1	; 0x2e
    1d62:	8e a1       	ldd	r24, Y+38	; 0x26
    1d64:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d66:	89 1b       	sub	r24, r25
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	88 ab       	std	Y+48, r24	; 0x30
    1d6e:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d70:	8e a1       	ldd	r24, Y+38	; 0x26
    1d72:	89 17       	cp	r24, r25
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <TDelay_ms+0xfc>
    1d76:	18 aa       	std	Y+48, r1	; 0x30
    1d78:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d7a:	88 a9       	ldd	r24, Y+48	; 0x30
    1d7c:	98 2b       	or	r25, r24
    1d7e:	9e a7       	std	Y+46, r25	; 0x2e
    1d80:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d82:	9e a3       	std	Y+38, r25	; 0x26
    1d84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d86:	9f 89       	ldd	r25, Y+23	; 0x17
    1d88:	89 1b       	sub	r24, r25
    1d8a:	8f a3       	std	Y+39, r24	; 0x27
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	89 ab       	std	Y+49, r24	; 0x31
    1d90:	9f a1       	ldd	r25, Y+39	; 0x27
    1d92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d94:	89 17       	cp	r24, r25
    1d96:	08 f0       	brcs	.+2      	; 0x1d9a <TDelay_ms+0x11e>
    1d98:	19 aa       	std	Y+49, r1	; 0x31
    1d9a:	9f a1       	ldd	r25, Y+39	; 0x27
    1d9c:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d9e:	98 1b       	sub	r25, r24
    1da0:	9a ab       	std	Y+50, r25	; 0x32
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	9b ab       	std	Y+51, r25	; 0x33
    1da6:	8a a9       	ldd	r24, Y+50	; 0x32
    1da8:	9f a1       	ldd	r25, Y+39	; 0x27
    1daa:	98 17       	cp	r25, r24
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <TDelay_ms+0x134>
    1dae:	1b aa       	std	Y+51, r1	; 0x33
    1db0:	89 a9       	ldd	r24, Y+49	; 0x31
    1db2:	9b a9       	ldd	r25, Y+51	; 0x33
    1db4:	89 2b       	or	r24, r25
    1db6:	89 ab       	std	Y+49, r24	; 0x31
    1db8:	8a a9       	ldd	r24, Y+50	; 0x32
    1dba:	8f a3       	std	Y+39, r24	; 0x27
    1dbc:	98 a1       	ldd	r25, Y+32	; 0x20
    1dbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1dc0:	98 1b       	sub	r25, r24
    1dc2:	98 a7       	std	Y+40, r25	; 0x28
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9c ab       	std	Y+52, r25	; 0x34
    1dc8:	88 a5       	ldd	r24, Y+40	; 0x28
    1dca:	98 a1       	ldd	r25, Y+32	; 0x20
    1dcc:	98 17       	cp	r25, r24
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <TDelay_ms+0x156>
    1dd0:	1c aa       	std	Y+52, r1	; 0x34
    1dd2:	88 a5       	ldd	r24, Y+40	; 0x28
    1dd4:	99 a9       	ldd	r25, Y+49	; 0x31
    1dd6:	89 1b       	sub	r24, r25
    1dd8:	8d ab       	std	Y+53, r24	; 0x35
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	8e ab       	std	Y+54, r24	; 0x36
    1dde:	9d a9       	ldd	r25, Y+53	; 0x35
    1de0:	88 a5       	ldd	r24, Y+40	; 0x28
    1de2:	89 17       	cp	r24, r25
    1de4:	08 f0       	brcs	.+2      	; 0x1de8 <TDelay_ms+0x16c>
    1de6:	1e aa       	std	Y+54, r1	; 0x36
    1de8:	9c a9       	ldd	r25, Y+52	; 0x34
    1dea:	8e a9       	ldd	r24, Y+54	; 0x36
    1dec:	98 2b       	or	r25, r24
    1dee:	9c ab       	std	Y+52, r25	; 0x34
    1df0:	9d a9       	ldd	r25, Y+53	; 0x35
    1df2:	98 a7       	std	Y+40, r25	; 0x28
    1df4:	89 a1       	ldd	r24, Y+33	; 0x21
    1df6:	99 8d       	ldd	r25, Y+25	; 0x19
    1df8:	89 1b       	sub	r24, r25
    1dfa:	89 a7       	std	Y+41, r24	; 0x29
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	8f ab       	std	Y+55, r24	; 0x37
    1e00:	99 a5       	ldd	r25, Y+41	; 0x29
    1e02:	89 a1       	ldd	r24, Y+33	; 0x21
    1e04:	89 17       	cp	r24, r25
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <TDelay_ms+0x18e>
    1e08:	1f aa       	std	Y+55, r1	; 0x37
    1e0a:	99 a5       	ldd	r25, Y+41	; 0x29
    1e0c:	8c a9       	ldd	r24, Y+52	; 0x34
    1e0e:	98 1b       	sub	r25, r24
    1e10:	98 af       	std	Y+56, r25	; 0x38
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	99 af       	std	Y+57, r25	; 0x39
    1e16:	88 ad       	ldd	r24, Y+56	; 0x38
    1e18:	99 a5       	ldd	r25, Y+41	; 0x29
    1e1a:	98 17       	cp	r25, r24
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <TDelay_ms+0x1a4>
    1e1e:	19 ae       	std	Y+57, r1	; 0x39
    1e20:	8f a9       	ldd	r24, Y+55	; 0x37
    1e22:	99 ad       	ldd	r25, Y+57	; 0x39
    1e24:	89 2b       	or	r24, r25
    1e26:	8f ab       	std	Y+55, r24	; 0x37
    1e28:	88 ad       	ldd	r24, Y+56	; 0x38
    1e2a:	89 a7       	std	Y+41, r24	; 0x29
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e30:	98 1b       	sub	r25, r24
    1e32:	9a a7       	std	Y+42, r25	; 0x2a
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	9a af       	std	Y+58, r25	; 0x3a
    1e38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3c:	98 17       	cp	r25, r24
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <TDelay_ms+0x1c6>
    1e40:	1a ae       	std	Y+58, r1	; 0x3a
    1e42:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e44:	9f a9       	ldd	r25, Y+55	; 0x37
    1e46:	89 1b       	sub	r24, r25
    1e48:	8b af       	std	Y+59, r24	; 0x3b
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	8c af       	std	Y+60, r24	; 0x3c
    1e4e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e50:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e52:	89 17       	cp	r24, r25
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <TDelay_ms+0x1dc>
    1e56:	1c ae       	std	Y+60, r1	; 0x3c
    1e58:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e5c:	98 2b       	or	r25, r24
    1e5e:	9a af       	std	Y+58, r25	; 0x3a
    1e60:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e62:	9a a7       	std	Y+42, r25	; 0x2a
    1e64:	8b a1       	ldd	r24, Y+35	; 0x23
    1e66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e68:	89 1b       	sub	r24, r25
    1e6a:	8b a7       	std	Y+43, r24	; 0x2b
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	8d af       	std	Y+61, r24	; 0x3d
    1e70:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e72:	8b a1       	ldd	r24, Y+35	; 0x23
    1e74:	89 17       	cp	r24, r25
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <TDelay_ms+0x1fe>
    1e78:	1d ae       	std	Y+61, r1	; 0x3d
    1e7a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e7c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e7e:	98 1b       	sub	r25, r24
    1e80:	9e af       	std	Y+62, r25	; 0x3e
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	9f af       	std	Y+63, r25	; 0x3f
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e8a:	98 17       	cp	r25, r24
    1e8c:	08 f0       	brcs	.+2      	; 0x1e90 <TDelay_ms+0x214>
    1e8e:	1f ae       	std	Y+63, r1	; 0x3f
    1e90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e94:	89 2b       	or	r24, r25
    1e96:	8d af       	std	Y+61, r24	; 0x3d
    1e98:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e9a:	8b a7       	std	Y+43, r24	; 0x2b
    1e9c:	9c a1       	ldd	r25, Y+36	; 0x24
    1e9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ea0:	98 1b       	sub	r25, r24
    1ea2:	9c a7       	std	Y+44, r25	; 0x2c
    1ea4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ea6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ea8:	89 1b       	sub	r24, r25
    1eaa:	8c a7       	std	Y+44, r24	; 0x2c
    1eac:	8d a1       	ldd	r24, Y+37	; 0x25
    1eae:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb4:	8f a1       	ldd	r24, Y+39	; 0x27
    1eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb8:	98 a5       	ldd	r25, Y+40	; 0x28
    1eba:	98 a3       	std	Y+32, r25	; 0x20
    1ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ebe:	89 a3       	std	Y+33, r24	; 0x21
    1ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	8b a3       	std	Y+35, r24	; 0x23
    1ec8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eca:	9c a3       	std	Y+36, r25	; 0x24
    1ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ece:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed0:	89 0f       	add	r24, r25
    1ed2:	21 96       	adiw	r28, 0x01	; 1
    1ed4:	8f af       	std	Y+63, r24	; 0x3f
    1ed6:	21 97       	sbiw	r28, 0x01	; 1
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	29 96       	adiw	r28, 0x09	; 9
    1edc:	8f af       	std	Y+63, r24	; 0x3f
    1ede:	29 97       	sbiw	r28, 0x09	; 9
    1ee0:	21 96       	adiw	r28, 0x01	; 1
    1ee2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ee4:	21 97       	sbiw	r28, 0x01	; 1
    1ee6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ee8:	98 17       	cp	r25, r24
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <TDelay_ms+0x276>
    1eec:	29 96       	adiw	r28, 0x09	; 9
    1eee:	1f ae       	std	Y+63, r1	; 0x3f
    1ef0:	29 97       	sbiw	r28, 0x09	; 9
    1ef2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef6:	98 0f       	add	r25, r24
    1ef8:	22 96       	adiw	r28, 0x02	; 2
    1efa:	9f af       	std	Y+63, r25	; 0x3f
    1efc:	22 97       	sbiw	r28, 0x02	; 2
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	2a 96       	adiw	r28, 0x0a	; 10
    1f02:	9f af       	std	Y+63, r25	; 0x3f
    1f04:	2a 97       	sbiw	r28, 0x0a	; 10
    1f06:	22 96       	adiw	r28, 0x02	; 2
    1f08:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f0a:	22 97       	sbiw	r28, 0x02	; 2
    1f0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f0e:	89 17       	cp	r24, r25
    1f10:	18 f0       	brcs	.+6      	; 0x1f18 <TDelay_ms+0x29c>
    1f12:	2a 96       	adiw	r28, 0x0a	; 10
    1f14:	1f ae       	std	Y+63, r1	; 0x3f
    1f16:	2a 97       	sbiw	r28, 0x0a	; 10
    1f18:	29 96       	adiw	r28, 0x09	; 9
    1f1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f1c:	29 97       	sbiw	r28, 0x09	; 9
    1f1e:	22 96       	adiw	r28, 0x02	; 2
    1f20:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f22:	22 97       	sbiw	r28, 0x02	; 2
    1f24:	89 0f       	add	r24, r25
    1f26:	2b 96       	adiw	r28, 0x0b	; 11
    1f28:	8f af       	std	Y+63, r24	; 0x3f
    1f2a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	2c 96       	adiw	r28, 0x0c	; 12
    1f30:	8f af       	std	Y+63, r24	; 0x3f
    1f32:	2c 97       	sbiw	r28, 0x0c	; 12
    1f34:	2b 96       	adiw	r28, 0x0b	; 11
    1f36:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f38:	2b 97       	sbiw	r28, 0x0b	; 11
    1f3a:	22 96       	adiw	r28, 0x02	; 2
    1f3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f3e:	22 97       	sbiw	r28, 0x02	; 2
    1f40:	98 17       	cp	r25, r24
    1f42:	18 f0       	brcs	.+6      	; 0x1f4a <TDelay_ms+0x2ce>
    1f44:	2c 96       	adiw	r28, 0x0c	; 12
    1f46:	1f ae       	std	Y+63, r1	; 0x3f
    1f48:	2c 97       	sbiw	r28, 0x0c	; 12
    1f4a:	2a 96       	adiw	r28, 0x0a	; 10
    1f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f50:	2c 96       	adiw	r28, 0x0c	; 12
    1f52:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f54:	2c 97       	sbiw	r28, 0x0c	; 12
    1f56:	98 2b       	or	r25, r24
    1f58:	2a 96       	adiw	r28, 0x0a	; 10
    1f5a:	9f af       	std	Y+63, r25	; 0x3f
    1f5c:	2a 97       	sbiw	r28, 0x0a	; 10
    1f5e:	2b 96       	adiw	r28, 0x0b	; 11
    1f60:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f62:	2b 97       	sbiw	r28, 0x0b	; 11
    1f64:	22 96       	adiw	r28, 0x02	; 2
    1f66:	9f af       	std	Y+63, r25	; 0x3f
    1f68:	22 97       	sbiw	r28, 0x02	; 2
    1f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f6e:	89 0f       	add	r24, r25
    1f70:	23 96       	adiw	r28, 0x03	; 3
    1f72:	8f af       	std	Y+63, r24	; 0x3f
    1f74:	23 97       	sbiw	r28, 0x03	; 3
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	2d 96       	adiw	r28, 0x0d	; 13
    1f7a:	8f af       	std	Y+63, r24	; 0x3f
    1f7c:	2d 97       	sbiw	r28, 0x0d	; 13
    1f7e:	23 96       	adiw	r28, 0x03	; 3
    1f80:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f82:	23 97       	sbiw	r28, 0x03	; 3
    1f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f86:	98 17       	cp	r25, r24
    1f88:	18 f0       	brcs	.+6      	; 0x1f90 <TDelay_ms+0x314>
    1f8a:	2d 96       	adiw	r28, 0x0d	; 13
    1f8c:	1f ae       	std	Y+63, r1	; 0x3f
    1f8e:	2d 97       	sbiw	r28, 0x0d	; 13
    1f90:	2a 96       	adiw	r28, 0x0a	; 10
    1f92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f94:	2a 97       	sbiw	r28, 0x0a	; 10
    1f96:	23 96       	adiw	r28, 0x03	; 3
    1f98:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f9a:	23 97       	sbiw	r28, 0x03	; 3
    1f9c:	98 0f       	add	r25, r24
    1f9e:	2e 96       	adiw	r28, 0x0e	; 14
    1fa0:	9f af       	std	Y+63, r25	; 0x3f
    1fa2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	2f 96       	adiw	r28, 0x0f	; 15
    1fa8:	9f af       	std	Y+63, r25	; 0x3f
    1faa:	2f 97       	sbiw	r28, 0x0f	; 15
    1fac:	2e 96       	adiw	r28, 0x0e	; 14
    1fae:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fb0:	2e 97       	sbiw	r28, 0x0e	; 14
    1fb2:	23 96       	adiw	r28, 0x03	; 3
    1fb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fb6:	23 97       	sbiw	r28, 0x03	; 3
    1fb8:	89 17       	cp	r24, r25
    1fba:	18 f0       	brcs	.+6      	; 0x1fc2 <TDelay_ms+0x346>
    1fbc:	2f 96       	adiw	r28, 0x0f	; 15
    1fbe:	1f ae       	std	Y+63, r1	; 0x3f
    1fc0:	2f 97       	sbiw	r28, 0x0f	; 15
    1fc2:	2d 96       	adiw	r28, 0x0d	; 13
    1fc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fc6:	2d 97       	sbiw	r28, 0x0d	; 13
    1fc8:	2f 96       	adiw	r28, 0x0f	; 15
    1fca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fcc:	2f 97       	sbiw	r28, 0x0f	; 15
    1fce:	89 2b       	or	r24, r25
    1fd0:	2d 96       	adiw	r28, 0x0d	; 13
    1fd2:	8f af       	std	Y+63, r24	; 0x3f
    1fd4:	2d 97       	sbiw	r28, 0x0d	; 13
    1fd6:	2e 96       	adiw	r28, 0x0e	; 14
    1fd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fda:	2e 97       	sbiw	r28, 0x0e	; 14
    1fdc:	23 96       	adiw	r28, 0x03	; 3
    1fde:	8f af       	std	Y+63, r24	; 0x3f
    1fe0:	23 97       	sbiw	r28, 0x03	; 3
    1fe2:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe4:	88 89       	ldd	r24, Y+16	; 0x10
    1fe6:	98 0f       	add	r25, r24
    1fe8:	24 96       	adiw	r28, 0x04	; 4
    1fea:	9f af       	std	Y+63, r25	; 0x3f
    1fec:	24 97       	sbiw	r28, 0x04	; 4
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	60 96       	adiw	r28, 0x10	; 16
    1ff2:	9f af       	std	Y+63, r25	; 0x3f
    1ff4:	60 97       	sbiw	r28, 0x10	; 16
    1ff6:	24 96       	adiw	r28, 0x04	; 4
    1ff8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ffa:	24 97       	sbiw	r28, 0x04	; 4
    1ffc:	98 a1       	ldd	r25, Y+32	; 0x20
    1ffe:	89 17       	cp	r24, r25
    2000:	18 f0       	brcs	.+6      	; 0x2008 <TDelay_ms+0x38c>
    2002:	60 96       	adiw	r28, 0x10	; 16
    2004:	1f ae       	std	Y+63, r1	; 0x3f
    2006:	60 97       	sbiw	r28, 0x10	; 16
    2008:	2d 96       	adiw	r28, 0x0d	; 13
    200a:	8f ad       	ldd	r24, Y+63	; 0x3f
    200c:	2d 97       	sbiw	r28, 0x0d	; 13
    200e:	24 96       	adiw	r28, 0x04	; 4
    2010:	9f ad       	ldd	r25, Y+63	; 0x3f
    2012:	24 97       	sbiw	r28, 0x04	; 4
    2014:	89 0f       	add	r24, r25
    2016:	61 96       	adiw	r28, 0x11	; 17
    2018:	8f af       	std	Y+63, r24	; 0x3f
    201a:	61 97       	sbiw	r28, 0x11	; 17
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	62 96       	adiw	r28, 0x12	; 18
    2020:	8f af       	std	Y+63, r24	; 0x3f
    2022:	62 97       	sbiw	r28, 0x12	; 18
    2024:	61 96       	adiw	r28, 0x11	; 17
    2026:	9f ad       	ldd	r25, Y+63	; 0x3f
    2028:	61 97       	sbiw	r28, 0x11	; 17
    202a:	24 96       	adiw	r28, 0x04	; 4
    202c:	8f ad       	ldd	r24, Y+63	; 0x3f
    202e:	24 97       	sbiw	r28, 0x04	; 4
    2030:	98 17       	cp	r25, r24
    2032:	18 f0       	brcs	.+6      	; 0x203a <TDelay_ms+0x3be>
    2034:	62 96       	adiw	r28, 0x12	; 18
    2036:	1f ae       	std	Y+63, r1	; 0x3f
    2038:	62 97       	sbiw	r28, 0x12	; 18
    203a:	60 96       	adiw	r28, 0x10	; 16
    203c:	9f ad       	ldd	r25, Y+63	; 0x3f
    203e:	60 97       	sbiw	r28, 0x10	; 16
    2040:	62 96       	adiw	r28, 0x12	; 18
    2042:	8f ad       	ldd	r24, Y+63	; 0x3f
    2044:	62 97       	sbiw	r28, 0x12	; 18
    2046:	98 2b       	or	r25, r24
    2048:	60 96       	adiw	r28, 0x10	; 16
    204a:	9f af       	std	Y+63, r25	; 0x3f
    204c:	60 97       	sbiw	r28, 0x10	; 16
    204e:	61 96       	adiw	r28, 0x11	; 17
    2050:	9f ad       	ldd	r25, Y+63	; 0x3f
    2052:	61 97       	sbiw	r28, 0x11	; 17
    2054:	24 96       	adiw	r28, 0x04	; 4
    2056:	9f af       	std	Y+63, r25	; 0x3f
    2058:	24 97       	sbiw	r28, 0x04	; 4
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	99 89       	ldd	r25, Y+17	; 0x11
    205e:	89 0f       	add	r24, r25
    2060:	25 96       	adiw	r28, 0x05	; 5
    2062:	8f af       	std	Y+63, r24	; 0x3f
    2064:	25 97       	sbiw	r28, 0x05	; 5
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	63 96       	adiw	r28, 0x13	; 19
    206a:	8f af       	std	Y+63, r24	; 0x3f
    206c:	63 97       	sbiw	r28, 0x13	; 19
    206e:	25 96       	adiw	r28, 0x05	; 5
    2070:	9f ad       	ldd	r25, Y+63	; 0x3f
    2072:	25 97       	sbiw	r28, 0x05	; 5
    2074:	89 a1       	ldd	r24, Y+33	; 0x21
    2076:	98 17       	cp	r25, r24
    2078:	18 f0       	brcs	.+6      	; 0x2080 <TDelay_ms+0x404>
    207a:	63 96       	adiw	r28, 0x13	; 19
    207c:	1f ae       	std	Y+63, r1	; 0x3f
    207e:	63 97       	sbiw	r28, 0x13	; 19
    2080:	60 96       	adiw	r28, 0x10	; 16
    2082:	9f ad       	ldd	r25, Y+63	; 0x3f
    2084:	60 97       	sbiw	r28, 0x10	; 16
    2086:	25 96       	adiw	r28, 0x05	; 5
    2088:	8f ad       	ldd	r24, Y+63	; 0x3f
    208a:	25 97       	sbiw	r28, 0x05	; 5
    208c:	98 0f       	add	r25, r24
    208e:	64 96       	adiw	r28, 0x14	; 20
    2090:	9f af       	std	Y+63, r25	; 0x3f
    2092:	64 97       	sbiw	r28, 0x14	; 20
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	65 96       	adiw	r28, 0x15	; 21
    2098:	9f af       	std	Y+63, r25	; 0x3f
    209a:	65 97       	sbiw	r28, 0x15	; 21
    209c:	64 96       	adiw	r28, 0x14	; 20
    209e:	8f ad       	ldd	r24, Y+63	; 0x3f
    20a0:	64 97       	sbiw	r28, 0x14	; 20
    20a2:	25 96       	adiw	r28, 0x05	; 5
    20a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20a6:	25 97       	sbiw	r28, 0x05	; 5
    20a8:	89 17       	cp	r24, r25
    20aa:	18 f0       	brcs	.+6      	; 0x20b2 <TDelay_ms+0x436>
    20ac:	65 96       	adiw	r28, 0x15	; 21
    20ae:	1f ae       	std	Y+63, r1	; 0x3f
    20b0:	65 97       	sbiw	r28, 0x15	; 21
    20b2:	63 96       	adiw	r28, 0x13	; 19
    20b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    20b6:	63 97       	sbiw	r28, 0x13	; 19
    20b8:	65 96       	adiw	r28, 0x15	; 21
    20ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    20bc:	65 97       	sbiw	r28, 0x15	; 21
    20be:	89 2b       	or	r24, r25
    20c0:	63 96       	adiw	r28, 0x13	; 19
    20c2:	8f af       	std	Y+63, r24	; 0x3f
    20c4:	63 97       	sbiw	r28, 0x13	; 19
    20c6:	64 96       	adiw	r28, 0x14	; 20
    20c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    20ca:	64 97       	sbiw	r28, 0x14	; 20
    20cc:	25 96       	adiw	r28, 0x05	; 5
    20ce:	8f af       	std	Y+63, r24	; 0x3f
    20d0:	25 97       	sbiw	r28, 0x05	; 5
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	8a 89       	ldd	r24, Y+18	; 0x12
    20d6:	98 0f       	add	r25, r24
    20d8:	26 96       	adiw	r28, 0x06	; 6
    20da:	9f af       	std	Y+63, r25	; 0x3f
    20dc:	26 97       	sbiw	r28, 0x06	; 6
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	66 96       	adiw	r28, 0x16	; 22
    20e2:	9f af       	std	Y+63, r25	; 0x3f
    20e4:	66 97       	sbiw	r28, 0x16	; 22
    20e6:	26 96       	adiw	r28, 0x06	; 6
    20e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    20ea:	26 97       	sbiw	r28, 0x06	; 6
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	89 17       	cp	r24, r25
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <TDelay_ms+0x47c>
    20f2:	66 96       	adiw	r28, 0x16	; 22
    20f4:	1f ae       	std	Y+63, r1	; 0x3f
    20f6:	66 97       	sbiw	r28, 0x16	; 22
    20f8:	63 96       	adiw	r28, 0x13	; 19
    20fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    20fc:	63 97       	sbiw	r28, 0x13	; 19
    20fe:	26 96       	adiw	r28, 0x06	; 6
    2100:	9f ad       	ldd	r25, Y+63	; 0x3f
    2102:	26 97       	sbiw	r28, 0x06	; 6
    2104:	89 0f       	add	r24, r25
    2106:	67 96       	adiw	r28, 0x17	; 23
    2108:	8f af       	std	Y+63, r24	; 0x3f
    210a:	67 97       	sbiw	r28, 0x17	; 23
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	68 96       	adiw	r28, 0x18	; 24
    2110:	8f af       	std	Y+63, r24	; 0x3f
    2112:	68 97       	sbiw	r28, 0x18	; 24
    2114:	67 96       	adiw	r28, 0x17	; 23
    2116:	9f ad       	ldd	r25, Y+63	; 0x3f
    2118:	67 97       	sbiw	r28, 0x17	; 23
    211a:	26 96       	adiw	r28, 0x06	; 6
    211c:	8f ad       	ldd	r24, Y+63	; 0x3f
    211e:	26 97       	sbiw	r28, 0x06	; 6
    2120:	98 17       	cp	r25, r24
    2122:	18 f0       	brcs	.+6      	; 0x212a <TDelay_ms+0x4ae>
    2124:	68 96       	adiw	r28, 0x18	; 24
    2126:	1f ae       	std	Y+63, r1	; 0x3f
    2128:	68 97       	sbiw	r28, 0x18	; 24
    212a:	66 96       	adiw	r28, 0x16	; 22
    212c:	9f ad       	ldd	r25, Y+63	; 0x3f
    212e:	66 97       	sbiw	r28, 0x16	; 22
    2130:	68 96       	adiw	r28, 0x18	; 24
    2132:	8f ad       	ldd	r24, Y+63	; 0x3f
    2134:	68 97       	sbiw	r28, 0x18	; 24
    2136:	98 2b       	or	r25, r24
    2138:	66 96       	adiw	r28, 0x16	; 22
    213a:	9f af       	std	Y+63, r25	; 0x3f
    213c:	66 97       	sbiw	r28, 0x16	; 22
    213e:	67 96       	adiw	r28, 0x17	; 23
    2140:	9f ad       	ldd	r25, Y+63	; 0x3f
    2142:	67 97       	sbiw	r28, 0x17	; 23
    2144:	26 96       	adiw	r28, 0x06	; 6
    2146:	9f af       	std	Y+63, r25	; 0x3f
    2148:	26 97       	sbiw	r28, 0x06	; 6
    214a:	8b a1       	ldd	r24, Y+35	; 0x23
    214c:	9b 89       	ldd	r25, Y+19	; 0x13
    214e:	89 0f       	add	r24, r25
    2150:	27 96       	adiw	r28, 0x07	; 7
    2152:	8f af       	std	Y+63, r24	; 0x3f
    2154:	27 97       	sbiw	r28, 0x07	; 7
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	69 96       	adiw	r28, 0x19	; 25
    215a:	8f af       	std	Y+63, r24	; 0x3f
    215c:	69 97       	sbiw	r28, 0x19	; 25
    215e:	27 96       	adiw	r28, 0x07	; 7
    2160:	9f ad       	ldd	r25, Y+63	; 0x3f
    2162:	27 97       	sbiw	r28, 0x07	; 7
    2164:	8b a1       	ldd	r24, Y+35	; 0x23
    2166:	98 17       	cp	r25, r24
    2168:	18 f0       	brcs	.+6      	; 0x2170 <TDelay_ms+0x4f4>
    216a:	69 96       	adiw	r28, 0x19	; 25
    216c:	1f ae       	std	Y+63, r1	; 0x3f
    216e:	69 97       	sbiw	r28, 0x19	; 25
    2170:	66 96       	adiw	r28, 0x16	; 22
    2172:	9f ad       	ldd	r25, Y+63	; 0x3f
    2174:	66 97       	sbiw	r28, 0x16	; 22
    2176:	27 96       	adiw	r28, 0x07	; 7
    2178:	8f ad       	ldd	r24, Y+63	; 0x3f
    217a:	27 97       	sbiw	r28, 0x07	; 7
    217c:	98 0f       	add	r25, r24
    217e:	6a 96       	adiw	r28, 0x1a	; 26
    2180:	9f af       	std	Y+63, r25	; 0x3f
    2182:	6a 97       	sbiw	r28, 0x1a	; 26
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	6b 96       	adiw	r28, 0x1b	; 27
    2188:	9f af       	std	Y+63, r25	; 0x3f
    218a:	6b 97       	sbiw	r28, 0x1b	; 27
    218c:	6a 96       	adiw	r28, 0x1a	; 26
    218e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2190:	6a 97       	sbiw	r28, 0x1a	; 26
    2192:	27 96       	adiw	r28, 0x07	; 7
    2194:	9f ad       	ldd	r25, Y+63	; 0x3f
    2196:	27 97       	sbiw	r28, 0x07	; 7
    2198:	89 17       	cp	r24, r25
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <TDelay_ms+0x526>
    219c:	6b 96       	adiw	r28, 0x1b	; 27
    219e:	1f ae       	std	Y+63, r1	; 0x3f
    21a0:	6b 97       	sbiw	r28, 0x1b	; 27
    21a2:	69 96       	adiw	r28, 0x19	; 25
    21a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    21a6:	69 97       	sbiw	r28, 0x19	; 25
    21a8:	6b 96       	adiw	r28, 0x1b	; 27
    21aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ac:	6b 97       	sbiw	r28, 0x1b	; 27
    21ae:	89 2b       	or	r24, r25
    21b0:	69 96       	adiw	r28, 0x19	; 25
    21b2:	8f af       	std	Y+63, r24	; 0x3f
    21b4:	69 97       	sbiw	r28, 0x19	; 25
    21b6:	6a 96       	adiw	r28, 0x1a	; 26
    21b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    21ba:	6a 97       	sbiw	r28, 0x1a	; 26
    21bc:	27 96       	adiw	r28, 0x07	; 7
    21be:	8f af       	std	Y+63, r24	; 0x3f
    21c0:	27 97       	sbiw	r28, 0x07	; 7
    21c2:	9c a1       	ldd	r25, Y+36	; 0x24
    21c4:	8c 89       	ldd	r24, Y+20	; 0x14
    21c6:	98 0f       	add	r25, r24
    21c8:	28 96       	adiw	r28, 0x08	; 8
    21ca:	9f af       	std	Y+63, r25	; 0x3f
    21cc:	28 97       	sbiw	r28, 0x08	; 8
    21ce:	69 96       	adiw	r28, 0x19	; 25
    21d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    21d2:	69 97       	sbiw	r28, 0x19	; 25
    21d4:	28 96       	adiw	r28, 0x08	; 8
    21d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    21d8:	28 97       	sbiw	r28, 0x08	; 8
    21da:	89 0f       	add	r24, r25
    21dc:	28 96       	adiw	r28, 0x08	; 8
    21de:	8f af       	std	Y+63, r24	; 0x3f
    21e0:	28 97       	sbiw	r28, 0x08	; 8
    21e2:	21 96       	adiw	r28, 0x01	; 1
    21e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    21e6:	21 97       	sbiw	r28, 0x01	; 1
    21e8:	8d 8f       	std	Y+29, r24	; 0x1d
    21ea:	22 96       	adiw	r28, 0x02	; 2
    21ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    21ee:	22 97       	sbiw	r28, 0x02	; 2
    21f0:	9e 8f       	std	Y+30, r25	; 0x1e
    21f2:	23 96       	adiw	r28, 0x03	; 3
    21f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    21f6:	23 97       	sbiw	r28, 0x03	; 3
    21f8:	8f 8f       	std	Y+31, r24	; 0x1f
    21fa:	24 96       	adiw	r28, 0x04	; 4
    21fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    21fe:	24 97       	sbiw	r28, 0x04	; 4
    2200:	98 a3       	std	Y+32, r25	; 0x20
    2202:	25 96       	adiw	r28, 0x05	; 5
    2204:	8f ad       	ldd	r24, Y+63	; 0x3f
    2206:	25 97       	sbiw	r28, 0x05	; 5
    2208:	89 a3       	std	Y+33, r24	; 0x21
    220a:	26 96       	adiw	r28, 0x06	; 6
    220c:	9f ad       	ldd	r25, Y+63	; 0x3f
    220e:	26 97       	sbiw	r28, 0x06	; 6
    2210:	9a a3       	std	Y+34, r25	; 0x22
    2212:	27 96       	adiw	r28, 0x07	; 7
    2214:	8f ad       	ldd	r24, Y+63	; 0x3f
    2216:	27 97       	sbiw	r28, 0x07	; 7
    2218:	8b a3       	std	Y+35, r24	; 0x23
    221a:	28 96       	adiw	r28, 0x08	; 8
    221c:	9f ad       	ldd	r25, Y+63	; 0x3f
    221e:	28 97       	sbiw	r28, 0x08	; 8
    2220:	9c a3       	std	Y+36, r25	; 0x24
    2222:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2224:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2226:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2228:	58 a1       	ldd	r21, Y+32	; 0x20
    222a:	69 a1       	ldd	r22, Y+33	; 0x21
    222c:	7a a1       	ldd	r23, Y+34	; 0x22
    222e:	8b a1       	ldd	r24, Y+35	; 0x23
    2230:	9c a1       	ldd	r25, Y+36	; 0x24
    2232:	03 e0       	ldi	r16, 0x03	; 3
    2234:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    2238:	a2 2e       	mov	r10, r18
    223a:	b3 2e       	mov	r11, r19
    223c:	c4 2e       	mov	r12, r20
    223e:	d5 2e       	mov	r13, r21
    2240:	e6 2e       	mov	r14, r22
    2242:	f7 2e       	mov	r15, r23
    2244:	08 2f       	mov	r16, r24
    2246:	19 2f       	mov	r17, r25
    2248:	ab 82       	std	Y+3, r10	; 0x03
    224a:	bc 82       	std	Y+4, r11	; 0x04
    224c:	cd 82       	std	Y+5, r12	; 0x05
    224e:	de 82       	std	Y+6, r13	; 0x06
    2250:	ef 82       	std	Y+7, r14	; 0x07
    2252:	f8 86       	std	Y+8, r15	; 0x08
    2254:	09 87       	std	Y+9, r16	; 0x09
    2256:	1a 87       	std	Y+10, r17	; 0x0a
	if(u8TimerNumber == TIMER0)
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	88 23       	and	r24, r24
    225c:	d9 f4       	brne	.+54     	; 0x2294 <TDelay_ms+0x618>
	{
		//turn on timer interrupts
		T0_OV_InterruptEnable();
    225e:	0e 94 27 13 	call	0x264e	; 0x264e <T0_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T0_Start(u64Time_ms, pfCallback);
    2262:	ab 80       	ldd	r10, Y+3	; 0x03
    2264:	bc 80       	ldd	r11, Y+4	; 0x04
    2266:	cd 80       	ldd	r12, Y+5	; 0x05
    2268:	de 80       	ldd	r13, Y+6	; 0x06
    226a:	ef 80       	ldd	r14, Y+7	; 0x07
    226c:	f8 84       	ldd	r15, Y+8	; 0x08
    226e:	09 85       	ldd	r16, Y+9	; 0x09
    2270:	1a 85       	ldd	r17, Y+10	; 0x0a
    2272:	eb 85       	ldd	r30, Y+11	; 0x0b
    2274:	fc 85       	ldd	r31, Y+12	; 0x0c
    2276:	2a 2d       	mov	r18, r10
    2278:	3b 2d       	mov	r19, r11
    227a:	4c 2d       	mov	r20, r12
    227c:	5d 2d       	mov	r21, r13
    227e:	6e 2d       	mov	r22, r14
    2280:	7f 2d       	mov	r23, r15
    2282:	80 2f       	mov	r24, r16
    2284:	91 2f       	mov	r25, r17
    2286:	8f 01       	movw	r16, r30
    2288:	0e 94 63 13 	call	0x26c6	; 0x26c6 <T0_Start>
		enuStatus = T0_GetStatus();
    228c:	0e 94 31 16 	call	0x2c62	; 0x2c62 <T0_GetStatus>
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	1d c0       	rjmp	.+58     	; 0x22ce <TDelay_ms+0x652>
	}
	else if(u8TimerNumber == TIMER2)
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	d1 f4       	brne	.+52     	; 0x22ce <TDelay_ms+0x652>
	{
		//turn on timer interrupts
		T2_OV_InterruptEnable();
    229a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <T2_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_ms, pfCallback);
    229e:	ab 80       	ldd	r10, Y+3	; 0x03
    22a0:	bc 80       	ldd	r11, Y+4	; 0x04
    22a2:	cd 80       	ldd	r12, Y+5	; 0x05
    22a4:	de 80       	ldd	r13, Y+6	; 0x06
    22a6:	ef 80       	ldd	r14, Y+7	; 0x07
    22a8:	f8 84       	ldd	r15, Y+8	; 0x08
    22aa:	09 85       	ldd	r16, Y+9	; 0x09
    22ac:	1a 85       	ldd	r17, Y+10	; 0x0a
    22ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    22b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    22b2:	2a 2d       	mov	r18, r10
    22b4:	3b 2d       	mov	r19, r11
    22b6:	4c 2d       	mov	r20, r12
    22b8:	5d 2d       	mov	r21, r13
    22ba:	6e 2d       	mov	r22, r14
    22bc:	7f 2d       	mov	r23, r15
    22be:	80 2f       	mov	r24, r16
    22c0:	91 2f       	mov	r25, r17
    22c2:	8f 01       	movw	r16, r30
    22c4:	0e 94 12 23 	call	0x4624	; 0x4624 <T2_Start>
		enuStatus = T2_GetStatus();
    22c8:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <T2_GetStatus>
    22cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuStatus;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
}//end TDelay_ms
    22d0:	c6 5a       	subi	r28, 0xA6	; 166
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	bf 90       	pop	r11
    22f0:	af 90       	pop	r10
    22f2:	08 95       	ret

000022f4 <TDelay_us>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with us
************************************************************************************/
enuErrorStatus_t TDelay_us(uint8_t u8TimerNumber, uint64_t u64Time_us, void(*pfCallback)(void))
{
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	2c 97       	sbiw	r28, 0x0c	; 12
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	8a 83       	std	Y+2, r24	; 0x02
    231a:	0b 83       	std	Y+3, r16	; 0x03
    231c:	1c 83       	std	Y+4, r17	; 0x04
    231e:	2d 83       	std	Y+5, r18	; 0x05
    2320:	3e 83       	std	Y+6, r19	; 0x06
    2322:	4f 83       	std	Y+7, r20	; 0x07
    2324:	58 87       	std	Y+8, r21	; 0x08
    2326:	69 87       	std	Y+9, r22	; 0x09
    2328:	7a 87       	std	Y+10, r23	; 0x0a
    232a:	fc 86       	std	Y+12, r15	; 0x0c
    232c:	eb 86       	std	Y+11, r14	; 0x0b
	enuErrorStatus_t enuStatus = E_ERROR;
    232e:	19 82       	std	Y+1, r1	; 0x01

	if(u8TimerNumber == TIMER0)
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	88 23       	and	r24, r24
    2334:	d9 f4       	brne	.+54     	; 0x236c <TDelay_us+0x78>
	{
		//turn on timer interrupts
		T0_OV_InterruptEnable();
    2336:	0e 94 27 13 	call	0x264e	; 0x264e <T0_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T0_Start(u64Time_us, pfCallback);
    233a:	ab 80       	ldd	r10, Y+3	; 0x03
    233c:	bc 80       	ldd	r11, Y+4	; 0x04
    233e:	cd 80       	ldd	r12, Y+5	; 0x05
    2340:	de 80       	ldd	r13, Y+6	; 0x06
    2342:	ef 80       	ldd	r14, Y+7	; 0x07
    2344:	f8 84       	ldd	r15, Y+8	; 0x08
    2346:	09 85       	ldd	r16, Y+9	; 0x09
    2348:	1a 85       	ldd	r17, Y+10	; 0x0a
    234a:	eb 85       	ldd	r30, Y+11	; 0x0b
    234c:	fc 85       	ldd	r31, Y+12	; 0x0c
    234e:	2a 2d       	mov	r18, r10
    2350:	3b 2d       	mov	r19, r11
    2352:	4c 2d       	mov	r20, r12
    2354:	5d 2d       	mov	r21, r13
    2356:	6e 2d       	mov	r22, r14
    2358:	7f 2d       	mov	r23, r15
    235a:	80 2f       	mov	r24, r16
    235c:	91 2f       	mov	r25, r17
    235e:	8f 01       	movw	r16, r30
    2360:	0e 94 63 13 	call	0x26c6	; 0x26c6 <T0_Start>
		enuStatus = T0_GetStatus();
    2364:	0e 94 31 16 	call	0x2c62	; 0x2c62 <T0_GetStatus>
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	1d c0       	rjmp	.+58     	; 0x23a6 <TDelay_us+0xb2>
	}
	else if(u8TimerNumber == TIMER2)
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	82 30       	cpi	r24, 0x02	; 2
    2370:	d1 f4       	brne	.+52     	; 0x23a6 <TDelay_us+0xb2>
	{
		//turn on timer interrupts
		T2_OV_InterruptEnable();
    2372:	0e 94 d6 22 	call	0x45ac	; 0x45ac <T2_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_us, pfCallback);
    2376:	ab 80       	ldd	r10, Y+3	; 0x03
    2378:	bc 80       	ldd	r11, Y+4	; 0x04
    237a:	cd 80       	ldd	r12, Y+5	; 0x05
    237c:	de 80       	ldd	r13, Y+6	; 0x06
    237e:	ef 80       	ldd	r14, Y+7	; 0x07
    2380:	f8 84       	ldd	r15, Y+8	; 0x08
    2382:	09 85       	ldd	r16, Y+9	; 0x09
    2384:	1a 85       	ldd	r17, Y+10	; 0x0a
    2386:	eb 85       	ldd	r30, Y+11	; 0x0b
    2388:	fc 85       	ldd	r31, Y+12	; 0x0c
    238a:	2a 2d       	mov	r18, r10
    238c:	3b 2d       	mov	r19, r11
    238e:	4c 2d       	mov	r20, r12
    2390:	5d 2d       	mov	r21, r13
    2392:	6e 2d       	mov	r22, r14
    2394:	7f 2d       	mov	r23, r15
    2396:	80 2f       	mov	r24, r16
    2398:	91 2f       	mov	r25, r17
    239a:	8f 01       	movw	r16, r30
    239c:	0e 94 12 23 	call	0x4624	; 0x4624 <T2_Start>
		enuStatus = T2_GetStatus();
    23a0:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <T2_GetStatus>
    23a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return enuStatus;
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
}//end TDelay_us
    23a8:	2c 96       	adiw	r28, 0x0c	; 12
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	cf 90       	pop	r12
    23c4:	bf 90       	pop	r11
    23c6:	af 90       	pop	r10
    23c8:	08 95       	ret

000023ca <T0_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize timer 0 according to the sent parameters
************************************************************************************/
enuErrorStatus_t T0_Init(enuTimer0Mode_t enuMode,enuTimer0Scaler_t enuScaler)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	27 97       	sbiw	r28, 0x07	; 7
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	89 83       	std	Y+1, r24	; 0x01
    23e0:	6a 83       	std	Y+2, r22	; 0x02
   //set the timer mode by setting the correct configuration of the WGM bits for the mode the user has selected 
   switch (enuMode)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3f 83       	std	Y+7, r19	; 0x07
    23ea:	2e 83       	std	Y+6, r18	; 0x06
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	91 05       	cpc	r25, r1
    23f4:	21 f1       	breq	.+72     	; 0x243e <T0_Init+0x74>
    23f6:	2e 81       	ldd	r18, Y+6	; 0x06
    23f8:	3f 81       	ldd	r19, Y+7	; 0x07
    23fa:	22 30       	cpi	r18, 0x02	; 2
    23fc:	31 05       	cpc	r19, r1
    23fe:	2c f4       	brge	.+10     	; 0x240a <T0_Init+0x40>
    2400:	8e 81       	ldd	r24, Y+6	; 0x06
    2402:	9f 81       	ldd	r25, Y+7	; 0x07
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	61 f0       	breq	.+24     	; 0x2420 <T0_Init+0x56>
    2408:	47 c0       	rjmp	.+142    	; 0x2498 <T0_Init+0xce>
    240a:	2e 81       	ldd	r18, Y+6	; 0x06
    240c:	3f 81       	ldd	r19, Y+7	; 0x07
    240e:	22 30       	cpi	r18, 0x02	; 2
    2410:	31 05       	cpc	r19, r1
    2412:	21 f1       	breq	.+72     	; 0x245c <T0_Init+0x92>
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	9f 81       	ldd	r25, Y+7	; 0x07
    2418:	83 30       	cpi	r24, 0x03	; 3
    241a:	91 05       	cpc	r25, r1
    241c:	71 f1       	breq	.+92     	; 0x247a <T0_Init+0xb0>
    241e:	3c c0       	rjmp	.+120    	; 0x2498 <T0_Init+0xce>
   {
      case TIMER0_NORMAL_MODE:
      CLEAR_BIT(TCCR0_R,WGM00_B);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8f 7b       	andi	r24, 0xBF	; 191
    242c:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR0_R,WGM01_B);
    242e:	a3 e5       	ldi	r26, 0x53	; 83
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e3 e5       	ldi	r30, 0x53	; 83
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	87 7f       	andi	r24, 0xF7	; 247
    243a:	8c 93       	st	X, r24
    243c:	2f c0       	rjmp	.+94     	; 0x249c <T0_Init+0xd2>
      break;
      case TIMER0_PHASECORRECT_MODE:
      SET_BIT(TCCR0_R,WGM00_B);
    243e:	a3 e5       	ldi	r26, 0x53	; 83
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e3 e5       	ldi	r30, 0x53	; 83
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 64       	ori	r24, 0x40	; 64
    244a:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR0_R,WGM01_B);
    244c:	a3 e5       	ldi	r26, 0x53	; 83
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e3 e5       	ldi	r30, 0x53	; 83
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	87 7f       	andi	r24, 0xF7	; 247
    2458:	8c 93       	st	X, r24
    245a:	20 c0       	rjmp	.+64     	; 0x249c <T0_Init+0xd2>
      break;
      case TIMER0_CTC_MODE:
      CLEAR_BIT(TCCR0_R,WGM00_B);
    245c:	a3 e5       	ldi	r26, 0x53	; 83
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8f 7b       	andi	r24, 0xBF	; 191
    2468:	8c 93       	st	X, r24
      SET_BIT(TCCR0_R,WGM01_B);
    246a:	a3 e5       	ldi	r26, 0x53	; 83
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e3 e5       	ldi	r30, 0x53	; 83
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	88 60       	ori	r24, 0x08	; 8
    2476:	8c 93       	st	X, r24
    2478:	11 c0       	rjmp	.+34     	; 0x249c <T0_Init+0xd2>
      break;
      case TIMER0_FASTPWM_MODE:
      SET_BIT(TCCR0_R,WGM00_B);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 64       	ori	r24, 0x40	; 64
    2486:	8c 93       	st	X, r24
      SET_BIT(TCCR0_R,WGM01_B);
    2488:	a3 e5       	ldi	r26, 0x53	; 83
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 60       	ori	r24, 0x08	; 8
    2494:	8c 93       	st	X, r24
    2496:	02 c0       	rjmp	.+4      	; 0x249c <T0_Init+0xd2>
      break;
      default:
      return E_ERROR;
    2498:	1d 82       	std	Y+5, r1	; 0x05
    249a:	61 c0       	rjmp	.+194    	; 0x255e <T0_Init+0x194>
      break;
   }
   
   //clear the CS bits in the Timer control register and set the prescaler value
   TCCR0_R &= 0xF8;
    249c:	a3 e5       	ldi	r26, 0x53	; 83
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e3 e5       	ldi	r30, 0x53	; 83
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 7f       	andi	r24, 0xF8	; 248
    24a8:	8c 93       	st	X, r24
   TCCR0_R |= enuScaler;
    24aa:	a3 e5       	ldi	r26, 0x53	; 83
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e3 e5       	ldi	r30, 0x53	; 83
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	90 81       	ld	r25, Z
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	89 2b       	or	r24, r25
    24b8:	8c 93       	st	X, r24
   
   //set the prescaler value in a global variable for other functions to use
   switch(enuScaler)
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	3c 83       	std	Y+4, r19	; 0x04
    24c2:	2b 83       	std	Y+3, r18	; 0x03
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	82 30       	cpi	r24, 0x02	; 2
    24ca:	91 05       	cpc	r25, r1
    24cc:	59 f1       	breq	.+86     	; 0x2524 <T0_Init+0x15a>
    24ce:	2b 81       	ldd	r18, Y+3	; 0x03
    24d0:	3c 81       	ldd	r19, Y+4	; 0x04
    24d2:	23 30       	cpi	r18, 0x03	; 3
    24d4:	31 05       	cpc	r19, r1
    24d6:	54 f4       	brge	.+20     	; 0x24ec <T0_Init+0x122>
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	b1 f0       	breq	.+44     	; 0x250c <T0_Init+0x142>
    24e0:	2b 81       	ldd	r18, Y+3	; 0x03
    24e2:	3c 81       	ldd	r19, Y+4	; 0x04
    24e4:	21 30       	cpi	r18, 0x01	; 1
    24e6:	31 05       	cpc	r19, r1
    24e8:	b1 f0       	breq	.+44     	; 0x2516 <T0_Init+0x14c>
    24ea:	37 c0       	rjmp	.+110    	; 0x255a <T0_Init+0x190>
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	84 30       	cpi	r24, 0x04	; 4
    24f2:	91 05       	cpc	r25, r1
    24f4:	29 f1       	breq	.+74     	; 0x2540 <T0_Init+0x176>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	24 30       	cpi	r18, 0x04	; 4
    24fc:	31 05       	cpc	r19, r1
    24fe:	cc f0       	brlt	.+50     	; 0x2532 <T0_Init+0x168>
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	85 30       	cpi	r24, 0x05	; 5
    2506:	91 05       	cpc	r25, r1
    2508:	11 f1       	breq	.+68     	; 0x254e <T0_Init+0x184>
    250a:	27 c0       	rjmp	.+78     	; 0x255a <T0_Init+0x190>
   {
      case TIMER0_STOP:          Gu16_T0Prescaler=0;       break;
    250c:	10 92 98 01 	sts	0x0198, r1
    2510:	10 92 97 01 	sts	0x0197, r1
    2514:	22 c0       	rjmp	.+68     	; 0x255a <T0_Init+0x190>
      case TIMER0_SCALER_1:      Gu16_T0Prescaler=1;       break;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	90 93 98 01 	sts	0x0198, r25
    251e:	80 93 97 01 	sts	0x0197, r24
    2522:	1b c0       	rjmp	.+54     	; 0x255a <T0_Init+0x190>
      case TIMER0_SCALER_8:      Gu16_T0Prescaler=8;       break;
    2524:	88 e0       	ldi	r24, 0x08	; 8
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	90 93 98 01 	sts	0x0198, r25
    252c:	80 93 97 01 	sts	0x0197, r24
    2530:	14 c0       	rjmp	.+40     	; 0x255a <T0_Init+0x190>
      case TIMER0_SCALER_64:     Gu16_T0Prescaler=64;      break;
    2532:	80 e4       	ldi	r24, 0x40	; 64
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	90 93 98 01 	sts	0x0198, r25
    253a:	80 93 97 01 	sts	0x0197, r24
    253e:	0d c0       	rjmp	.+26     	; 0x255a <T0_Init+0x190>
      case TIMER0_SCALER_256:    Gu16_T0Prescaler=256;     break;
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	90 93 98 01 	sts	0x0198, r25
    2548:	80 93 97 01 	sts	0x0197, r24
    254c:	06 c0       	rjmp	.+12     	; 0x255a <T0_Init+0x190>
      case TIMER0_SCALER_1024:   Gu16_T0Prescaler=1024;    break;
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	94 e0       	ldi	r25, 0x04	; 4
    2552:	90 93 98 01 	sts	0x0198, r25
    2556:	80 93 97 01 	sts	0x0197, r24
      default:                                             break;
   }
   //return E_OK state
   return E_OK;
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	9d 83       	std	Y+5, r25	; 0x05
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2560:	27 96       	adiw	r28, 0x07	; 7
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <T0_OC0Mode>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize the OCR0 pin for use in PWM generation
************************************************************************************/
enuErrorStatus_t T0_OC0Mode(enuOC0Mode_t enuMode)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <T0_OC0Mode+0x6>
    2578:	00 d0       	rcall	.+0      	; 0x257a <T0_OC0Mode+0x8>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	89 83       	std	Y+1, r24	; 0x01
   //set the OC0 pin mode by setting the correct configuration of the COM bits for the mode the user has selected 
   switch (enuMode)
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	3c 83       	std	Y+4, r19	; 0x04
    2588:	2b 83       	std	Y+3, r18	; 0x03
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	91 05       	cpc	r25, r1
    2592:	21 f1       	breq	.+72     	; 0x25dc <T0_OC0Mode+0x6a>
    2594:	2b 81       	ldd	r18, Y+3	; 0x03
    2596:	3c 81       	ldd	r19, Y+4	; 0x04
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	2c f4       	brge	.+10     	; 0x25a8 <T0_OC0Mode+0x36>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	61 f0       	breq	.+24     	; 0x25be <T0_OC0Mode+0x4c>
    25a6:	47 c0       	rjmp	.+142    	; 0x2636 <T0_OC0Mode+0xc4>
    25a8:	2b 81       	ldd	r18, Y+3	; 0x03
    25aa:	3c 81       	ldd	r19, Y+4	; 0x04
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	21 f1       	breq	.+72     	; 0x25fa <T0_OC0Mode+0x88>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	91 05       	cpc	r25, r1
    25ba:	71 f1       	breq	.+92     	; 0x2618 <T0_OC0Mode+0xa6>
    25bc:	3c c0       	rjmp	.+120    	; 0x2636 <T0_OC0Mode+0xc4>
   {
      case OC0_DISCONNECTED:
      CLEAR_BIT(TCCR0_R,COM00_B);
    25be:	a3 e5       	ldi	r26, 0x53	; 83
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e3 e5       	ldi	r30, 0x53	; 83
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 7e       	andi	r24, 0xEF	; 239
    25ca:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR0_R,COM01_B);
    25cc:	a3 e5       	ldi	r26, 0x53	; 83
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e3 e5       	ldi	r30, 0x53	; 83
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	8f 7d       	andi	r24, 0xDF	; 223
    25d8:	8c 93       	st	X, r24
    25da:	2f c0       	rjmp	.+94     	; 0x263a <T0_OC0Mode+0xc8>
      break;
      case OC0_TOGGLE:
      SET_BIT(TCCR0_R,COM00_B);
    25dc:	a3 e5       	ldi	r26, 0x53	; 83
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e3 e5       	ldi	r30, 0x53	; 83
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 61       	ori	r24, 0x10	; 16
    25e8:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR0_R,COM01_B);
    25ea:	a3 e5       	ldi	r26, 0x53	; 83
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e3 e5       	ldi	r30, 0x53	; 83
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 7d       	andi	r24, 0xDF	; 223
    25f6:	8c 93       	st	X, r24
    25f8:	20 c0       	rjmp	.+64     	; 0x263a <T0_OC0Mode+0xc8>
      break;
      case OC0_NON_INVERTING:
      CLEAR_BIT(TCCR0_R,COM00_B);
    25fa:	a3 e5       	ldi	r26, 0x53	; 83
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e5       	ldi	r30, 0x53	; 83
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 7e       	andi	r24, 0xEF	; 239
    2606:	8c 93       	st	X, r24
      SET_BIT(TCCR0_R,COM01_B);
    2608:	a3 e5       	ldi	r26, 0x53	; 83
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e3 e5       	ldi	r30, 0x53	; 83
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	80 62       	ori	r24, 0x20	; 32
    2614:	8c 93       	st	X, r24
    2616:	11 c0       	rjmp	.+34     	; 0x263a <T0_OC0Mode+0xc8>
      break;
      case OC0_INVERTING:
      SET_BIT(TCCR0_R,COM00_B);
    2618:	a3 e5       	ldi	r26, 0x53	; 83
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e3 e5       	ldi	r30, 0x53	; 83
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	80 61       	ori	r24, 0x10	; 16
    2624:	8c 93       	st	X, r24
      SET_BIT(TCCR0_R,COM01_B);
    2626:	a3 e5       	ldi	r26, 0x53	; 83
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e3 e5       	ldi	r30, 0x53	; 83
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	80 62       	ori	r24, 0x20	; 32
    2632:	8c 93       	st	X, r24
    2634:	02 c0       	rjmp	.+4      	; 0x263a <T0_OC0Mode+0xc8>
      break;
      
      default:
      return E_ERROR;
    2636:	1a 82       	std	Y+2, r1	; 0x02
    2638:	02 c0       	rjmp	.+4      	; 0x263e <T0_OC0Mode+0xcc>
      break;
   }
   //return E_OK state
   return E_OK;
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <T0_OV_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable overflow interrupt
************************************************************************************/
enuErrorStatus_t T0_OV_InterruptEnable(void)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
   //set the TOIE bit to enable the overflow interrupt
   SET_BIT(TIMSK_R,TOIE0_B);
    2656:	a9 e5       	ldi	r26, 0x59	; 89
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e9 e5       	ldi	r30, 0x59	; 89
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	81 60       	ori	r24, 0x01	; 1
    2662:	8c 93       	st	X, r24
   return E_OK;
    2664:	81 e0       	ldi	r24, 0x01	; 1
}
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <T0_OV_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable overflow interrupt
************************************************************************************/
enuErrorStatus_t T0_OV_InterruptDisable(void)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
   //clear the TOIE bit to disable the overflow interrupt
   CLEAR_BIT(TIMSK_R,TOIE0_B);
    2674:	a9 e5       	ldi	r26, 0x59	; 89
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e9 e5       	ldi	r30, 0x59	; 89
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	8e 7f       	andi	r24, 0xFE	; 254
    2680:	8c 93       	st	X, r24
   return E_OK;
    2682:	81 e0       	ldi	r24, 0x01	; 1
}
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <T0_OC_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable output compare interrupt
************************************************************************************/
enuErrorStatus_t T0_OC_InterruptEnable(void)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
   //set the TOIE bit to enable output compare interrupt
   SET_BIT(TIMSK_R,OCIE0_B);
    2692:	a9 e5       	ldi	r26, 0x59	; 89
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e9 e5       	ldi	r30, 0x59	; 89
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	8c 93       	st	X, r24
   return E_OK;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <T0_OC_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable output compare interrupt
************************************************************************************/
enuErrorStatus_t T0_OC_InterruptDisable(void)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
   //clear the TOIE bit to disable output compare interrupt
   CLEAR_BIT(TIMSK_R,OCIE0_B);
    26b0:	a9 e5       	ldi	r26, 0x59	; 89
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e9 e5       	ldi	r30, 0x59	; 89
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8d 7f       	andi	r24, 0xFD	; 253
    26bc:	8c 93       	st	X, r24
   return E_OK;
    26be:	81 e0       	ldi	r24, 0x01	; 1
}
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <T0_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to start the timer and set a callback function to be called when time runs up
************************************************************************************/
enuErrorStatus_t T0_Start(uint64_t u64TimerValue, void(*pfCallback)(void))
{
    26c6:	2f 92       	push	r2
    26c8:	3f 92       	push	r3
    26ca:	4f 92       	push	r4
    26cc:	5f 92       	push	r5
    26ce:	6f 92       	push	r6
    26d0:	7f 92       	push	r7
    26d2:	8f 92       	push	r8
    26d4:	9f 92       	push	r9
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	60 97       	sbiw	r28, 0x10	; 16
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	2e 83       	std	Y+6, r18	; 0x06
    26fc:	3f 83       	std	Y+7, r19	; 0x07
    26fe:	48 87       	std	Y+8, r20	; 0x08
    2700:	59 87       	std	Y+9, r21	; 0x09
    2702:	6a 87       	std	Y+10, r22	; 0x0a
    2704:	7b 87       	std	Y+11, r23	; 0x0b
    2706:	8c 87       	std	Y+12, r24	; 0x0c
    2708:	9d 87       	std	Y+13, r25	; 0x0d
    270a:	1f 87       	std	Y+15, r17	; 0x0f
    270c:	0e 87       	std	Y+14, r16	; 0x0e
   enuTimer0Scaler_t enuScaler=TIMER0_STOP;
    270e:	1d 82       	std	Y+5, r1	; 0x05
   
   //check if the timer interrupts are enabled
   if (GET_BIT(TIMSK_R,TOIE0_B) || GET_BIT(TIMSK_R,OCIE0_B))
    2710:	e9 e5       	ldi	r30, 0x59	; 89
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	81 70       	andi	r24, 0x01	; 1
    271c:	90 70       	andi	r25, 0x00	; 0
    271e:	88 23       	and	r24, r24
    2720:	59 f4       	brne	.+22     	; 0x2738 <T0_Start+0x72>
    2722:	e9 e5       	ldi	r30, 0x59	; 89
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	82 70       	andi	r24, 0x02	; 2
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	95 95       	asr	r25
    2732:	87 95       	ror	r24
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	61 f0       	breq	.+24     	; 0x2750 <T0_Start+0x8a>
   {
      //check if the user has not sent a pointer to function to execute 
      if (pfCallback == NULLPTR)
    2738:	8e 85       	ldd	r24, Y+14	; 0x0e
    273a:	9f 85       	ldd	r25, Y+15	; 0x0f
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	11 f4       	brne	.+4      	; 0x2744 <T0_Start+0x7e>
      {
         //return error
         return E_ERROR;
    2740:	18 8a       	std	Y+16, r1	; 0x10
    2742:	3c c2       	rjmp	.+1144   	; 0x2bbc <T0_Start+0x4f6>
      }
      else
      {
         //else store this pointer to function in the global pointer to function for the ISR to be able to execute
         G_fptr=pfCallback;
    2744:	8e 85       	ldd	r24, Y+14	; 0x0e
    2746:	9f 85       	ldd	r25, Y+15	; 0x0f
    2748:	90 93 85 01 	sts	0x0185, r25
    274c:	80 93 84 01 	sts	0x0184, r24
      }
   }
   
    //if the user sent a 0 time delay
    if (u64TimerValue==0)
    2750:	8e 81       	ldd	r24, Y+6	; 0x06
    2752:	9f 81       	ldd	r25, Y+7	; 0x07
    2754:	89 2b       	or	r24, r25
    2756:	98 85       	ldd	r25, Y+8	; 0x08
    2758:	89 2b       	or	r24, r25
    275a:	99 85       	ldd	r25, Y+9	; 0x09
    275c:	89 2b       	or	r24, r25
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	89 2b       	or	r24, r25
    2762:	9b 85       	ldd	r25, Y+11	; 0x0b
    2764:	89 2b       	or	r24, r25
    2766:	9c 85       	ldd	r25, Y+12	; 0x0c
    2768:	89 2b       	or	r24, r25
    276a:	9d 85       	ldd	r25, Y+13	; 0x0d
    276c:	89 2b       	or	r24, r25
    276e:	88 23       	and	r24, r24
    2770:	11 f4       	brne	.+4      	; 0x2776 <T0_Start+0xb0>
    {
       //return an error
       return E_ERROR;
    2772:	18 8a       	std	Y+16, r1	; 0x10
    2774:	23 c2       	rjmp	.+1094   	; 0x2bbc <T0_Start+0x4f6>
    }
    
    //else select the appropriate timer prescaler depending on the time sent for the least number of overflows
    else if (u64TimerValue<=256)
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	88 23       	and	r24, r24
    277a:	69 f5       	brne	.+90     	; 0x27d6 <T0_Start+0x110>
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	88 23       	and	r24, r24
    2780:	39 f5       	brne	.+78     	; 0x27d0 <T0_Start+0x10a>
    2782:	8c 85       	ldd	r24, Y+12	; 0x0c
    2784:	88 23       	and	r24, r24
    2786:	39 f5       	brne	.+78     	; 0x27d6 <T0_Start+0x110>
    2788:	8c 85       	ldd	r24, Y+12	; 0x0c
    278a:	88 23       	and	r24, r24
    278c:	09 f5       	brne	.+66     	; 0x27d0 <T0_Start+0x10a>
    278e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2790:	88 23       	and	r24, r24
    2792:	09 f5       	brne	.+66     	; 0x27d6 <T0_Start+0x110>
    2794:	8b 85       	ldd	r24, Y+11	; 0x0b
    2796:	88 23       	and	r24, r24
    2798:	d9 f4       	brne	.+54     	; 0x27d0 <T0_Start+0x10a>
    279a:	8a 85       	ldd	r24, Y+10	; 0x0a
    279c:	88 23       	and	r24, r24
    279e:	d9 f4       	brne	.+54     	; 0x27d6 <T0_Start+0x110>
    27a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27a2:	88 23       	and	r24, r24
    27a4:	a9 f4       	brne	.+42     	; 0x27d0 <T0_Start+0x10a>
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	88 23       	and	r24, r24
    27aa:	a9 f4       	brne	.+42     	; 0x27d6 <T0_Start+0x110>
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	88 23       	and	r24, r24
    27b0:	79 f4       	brne	.+30     	; 0x27d0 <T0_Start+0x10a>
    27b2:	88 85       	ldd	r24, Y+8	; 0x08
    27b4:	88 23       	and	r24, r24
    27b6:	79 f4       	brne	.+30     	; 0x27d6 <T0_Start+0x110>
    27b8:	88 85       	ldd	r24, Y+8	; 0x08
    27ba:	88 23       	and	r24, r24
    27bc:	49 f4       	brne	.+18     	; 0x27d0 <T0_Start+0x10a>
    27be:	8f 81       	ldd	r24, Y+7	; 0x07
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	48 f4       	brcc	.+18     	; 0x27d6 <T0_Start+0x110>
    27c4:	8f 81       	ldd	r24, Y+7	; 0x07
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	19 f4       	brne	.+6      	; 0x27d0 <T0_Start+0x10a>
    27ca:	8e 81       	ldd	r24, Y+6	; 0x06
    27cc:	88 23       	and	r24, r24
    27ce:	19 f4       	brne	.+6      	; 0x27d6 <T0_Start+0x110>
    {
       enuScaler=TIMER0_SCALER_8;
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	c8 c0       	rjmp	.+400    	; 0x2966 <T0_Start+0x2a0>
    }                                   
    else if (u64TimerValue>256 && u64TimerValue<=2048)
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	88 23       	and	r24, r24
    27da:	81 f5       	brne	.+96     	; 0x283c <T0_Start+0x176>
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	88 23       	and	r24, r24
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <T0_Start+0x11e>
    27e2:	5c c0       	rjmp	.+184    	; 0x289c <T0_Start+0x1d6>
    27e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    27e6:	88 23       	and	r24, r24
    27e8:	49 f5       	brne	.+82     	; 0x283c <T0_Start+0x176>
    27ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    27ec:	88 23       	and	r24, r24
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <T0_Start+0x12c>
    27f0:	55 c0       	rjmp	.+170    	; 0x289c <T0_Start+0x1d6>
    27f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    27f4:	88 23       	and	r24, r24
    27f6:	11 f5       	brne	.+68     	; 0x283c <T0_Start+0x176>
    27f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27fa:	88 23       	and	r24, r24
    27fc:	09 f0       	breq	.+2      	; 0x2800 <T0_Start+0x13a>
    27fe:	4e c0       	rjmp	.+156    	; 0x289c <T0_Start+0x1d6>
    2800:	8a 85       	ldd	r24, Y+10	; 0x0a
    2802:	88 23       	and	r24, r24
    2804:	d9 f4       	brne	.+54     	; 0x283c <T0_Start+0x176>
    2806:	8a 85       	ldd	r24, Y+10	; 0x0a
    2808:	88 23       	and	r24, r24
    280a:	09 f0       	breq	.+2      	; 0x280e <T0_Start+0x148>
    280c:	47 c0       	rjmp	.+142    	; 0x289c <T0_Start+0x1d6>
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	88 23       	and	r24, r24
    2812:	a1 f4       	brne	.+40     	; 0x283c <T0_Start+0x176>
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	88 23       	and	r24, r24
    2818:	09 f0       	breq	.+2      	; 0x281c <T0_Start+0x156>
    281a:	40 c0       	rjmp	.+128    	; 0x289c <T0_Start+0x1d6>
    281c:	88 85       	ldd	r24, Y+8	; 0x08
    281e:	88 23       	and	r24, r24
    2820:	69 f4       	brne	.+26     	; 0x283c <T0_Start+0x176>
    2822:	88 85       	ldd	r24, Y+8	; 0x08
    2824:	88 23       	and	r24, r24
    2826:	09 f0       	breq	.+2      	; 0x282a <T0_Start+0x164>
    2828:	39 c0       	rjmp	.+114    	; 0x289c <T0_Start+0x1d6>
    282a:	8f 81       	ldd	r24, Y+7	; 0x07
    282c:	82 30       	cpi	r24, 0x02	; 2
    282e:	30 f4       	brcc	.+12     	; 0x283c <T0_Start+0x176>
    2830:	8f 81       	ldd	r24, Y+7	; 0x07
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	99 f5       	brne	.+102    	; 0x289c <T0_Start+0x1d6>
    2836:	8e 81       	ldd	r24, Y+6	; 0x06
    2838:	88 23       	and	r24, r24
    283a:	81 f1       	breq	.+96     	; 0x289c <T0_Start+0x1d6>
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	88 23       	and	r24, r24
    2840:	69 f5       	brne	.+90     	; 0x289c <T0_Start+0x1d6>
    2842:	8d 85       	ldd	r24, Y+13	; 0x0d
    2844:	88 23       	and	r24, r24
    2846:	39 f5       	brne	.+78     	; 0x2896 <T0_Start+0x1d0>
    2848:	8c 85       	ldd	r24, Y+12	; 0x0c
    284a:	88 23       	and	r24, r24
    284c:	39 f5       	brne	.+78     	; 0x289c <T0_Start+0x1d6>
    284e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2850:	88 23       	and	r24, r24
    2852:	09 f5       	brne	.+66     	; 0x2896 <T0_Start+0x1d0>
    2854:	8b 85       	ldd	r24, Y+11	; 0x0b
    2856:	88 23       	and	r24, r24
    2858:	09 f5       	brne	.+66     	; 0x289c <T0_Start+0x1d6>
    285a:	8b 85       	ldd	r24, Y+11	; 0x0b
    285c:	88 23       	and	r24, r24
    285e:	d9 f4       	brne	.+54     	; 0x2896 <T0_Start+0x1d0>
    2860:	8a 85       	ldd	r24, Y+10	; 0x0a
    2862:	88 23       	and	r24, r24
    2864:	d9 f4       	brne	.+54     	; 0x289c <T0_Start+0x1d6>
    2866:	8a 85       	ldd	r24, Y+10	; 0x0a
    2868:	88 23       	and	r24, r24
    286a:	a9 f4       	brne	.+42     	; 0x2896 <T0_Start+0x1d0>
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	88 23       	and	r24, r24
    2870:	a9 f4       	brne	.+42     	; 0x289c <T0_Start+0x1d6>
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	88 23       	and	r24, r24
    2876:	79 f4       	brne	.+30     	; 0x2896 <T0_Start+0x1d0>
    2878:	88 85       	ldd	r24, Y+8	; 0x08
    287a:	88 23       	and	r24, r24
    287c:	79 f4       	brne	.+30     	; 0x289c <T0_Start+0x1d6>
    287e:	88 85       	ldd	r24, Y+8	; 0x08
    2880:	88 23       	and	r24, r24
    2882:	49 f4       	brne	.+18     	; 0x2896 <T0_Start+0x1d0>
    2884:	8f 81       	ldd	r24, Y+7	; 0x07
    2886:	89 30       	cpi	r24, 0x09	; 9
    2888:	48 f4       	brcc	.+18     	; 0x289c <T0_Start+0x1d6>
    288a:	8f 81       	ldd	r24, Y+7	; 0x07
    288c:	88 30       	cpi	r24, 0x08	; 8
    288e:	19 f4       	brne	.+6      	; 0x2896 <T0_Start+0x1d0>
    2890:	8e 81       	ldd	r24, Y+6	; 0x06
    2892:	88 23       	and	r24, r24
    2894:	19 f4       	brne	.+6      	; 0x289c <T0_Start+0x1d6>
    {
       enuScaler=TIMER0_SCALER_64;
    2896:	83 e0       	ldi	r24, 0x03	; 3
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	65 c0       	rjmp	.+202    	; 0x2966 <T0_Start+0x2a0>
    }        
    else if (u64TimerValue>2048 && u64TimerValue<=8192)       
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	88 23       	and	r24, r24
    28a0:	81 f5       	brne	.+96     	; 0x2902 <T0_Start+0x23c>
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	88 23       	and	r24, r24
    28a6:	09 f0       	breq	.+2      	; 0x28aa <T0_Start+0x1e4>
    28a8:	5c c0       	rjmp	.+184    	; 0x2962 <T0_Start+0x29c>
    28aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ac:	88 23       	and	r24, r24
    28ae:	49 f5       	brne	.+82     	; 0x2902 <T0_Start+0x23c>
    28b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b2:	88 23       	and	r24, r24
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <T0_Start+0x1f2>
    28b6:	55 c0       	rjmp	.+170    	; 0x2962 <T0_Start+0x29c>
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	88 23       	and	r24, r24
    28bc:	11 f5       	brne	.+68     	; 0x2902 <T0_Start+0x23c>
    28be:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c0:	88 23       	and	r24, r24
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <T0_Start+0x200>
    28c4:	4e c0       	rjmp	.+156    	; 0x2962 <T0_Start+0x29c>
    28c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c8:	88 23       	and	r24, r24
    28ca:	d9 f4       	brne	.+54     	; 0x2902 <T0_Start+0x23c>
    28cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ce:	88 23       	and	r24, r24
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <T0_Start+0x20e>
    28d2:	47 c0       	rjmp	.+142    	; 0x2962 <T0_Start+0x29c>
    28d4:	89 85       	ldd	r24, Y+9	; 0x09
    28d6:	88 23       	and	r24, r24
    28d8:	a1 f4       	brne	.+40     	; 0x2902 <T0_Start+0x23c>
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	88 23       	and	r24, r24
    28de:	09 f0       	breq	.+2      	; 0x28e2 <T0_Start+0x21c>
    28e0:	40 c0       	rjmp	.+128    	; 0x2962 <T0_Start+0x29c>
    28e2:	88 85       	ldd	r24, Y+8	; 0x08
    28e4:	88 23       	and	r24, r24
    28e6:	69 f4       	brne	.+26     	; 0x2902 <T0_Start+0x23c>
    28e8:	88 85       	ldd	r24, Y+8	; 0x08
    28ea:	88 23       	and	r24, r24
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <T0_Start+0x22a>
    28ee:	39 c0       	rjmp	.+114    	; 0x2962 <T0_Start+0x29c>
    28f0:	8f 81       	ldd	r24, Y+7	; 0x07
    28f2:	89 30       	cpi	r24, 0x09	; 9
    28f4:	30 f4       	brcc	.+12     	; 0x2902 <T0_Start+0x23c>
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	88 30       	cpi	r24, 0x08	; 8
    28fa:	99 f5       	brne	.+102    	; 0x2962 <T0_Start+0x29c>
    28fc:	8e 81       	ldd	r24, Y+6	; 0x06
    28fe:	88 23       	and	r24, r24
    2900:	81 f1       	breq	.+96     	; 0x2962 <T0_Start+0x29c>
    2902:	8d 85       	ldd	r24, Y+13	; 0x0d
    2904:	88 23       	and	r24, r24
    2906:	69 f5       	brne	.+90     	; 0x2962 <T0_Start+0x29c>
    2908:	8d 85       	ldd	r24, Y+13	; 0x0d
    290a:	88 23       	and	r24, r24
    290c:	39 f5       	brne	.+78     	; 0x295c <T0_Start+0x296>
    290e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2910:	88 23       	and	r24, r24
    2912:	39 f5       	brne	.+78     	; 0x2962 <T0_Start+0x29c>
    2914:	8c 85       	ldd	r24, Y+12	; 0x0c
    2916:	88 23       	and	r24, r24
    2918:	09 f5       	brne	.+66     	; 0x295c <T0_Start+0x296>
    291a:	8b 85       	ldd	r24, Y+11	; 0x0b
    291c:	88 23       	and	r24, r24
    291e:	09 f5       	brne	.+66     	; 0x2962 <T0_Start+0x29c>
    2920:	8b 85       	ldd	r24, Y+11	; 0x0b
    2922:	88 23       	and	r24, r24
    2924:	d9 f4       	brne	.+54     	; 0x295c <T0_Start+0x296>
    2926:	8a 85       	ldd	r24, Y+10	; 0x0a
    2928:	88 23       	and	r24, r24
    292a:	d9 f4       	brne	.+54     	; 0x2962 <T0_Start+0x29c>
    292c:	8a 85       	ldd	r24, Y+10	; 0x0a
    292e:	88 23       	and	r24, r24
    2930:	a9 f4       	brne	.+42     	; 0x295c <T0_Start+0x296>
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	88 23       	and	r24, r24
    2936:	a9 f4       	brne	.+42     	; 0x2962 <T0_Start+0x29c>
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	88 23       	and	r24, r24
    293c:	79 f4       	brne	.+30     	; 0x295c <T0_Start+0x296>
    293e:	88 85       	ldd	r24, Y+8	; 0x08
    2940:	88 23       	and	r24, r24
    2942:	79 f4       	brne	.+30     	; 0x2962 <T0_Start+0x29c>
    2944:	88 85       	ldd	r24, Y+8	; 0x08
    2946:	88 23       	and	r24, r24
    2948:	49 f4       	brne	.+18     	; 0x295c <T0_Start+0x296>
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	81 32       	cpi	r24, 0x21	; 33
    294e:	48 f4       	brcc	.+18     	; 0x2962 <T0_Start+0x29c>
    2950:	8f 81       	ldd	r24, Y+7	; 0x07
    2952:	80 32       	cpi	r24, 0x20	; 32
    2954:	19 f4       	brne	.+6      	; 0x295c <T0_Start+0x296>
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	88 23       	and	r24, r24
    295a:	19 f4       	brne	.+6      	; 0x2962 <T0_Start+0x29c>
    {
       enuScaler=TIMER0_SCALER_256;   
    295c:	84 e0       	ldi	r24, 0x04	; 4
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <T0_Start+0x2a0>
    }
    else                                                      
    {
       enuScaler=TIMER0_SCALER_1024;
    2962:	85 e0       	ldi	r24, 0x05	; 5
    2964:	8d 83       	std	Y+5, r24	; 0x05
    }
    
   //initialize the timer in normal mode with the new prescaler 
   T0_Init(TIMER0_NORMAL_MODE,enuScaler);
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	6d 81       	ldd	r22, Y+5	; 0x05
    296a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <T0_Init>
    
    
    
   //calculate tick time of the selected prescaler
   uint32_t u32TimerFreq=F_CPU/Gu16_T0Prescaler;
    296e:	80 91 97 01 	lds	r24, 0x0197
    2972:	90 91 98 01 	lds	r25, 0x0198
    2976:	9c 01       	movw	r18, r24
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	92 e1       	ldi	r25, 0x12	; 18
    2980:	aa e7       	ldi	r26, 0x7A	; 122
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
    298c:	da 01       	movw	r26, r20
    298e:	c9 01       	movw	r24, r18
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	ab 83       	std	Y+3, r26	; 0x03
    2996:	bc 83       	std	Y+4, r27	; 0x04
   
   //calculate the number of overflows required to reach the selected time
   Gu32_T0MaxOVCount=((u64TimerValue*u32TimerFreq)/(T0_TICKS*USEC_TO_SEC));
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	ab 81       	ldd	r26, Y+3	; 0x03
    299e:	bc 81       	ldd	r27, Y+4	; 0x04
    29a0:	5c 01       	movw	r10, r24
    29a2:	6d 01       	movw	r12, r26
    29a4:	ee 24       	eor	r14, r14
    29a6:	ff 24       	eor	r15, r15
    29a8:	87 01       	movw	r16, r14
    29aa:	2a 2d       	mov	r18, r10
    29ac:	3b 2d       	mov	r19, r11
    29ae:	4c 2d       	mov	r20, r12
    29b0:	5d 2d       	mov	r21, r13
    29b2:	6e 2d       	mov	r22, r14
    29b4:	7f 2d       	mov	r23, r15
    29b6:	80 2f       	mov	r24, r16
    29b8:	91 2f       	mov	r25, r17
    29ba:	ae 80       	ldd	r10, Y+6	; 0x06
    29bc:	bf 80       	ldd	r11, Y+7	; 0x07
    29be:	c8 84       	ldd	r12, Y+8	; 0x08
    29c0:	d9 84       	ldd	r13, Y+9	; 0x09
    29c2:	ea 84       	ldd	r14, Y+10	; 0x0a
    29c4:	fb 84       	ldd	r15, Y+11	; 0x0b
    29c6:	0c 85       	ldd	r16, Y+12	; 0x0c
    29c8:	1d 85       	ldd	r17, Y+13	; 0x0d
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    29ce:	22 2e       	mov	r2, r18
    29d0:	33 2e       	mov	r3, r19
    29d2:	44 2e       	mov	r4, r20
    29d4:	55 2e       	mov	r5, r21
    29d6:	66 2e       	mov	r6, r22
    29d8:	77 2e       	mov	r7, r23
    29da:	88 2e       	mov	r8, r24
    29dc:	99 2e       	mov	r9, r25
    29de:	a2 2c       	mov	r10, r2
    29e0:	b3 2c       	mov	r11, r3
    29e2:	c4 2c       	mov	r12, r4
    29e4:	d5 2c       	mov	r13, r5
    29e6:	e6 2c       	mov	r14, r6
    29e8:	f7 2c       	mov	r15, r7
    29ea:	08 2d       	mov	r16, r8
    29ec:	19 2d       	mov	r17, r9
    29ee:	2a 2d       	mov	r18, r10
    29f0:	3b 2d       	mov	r19, r11
    29f2:	4c 2d       	mov	r20, r12
    29f4:	5d 2d       	mov	r21, r13
    29f6:	6e 2d       	mov	r22, r14
    29f8:	7f 2d       	mov	r23, r15
    29fa:	80 2f       	mov	r24, r16
    29fc:	91 2f       	mov	r25, r17
    29fe:	aa 24       	eor	r10, r10
    2a00:	bb 24       	eor	r11, r11
    2a02:	68 94       	set
    2a04:	b6 f8       	bld	r11, 6
    2a06:	0f 2e       	mov	r0, r31
    2a08:	f2 e4       	ldi	r31, 0x42	; 66
    2a0a:	cf 2e       	mov	r12, r31
    2a0c:	f0 2d       	mov	r31, r0
    2a0e:	0f 2e       	mov	r0, r31
    2a10:	ff e0       	ldi	r31, 0x0F	; 15
    2a12:	df 2e       	mov	r13, r31
    2a14:	f0 2d       	mov	r31, r0
    2a16:	ee 24       	eor	r14, r14
    2a18:	ff 24       	eor	r15, r15
    2a1a:	00 e0       	ldi	r16, 0x00	; 0
    2a1c:	10 e0       	ldi	r17, 0x00	; 0
    2a1e:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    2a22:	a2 2e       	mov	r10, r18
    2a24:	b3 2e       	mov	r11, r19
    2a26:	c4 2e       	mov	r12, r20
    2a28:	d5 2e       	mov	r13, r21
    2a2a:	e6 2e       	mov	r14, r22
    2a2c:	f7 2e       	mov	r15, r23
    2a2e:	08 2f       	mov	r16, r24
    2a30:	19 2f       	mov	r17, r25
    2a32:	2a 2d       	mov	r18, r10
    2a34:	3b 2d       	mov	r19, r11
    2a36:	4c 2d       	mov	r20, r12
    2a38:	5d 2d       	mov	r21, r13
    2a3a:	6e 2d       	mov	r22, r14
    2a3c:	7f 2d       	mov	r23, r15
    2a3e:	80 2f       	mov	r24, r16
    2a40:	91 2f       	mov	r25, r17
    2a42:	20 93 86 01 	sts	0x0186, r18
    2a46:	30 93 87 01 	sts	0x0187, r19
    2a4a:	40 93 88 01 	sts	0x0188, r20
    2a4e:	50 93 89 01 	sts	0x0189, r21
    2a52:	60 93 8a 01 	sts	0x018A, r22
    2a56:	70 93 8b 01 	sts	0x018B, r23
    2a5a:	80 93 8c 01 	sts	0x018C, r24
    2a5e:	90 93 8d 01 	sts	0x018D, r25
   
   //calculate the time required to setup  the last overflow iteration
   Gu32_T0LastOVTicks=((u64TimerValue*u32TimerFreq)/USEC_TO_SEC)-(Gu32_T0MaxOVCount*T0_TICKS);
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	ab 81       	ldd	r26, Y+3	; 0x03
    2a68:	bc 81       	ldd	r27, Y+4	; 0x04
    2a6a:	5c 01       	movw	r10, r24
    2a6c:	6d 01       	movw	r12, r26
    2a6e:	ee 24       	eor	r14, r14
    2a70:	ff 24       	eor	r15, r15
    2a72:	87 01       	movw	r16, r14
    2a74:	2a 2d       	mov	r18, r10
    2a76:	3b 2d       	mov	r19, r11
    2a78:	4c 2d       	mov	r20, r12
    2a7a:	5d 2d       	mov	r21, r13
    2a7c:	6e 2d       	mov	r22, r14
    2a7e:	7f 2d       	mov	r23, r15
    2a80:	80 2f       	mov	r24, r16
    2a82:	91 2f       	mov	r25, r17
    2a84:	ae 80       	ldd	r10, Y+6	; 0x06
    2a86:	bf 80       	ldd	r11, Y+7	; 0x07
    2a88:	c8 84       	ldd	r12, Y+8	; 0x08
    2a8a:	d9 84       	ldd	r13, Y+9	; 0x09
    2a8c:	ea 84       	ldd	r14, Y+10	; 0x0a
    2a8e:	fb 84       	ldd	r15, Y+11	; 0x0b
    2a90:	0c 85       	ldd	r16, Y+12	; 0x0c
    2a92:	1d 85       	ldd	r17, Y+13	; 0x0d
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    2a98:	22 2e       	mov	r2, r18
    2a9a:	33 2e       	mov	r3, r19
    2a9c:	44 2e       	mov	r4, r20
    2a9e:	55 2e       	mov	r5, r21
    2aa0:	66 2e       	mov	r6, r22
    2aa2:	77 2e       	mov	r7, r23
    2aa4:	88 2e       	mov	r8, r24
    2aa6:	99 2e       	mov	r9, r25
    2aa8:	a2 2c       	mov	r10, r2
    2aaa:	b3 2c       	mov	r11, r3
    2aac:	c4 2c       	mov	r12, r4
    2aae:	d5 2c       	mov	r13, r5
    2ab0:	e6 2c       	mov	r14, r6
    2ab2:	f7 2c       	mov	r15, r7
    2ab4:	08 2d       	mov	r16, r8
    2ab6:	19 2d       	mov	r17, r9
    2ab8:	2a 2d       	mov	r18, r10
    2aba:	3b 2d       	mov	r19, r11
    2abc:	4c 2d       	mov	r20, r12
    2abe:	5d 2d       	mov	r21, r13
    2ac0:	6e 2d       	mov	r22, r14
    2ac2:	7f 2d       	mov	r23, r15
    2ac4:	80 2f       	mov	r24, r16
    2ac6:	91 2f       	mov	r25, r17
    2ac8:	aa 24       	eor	r10, r10
    2aca:	68 94       	set
    2acc:	a6 f8       	bld	r10, 6
    2ace:	0f 2e       	mov	r0, r31
    2ad0:	f2 e4       	ldi	r31, 0x42	; 66
    2ad2:	bf 2e       	mov	r11, r31
    2ad4:	f0 2d       	mov	r31, r0
    2ad6:	0f 2e       	mov	r0, r31
    2ad8:	ff e0       	ldi	r31, 0x0F	; 15
    2ada:	cf 2e       	mov	r12, r31
    2adc:	f0 2d       	mov	r31, r0
    2ade:	dd 24       	eor	r13, r13
    2ae0:	ee 24       	eor	r14, r14
    2ae2:	ff 24       	eor	r15, r15
    2ae4:	00 e0       	ldi	r16, 0x00	; 0
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    2aec:	a2 2e       	mov	r10, r18
    2aee:	b3 2e       	mov	r11, r19
    2af0:	c4 2e       	mov	r12, r20
    2af2:	d5 2e       	mov	r13, r21
    2af4:	e6 2e       	mov	r14, r22
    2af6:	f7 2e       	mov	r15, r23
    2af8:	08 2f       	mov	r16, r24
    2afa:	19 2f       	mov	r17, r25
    2afc:	2a 2d       	mov	r18, r10
    2afe:	3b 2d       	mov	r19, r11
    2b00:	4c 2d       	mov	r20, r12
    2b02:	5d 2d       	mov	r21, r13
    2b04:	6e 2d       	mov	r22, r14
    2b06:	7f 2d       	mov	r23, r15
    2b08:	80 2f       	mov	r24, r16
    2b0a:	91 2f       	mov	r25, r17
    2b0c:	92 2e       	mov	r9, r18
    2b0e:	a0 90 86 01 	lds	r10, 0x0186
    2b12:	b0 90 87 01 	lds	r11, 0x0187
    2b16:	c0 90 88 01 	lds	r12, 0x0188
    2b1a:	d0 90 89 01 	lds	r13, 0x0189
    2b1e:	e0 90 8a 01 	lds	r14, 0x018A
    2b22:	f0 90 8b 01 	lds	r15, 0x018B
    2b26:	00 91 8c 01 	lds	r16, 0x018C
    2b2a:	10 91 8d 01 	lds	r17, 0x018D
    2b2e:	2a 2d       	mov	r18, r10
    2b30:	3b 2d       	mov	r19, r11
    2b32:	4c 2d       	mov	r20, r12
    2b34:	5d 2d       	mov	r21, r13
    2b36:	6e 2d       	mov	r22, r14
    2b38:	7f 2d       	mov	r23, r15
    2b3a:	80 2f       	mov	r24, r16
    2b3c:	91 2f       	mov	r25, r17
    2b3e:	08 e0       	ldi	r16, 0x08	; 8
    2b40:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    2b44:	a2 2e       	mov	r10, r18
    2b46:	b3 2e       	mov	r11, r19
    2b48:	c4 2e       	mov	r12, r20
    2b4a:	d5 2e       	mov	r13, r21
    2b4c:	e6 2e       	mov	r14, r22
    2b4e:	f7 2e       	mov	r15, r23
    2b50:	08 2f       	mov	r16, r24
    2b52:	19 2f       	mov	r17, r25
    2b54:	2a 2d       	mov	r18, r10
    2b56:	3b 2d       	mov	r19, r11
    2b58:	4c 2d       	mov	r20, r12
    2b5a:	5d 2d       	mov	r21, r13
    2b5c:	6e 2d       	mov	r22, r14
    2b5e:	7f 2d       	mov	r23, r15
    2b60:	80 2f       	mov	r24, r16
    2b62:	91 2f       	mov	r25, r17
    2b64:	82 2f       	mov	r24, r18
    2b66:	99 2d       	mov	r25, r9
    2b68:	98 1b       	sub	r25, r24
    2b6a:	89 2f       	mov	r24, r25
    2b6c:	80 93 96 01 	sts	0x0196, r24

   
   //if the time can be achieved without overflows
   if (Gu32_T0MaxOVCount==0)
    2b70:	20 91 86 01 	lds	r18, 0x0186
    2b74:	30 91 87 01 	lds	r19, 0x0187
    2b78:	40 91 88 01 	lds	r20, 0x0188
    2b7c:	50 91 89 01 	lds	r21, 0x0189
    2b80:	60 91 8a 01 	lds	r22, 0x018A
    2b84:	70 91 8b 01 	lds	r23, 0x018B
    2b88:	80 91 8c 01 	lds	r24, 0x018C
    2b8c:	90 91 8d 01 	lds	r25, 0x018D
    2b90:	e2 2f       	mov	r30, r18
    2b92:	e3 2b       	or	r30, r19
    2b94:	e4 2b       	or	r30, r20
    2b96:	e5 2b       	or	r30, r21
    2b98:	e6 2b       	or	r30, r22
    2b9a:	e7 2b       	or	r30, r23
    2b9c:	e8 2b       	or	r30, r24
    2b9e:	e9 2b       	or	r30, r25
    2ba0:	ee 23       	and	r30, r30
    2ba2:	39 f4       	brne	.+14     	; 0x2bb2 <T0_Start+0x4ec>
   {
      //set the timer value to overflow on the exact timing
      TCNT0_R= (T0_TICKS-Gu32_T0LastOVTicks);
    2ba4:	e2 e5       	ldi	r30, 0x52	; 82
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 91 96 01 	lds	r24, 0x0196
    2bac:	81 95       	neg	r24
    2bae:	80 83       	st	Z, r24
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <T0_Start+0x4f2>
   }
   else
   {
      //else, set the overflow to 0
      TCNT0_R=0;
    2bb2:	e2 e5       	ldi	r30, 0x52	; 82
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	10 82       	st	Z, r1
   }
   
   
   
   //return E_OK state
   return E_OK;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	88 8b       	std	Y+16, r24	; 0x10
    2bbc:	88 89       	ldd	r24, Y+16	; 0x10
}
    2bbe:	60 96       	adiw	r28, 0x10	; 16
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	f8 94       	cli
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	ef 90       	pop	r14
    2bd6:	df 90       	pop	r13
    2bd8:	cf 90       	pop	r12
    2bda:	bf 90       	pop	r11
    2bdc:	af 90       	pop	r10
    2bde:	9f 90       	pop	r9
    2be0:	8f 90       	pop	r8
    2be2:	7f 90       	pop	r7
    2be4:	6f 90       	pop	r6
    2be6:	5f 90       	pop	r5
    2be8:	4f 90       	pop	r4
    2bea:	3f 90       	pop	r3
    2bec:	2f 90       	pop	r2
    2bee:	08 95       	ret

00002bf0 <T0_Stop>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to stop the timer if running
************************************************************************************/
enuErrorStatus_t T0_Stop(void)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
   //turn off all timer interrupts
   T0_OV_InterruptDisable();
    2bf8:	0e 94 36 13 	call	0x266c	; 0x266c <T0_OV_InterruptDisable>
   T0_OC_InterruptDisable();
    2bfc:	0e 94 54 13 	call	0x26a8	; 0x26a8 <T0_OC_InterruptDisable>
   //initialize the timer with no clock to stop it
   T0_Init(TIMER0_NORMAL_MODE,TIMER0_STOP);
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	0e 94 e5 11 	call	0x23ca	; 0x23ca <T0_Init>
   //clear the timer overflow flag
   SET_BIT(TIFR_R,TOV0_B);
    2c08:	a8 e5       	ldi	r26, 0x58	; 88
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e8 e5       	ldi	r30, 0x58	; 88
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	81 60       	ori	r24, 0x01	; 1
    2c14:	8c 93       	st	X, r24
   
   //reset all global variables
   Gu32_T0MaxOVCount=0;
    2c16:	10 92 86 01 	sts	0x0186, r1
    2c1a:	10 92 87 01 	sts	0x0187, r1
    2c1e:	10 92 88 01 	sts	0x0188, r1
    2c22:	10 92 89 01 	sts	0x0189, r1
    2c26:	10 92 8a 01 	sts	0x018A, r1
    2c2a:	10 92 8b 01 	sts	0x018B, r1
    2c2e:	10 92 8c 01 	sts	0x018C, r1
    2c32:	10 92 8d 01 	sts	0x018D, r1
   Gu32_T0LastOVTicks=0;
    2c36:	10 92 96 01 	sts	0x0196, r1
   Gu32_T0CurrentOVCount=0;
    2c3a:	10 92 8e 01 	sts	0x018E, r1
    2c3e:	10 92 8f 01 	sts	0x018F, r1
    2c42:	10 92 90 01 	sts	0x0190, r1
    2c46:	10 92 91 01 	sts	0x0191, r1
    2c4a:	10 92 92 01 	sts	0x0192, r1
    2c4e:	10 92 93 01 	sts	0x0193, r1
    2c52:	10 92 94 01 	sts	0x0194, r1
    2c56:	10 92 95 01 	sts	0x0195, r1
   
   //return E_OK state
   return E_OK;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
}
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <T0_GetStatus>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=time's up or 0=timer is still running
* Description: A function to check if a previously set up timer is still running or not
************************************************************************************/
enuErrorStatus_t T0_GetStatus(void)
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	c7 57       	subi	r28, 0x77	; 119
    2c6c:	d0 40       	sbci	r29, 0x00	; 0
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
      //if the current overflow value is less than the total overflows value
      if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
    2c78:	80 91 8e 01 	lds	r24, 0x018E
    2c7c:	8a a7       	std	Y+42, r24	; 0x2a
    2c7e:	90 91 8f 01 	lds	r25, 0x018F
    2c82:	9b a7       	std	Y+43, r25	; 0x2b
    2c84:	80 91 90 01 	lds	r24, 0x0190
    2c88:	8c a7       	std	Y+44, r24	; 0x2c
    2c8a:	90 91 91 01 	lds	r25, 0x0191
    2c8e:	9d a7       	std	Y+45, r25	; 0x2d
    2c90:	80 91 92 01 	lds	r24, 0x0192
    2c94:	8e a7       	std	Y+46, r24	; 0x2e
    2c96:	90 91 93 01 	lds	r25, 0x0193
    2c9a:	9f a7       	std	Y+47, r25	; 0x2f
    2c9c:	80 91 94 01 	lds	r24, 0x0194
    2ca0:	88 ab       	std	Y+48, r24	; 0x30
    2ca2:	90 91 95 01 	lds	r25, 0x0195
    2ca6:	99 ab       	std	Y+49, r25	; 0x31
    2ca8:	80 91 86 01 	lds	r24, 0x0186
    2cac:	8a a3       	std	Y+34, r24	; 0x22
    2cae:	90 91 87 01 	lds	r25, 0x0187
    2cb2:	9b a3       	std	Y+35, r25	; 0x23
    2cb4:	80 91 88 01 	lds	r24, 0x0188
    2cb8:	8c a3       	std	Y+36, r24	; 0x24
    2cba:	90 91 89 01 	lds	r25, 0x0189
    2cbe:	9d a3       	std	Y+37, r25	; 0x25
    2cc0:	80 91 8a 01 	lds	r24, 0x018A
    2cc4:	8e a3       	std	Y+38, r24	; 0x26
    2cc6:	90 91 8b 01 	lds	r25, 0x018B
    2cca:	9f a3       	std	Y+39, r25	; 0x27
    2ccc:	80 91 8c 01 	lds	r24, 0x018C
    2cd0:	88 a7       	std	Y+40, r24	; 0x28
    2cd2:	90 91 8d 01 	lds	r25, 0x018D
    2cd6:	99 a7       	std	Y+41, r25	; 0x29
    2cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    2cda:	99 a9       	ldd	r25, Y+49	; 0x31
    2cdc:	98 17       	cp	r25, r24
    2cde:	08 f4       	brcc	.+2      	; 0x2ce2 <T0_GetStatus+0x80>
    2ce0:	40 c0       	rjmp	.+128    	; 0x2d62 <T0_GetStatus+0x100>
    2ce2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ce4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ce6:	89 17       	cp	r24, r25
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <T0_GetStatus+0x8a>
    2cea:	df c1       	rjmp	.+958    	; 0x30aa <T0_GetStatus+0x448>
    2cec:	88 a5       	ldd	r24, Y+40	; 0x28
    2cee:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf0:	98 17       	cp	r25, r24
    2cf2:	b8 f1       	brcs	.+110    	; 0x2d62 <T0_GetStatus+0x100>
    2cf4:	88 a5       	ldd	r24, Y+40	; 0x28
    2cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf8:	89 17       	cp	r24, r25
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <T0_GetStatus+0x9c>
    2cfc:	d6 c1       	rjmp	.+940    	; 0x30aa <T0_GetStatus+0x448>
    2cfe:	8f a1       	ldd	r24, Y+39	; 0x27
    2d00:	9f a5       	ldd	r25, Y+47	; 0x2f
    2d02:	98 17       	cp	r25, r24
    2d04:	70 f1       	brcs	.+92     	; 0x2d62 <T0_GetStatus+0x100>
    2d06:	8f a1       	ldd	r24, Y+39	; 0x27
    2d08:	9f a5       	ldd	r25, Y+47	; 0x2f
    2d0a:	89 17       	cp	r24, r25
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <T0_GetStatus+0xae>
    2d0e:	cd c1       	rjmp	.+922    	; 0x30aa <T0_GetStatus+0x448>
    2d10:	8e a1       	ldd	r24, Y+38	; 0x26
    2d12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d14:	98 17       	cp	r25, r24
    2d16:	28 f1       	brcs	.+74     	; 0x2d62 <T0_GetStatus+0x100>
    2d18:	8e a1       	ldd	r24, Y+38	; 0x26
    2d1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d1c:	89 17       	cp	r24, r25
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <T0_GetStatus+0xc0>
    2d20:	c4 c1       	rjmp	.+904    	; 0x30aa <T0_GetStatus+0x448>
    2d22:	8d a1       	ldd	r24, Y+37	; 0x25
    2d24:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d26:	98 17       	cp	r25, r24
    2d28:	e0 f0       	brcs	.+56     	; 0x2d62 <T0_GetStatus+0x100>
    2d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2d2e:	89 17       	cp	r24, r25
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <T0_GetStatus+0xd2>
    2d32:	bb c1       	rjmp	.+886    	; 0x30aa <T0_GetStatus+0x448>
    2d34:	8c a1       	ldd	r24, Y+36	; 0x24
    2d36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d38:	98 17       	cp	r25, r24
    2d3a:	98 f0       	brcs	.+38     	; 0x2d62 <T0_GetStatus+0x100>
    2d3c:	8c a1       	ldd	r24, Y+36	; 0x24
    2d3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d40:	89 17       	cp	r24, r25
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <T0_GetStatus+0xe4>
    2d44:	b2 c1       	rjmp	.+868    	; 0x30aa <T0_GetStatus+0x448>
    2d46:	8b a1       	ldd	r24, Y+35	; 0x23
    2d48:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d4a:	98 17       	cp	r25, r24
    2d4c:	50 f0       	brcs	.+20     	; 0x2d62 <T0_GetStatus+0x100>
    2d4e:	8b a1       	ldd	r24, Y+35	; 0x23
    2d50:	9b a5       	ldd	r25, Y+43	; 0x2b
    2d52:	89 17       	cp	r24, r25
    2d54:	09 f0       	breq	.+2      	; 0x2d58 <T0_GetStatus+0xf6>
    2d56:	a9 c1       	rjmp	.+850    	; 0x30aa <T0_GetStatus+0x448>
    2d58:	8a a1       	ldd	r24, Y+34	; 0x22
    2d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d5c:	98 17       	cp	r25, r24
    2d5e:	08 f0       	brcs	.+2      	; 0x2d62 <T0_GetStatus+0x100>
    2d60:	a4 c1       	rjmp	.+840    	; 0x30aa <T0_GetStatus+0x448>
      {
         //check the over flow flag
         if (GET_BIT(TIFR_R,TOV0_B))
    2d62:	e8 e5       	ldi	r30, 0x58	; 88
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	81 70       	andi	r24, 0x01	; 1
    2d6e:	90 70       	andi	r25, 0x00	; 0
    2d70:	88 23       	and	r24, r24
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <T0_GetStatus+0x114>
    2d74:	04 c4       	rjmp	.+2056   	; 0x357e <T0_GetStatus+0x91c>
         {
            //if set, clear it
            SET_BIT(TIFR_R,TOV0_B);
    2d76:	a8 e5       	ldi	r26, 0x58	; 88
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e8 e5       	ldi	r30, 0x58	; 88
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	81 60       	ori	r24, 0x01	; 1
    2d82:	8c 93       	st	X, r24
            //and increase the overflow counter
            Gu32_T0CurrentOVCount++;
    2d84:	80 91 8e 01 	lds	r24, 0x018E
    2d88:	8a 8f       	std	Y+26, r24	; 0x1a
    2d8a:	90 91 8f 01 	lds	r25, 0x018F
    2d8e:	9b 8f       	std	Y+27, r25	; 0x1b
    2d90:	80 91 90 01 	lds	r24, 0x0190
    2d94:	8c 8f       	std	Y+28, r24	; 0x1c
    2d96:	90 91 91 01 	lds	r25, 0x0191
    2d9a:	9d 8f       	std	Y+29, r25	; 0x1d
    2d9c:	80 91 92 01 	lds	r24, 0x0192
    2da0:	8e 8f       	std	Y+30, r24	; 0x1e
    2da2:	90 91 93 01 	lds	r25, 0x0193
    2da6:	9f 8f       	std	Y+31, r25	; 0x1f
    2da8:	80 91 94 01 	lds	r24, 0x0194
    2dac:	88 a3       	std	Y+32, r24	; 0x20
    2dae:	90 91 95 01 	lds	r25, 0x0195
    2db2:	99 a3       	std	Y+33, r25	; 0x21
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	8a ab       	std	Y+50, r24	; 0x32
    2db8:	1b aa       	std	Y+51, r1	; 0x33
    2dba:	1c aa       	std	Y+52, r1	; 0x34
    2dbc:	1d aa       	std	Y+53, r1	; 0x35
    2dbe:	1e aa       	std	Y+54, r1	; 0x36
    2dc0:	1f aa       	std	Y+55, r1	; 0x37
    2dc2:	18 ae       	std	Y+56, r1	; 0x38
    2dc4:	19 ae       	std	Y+57, r1	; 0x39
    2dc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dc8:	8a a9       	ldd	r24, Y+50	; 0x32
    2dca:	98 0f       	add	r25, r24
    2dcc:	9a af       	std	Y+58, r25	; 0x3a
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	23 96       	adiw	r28, 0x03	; 3
    2dd2:	9f af       	std	Y+63, r25	; 0x3f
    2dd4:	23 97       	sbiw	r28, 0x03	; 3
    2dd6:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dda:	89 17       	cp	r24, r25
    2ddc:	18 f0       	brcs	.+6      	; 0x2de4 <T0_GetStatus+0x182>
    2dde:	23 96       	adiw	r28, 0x03	; 3
    2de0:	1f ae       	std	Y+63, r1	; 0x3f
    2de2:	23 97       	sbiw	r28, 0x03	; 3
    2de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de6:	9b a9       	ldd	r25, Y+51	; 0x33
    2de8:	89 0f       	add	r24, r25
    2dea:	8b af       	std	Y+59, r24	; 0x3b
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	24 96       	adiw	r28, 0x04	; 4
    2df0:	8f af       	std	Y+63, r24	; 0x3f
    2df2:	24 97       	sbiw	r28, 0x04	; 4
    2df4:	9b ad       	ldd	r25, Y+59	; 0x3b
    2df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df8:	98 17       	cp	r25, r24
    2dfa:	18 f0       	brcs	.+6      	; 0x2e02 <T0_GetStatus+0x1a0>
    2dfc:	24 96       	adiw	r28, 0x04	; 4
    2dfe:	1f ae       	std	Y+63, r1	; 0x3f
    2e00:	24 97       	sbiw	r28, 0x04	; 4
    2e02:	23 96       	adiw	r28, 0x03	; 3
    2e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e06:	23 97       	sbiw	r28, 0x03	; 3
    2e08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e0a:	98 0f       	add	r25, r24
    2e0c:	25 96       	adiw	r28, 0x05	; 5
    2e0e:	9f af       	std	Y+63, r25	; 0x3f
    2e10:	25 97       	sbiw	r28, 0x05	; 5
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	26 96       	adiw	r28, 0x06	; 6
    2e16:	9f af       	std	Y+63, r25	; 0x3f
    2e18:	26 97       	sbiw	r28, 0x06	; 6
    2e1a:	25 96       	adiw	r28, 0x05	; 5
    2e1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e1e:	25 97       	sbiw	r28, 0x05	; 5
    2e20:	9b ad       	ldd	r25, Y+59	; 0x3b
    2e22:	89 17       	cp	r24, r25
    2e24:	18 f0       	brcs	.+6      	; 0x2e2c <T0_GetStatus+0x1ca>
    2e26:	26 96       	adiw	r28, 0x06	; 6
    2e28:	1f ae       	std	Y+63, r1	; 0x3f
    2e2a:	26 97       	sbiw	r28, 0x06	; 6
    2e2c:	24 96       	adiw	r28, 0x04	; 4
    2e2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e30:	24 97       	sbiw	r28, 0x04	; 4
    2e32:	26 96       	adiw	r28, 0x06	; 6
    2e34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e36:	26 97       	sbiw	r28, 0x06	; 6
    2e38:	89 2b       	or	r24, r25
    2e3a:	24 96       	adiw	r28, 0x04	; 4
    2e3c:	8f af       	std	Y+63, r24	; 0x3f
    2e3e:	24 97       	sbiw	r28, 0x04	; 4
    2e40:	25 96       	adiw	r28, 0x05	; 5
    2e42:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e44:	25 97       	sbiw	r28, 0x05	; 5
    2e46:	8b af       	std	Y+59, r24	; 0x3b
    2e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e4a:	8c a9       	ldd	r24, Y+52	; 0x34
    2e4c:	98 0f       	add	r25, r24
    2e4e:	9c af       	std	Y+60, r25	; 0x3c
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	27 96       	adiw	r28, 0x07	; 7
    2e54:	9f af       	std	Y+63, r25	; 0x3f
    2e56:	27 97       	sbiw	r28, 0x07	; 7
    2e58:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5c:	89 17       	cp	r24, r25
    2e5e:	18 f0       	brcs	.+6      	; 0x2e66 <T0_GetStatus+0x204>
    2e60:	27 96       	adiw	r28, 0x07	; 7
    2e62:	1f ae       	std	Y+63, r1	; 0x3f
    2e64:	27 97       	sbiw	r28, 0x07	; 7
    2e66:	24 96       	adiw	r28, 0x04	; 4
    2e68:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e6a:	24 97       	sbiw	r28, 0x04	; 4
    2e6c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e6e:	89 0f       	add	r24, r25
    2e70:	28 96       	adiw	r28, 0x08	; 8
    2e72:	8f af       	std	Y+63, r24	; 0x3f
    2e74:	28 97       	sbiw	r28, 0x08	; 8
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	29 96       	adiw	r28, 0x09	; 9
    2e7a:	8f af       	std	Y+63, r24	; 0x3f
    2e7c:	29 97       	sbiw	r28, 0x09	; 9
    2e7e:	28 96       	adiw	r28, 0x08	; 8
    2e80:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e82:	28 97       	sbiw	r28, 0x08	; 8
    2e84:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e86:	98 17       	cp	r25, r24
    2e88:	18 f0       	brcs	.+6      	; 0x2e90 <T0_GetStatus+0x22e>
    2e8a:	29 96       	adiw	r28, 0x09	; 9
    2e8c:	1f ae       	std	Y+63, r1	; 0x3f
    2e8e:	29 97       	sbiw	r28, 0x09	; 9
    2e90:	27 96       	adiw	r28, 0x07	; 7
    2e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e94:	27 97       	sbiw	r28, 0x07	; 7
    2e96:	29 96       	adiw	r28, 0x09	; 9
    2e98:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e9a:	29 97       	sbiw	r28, 0x09	; 9
    2e9c:	98 2b       	or	r25, r24
    2e9e:	27 96       	adiw	r28, 0x07	; 7
    2ea0:	9f af       	std	Y+63, r25	; 0x3f
    2ea2:	27 97       	sbiw	r28, 0x07	; 7
    2ea4:	28 96       	adiw	r28, 0x08	; 8
    2ea6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ea8:	28 97       	sbiw	r28, 0x08	; 8
    2eaa:	9c af       	std	Y+60, r25	; 0x3c
    2eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eae:	9d a9       	ldd	r25, Y+53	; 0x35
    2eb0:	89 0f       	add	r24, r25
    2eb2:	8d af       	std	Y+61, r24	; 0x3d
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	2a 96       	adiw	r28, 0x0a	; 10
    2eb8:	8f af       	std	Y+63, r24	; 0x3f
    2eba:	2a 97       	sbiw	r28, 0x0a	; 10
    2ebc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec0:	98 17       	cp	r25, r24
    2ec2:	18 f0       	brcs	.+6      	; 0x2eca <T0_GetStatus+0x268>
    2ec4:	2a 96       	adiw	r28, 0x0a	; 10
    2ec6:	1f ae       	std	Y+63, r1	; 0x3f
    2ec8:	2a 97       	sbiw	r28, 0x0a	; 10
    2eca:	27 96       	adiw	r28, 0x07	; 7
    2ecc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ece:	27 97       	sbiw	r28, 0x07	; 7
    2ed0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed2:	98 0f       	add	r25, r24
    2ed4:	2b 96       	adiw	r28, 0x0b	; 11
    2ed6:	9f af       	std	Y+63, r25	; 0x3f
    2ed8:	2b 97       	sbiw	r28, 0x0b	; 11
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	2c 96       	adiw	r28, 0x0c	; 12
    2ede:	9f af       	std	Y+63, r25	; 0x3f
    2ee0:	2c 97       	sbiw	r28, 0x0c	; 12
    2ee2:	2b 96       	adiw	r28, 0x0b	; 11
    2ee4:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ee6:	2b 97       	sbiw	r28, 0x0b	; 11
    2ee8:	9d ad       	ldd	r25, Y+61	; 0x3d
    2eea:	89 17       	cp	r24, r25
    2eec:	18 f0       	brcs	.+6      	; 0x2ef4 <T0_GetStatus+0x292>
    2eee:	2c 96       	adiw	r28, 0x0c	; 12
    2ef0:	1f ae       	std	Y+63, r1	; 0x3f
    2ef2:	2c 97       	sbiw	r28, 0x0c	; 12
    2ef4:	2a 96       	adiw	r28, 0x0a	; 10
    2ef6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ef8:	2a 97       	sbiw	r28, 0x0a	; 10
    2efa:	2c 96       	adiw	r28, 0x0c	; 12
    2efc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2efe:	2c 97       	sbiw	r28, 0x0c	; 12
    2f00:	89 2b       	or	r24, r25
    2f02:	2a 96       	adiw	r28, 0x0a	; 10
    2f04:	8f af       	std	Y+63, r24	; 0x3f
    2f06:	2a 97       	sbiw	r28, 0x0a	; 10
    2f08:	2b 96       	adiw	r28, 0x0b	; 11
    2f0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f0c:	2b 97       	sbiw	r28, 0x0b	; 11
    2f0e:	8d af       	std	Y+61, r24	; 0x3d
    2f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f12:	8e a9       	ldd	r24, Y+54	; 0x36
    2f14:	98 0f       	add	r25, r24
    2f16:	9e af       	std	Y+62, r25	; 0x3e
    2f18:	91 e0       	ldi	r25, 0x01	; 1
    2f1a:	2d 96       	adiw	r28, 0x0d	; 13
    2f1c:	9f af       	std	Y+63, r25	; 0x3f
    2f1e:	2d 97       	sbiw	r28, 0x0d	; 13
    2f20:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f24:	89 17       	cp	r24, r25
    2f26:	18 f0       	brcs	.+6      	; 0x2f2e <T0_GetStatus+0x2cc>
    2f28:	2d 96       	adiw	r28, 0x0d	; 13
    2f2a:	1f ae       	std	Y+63, r1	; 0x3f
    2f2c:	2d 97       	sbiw	r28, 0x0d	; 13
    2f2e:	2a 96       	adiw	r28, 0x0a	; 10
    2f30:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f32:	2a 97       	sbiw	r28, 0x0a	; 10
    2f34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f36:	89 0f       	add	r24, r25
    2f38:	2e 96       	adiw	r28, 0x0e	; 14
    2f3a:	8f af       	std	Y+63, r24	; 0x3f
    2f3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	2f 96       	adiw	r28, 0x0f	; 15
    2f42:	8f af       	std	Y+63, r24	; 0x3f
    2f44:	2f 97       	sbiw	r28, 0x0f	; 15
    2f46:	2e 96       	adiw	r28, 0x0e	; 14
    2f48:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f4a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f4e:	98 17       	cp	r25, r24
    2f50:	18 f0       	brcs	.+6      	; 0x2f58 <T0_GetStatus+0x2f6>
    2f52:	2f 96       	adiw	r28, 0x0f	; 15
    2f54:	1f ae       	std	Y+63, r1	; 0x3f
    2f56:	2f 97       	sbiw	r28, 0x0f	; 15
    2f58:	2d 96       	adiw	r28, 0x0d	; 13
    2f5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f5c:	2d 97       	sbiw	r28, 0x0d	; 13
    2f5e:	2f 96       	adiw	r28, 0x0f	; 15
    2f60:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f62:	2f 97       	sbiw	r28, 0x0f	; 15
    2f64:	98 2b       	or	r25, r24
    2f66:	2d 96       	adiw	r28, 0x0d	; 13
    2f68:	9f af       	std	Y+63, r25	; 0x3f
    2f6a:	2d 97       	sbiw	r28, 0x0d	; 13
    2f6c:	2e 96       	adiw	r28, 0x0e	; 14
    2f6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f70:	2e 97       	sbiw	r28, 0x0e	; 14
    2f72:	9e af       	std	Y+62, r25	; 0x3e
    2f74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f76:	9f a9       	ldd	r25, Y+55	; 0x37
    2f78:	89 0f       	add	r24, r25
    2f7a:	8f af       	std	Y+63, r24	; 0x3f
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	60 96       	adiw	r28, 0x10	; 16
    2f80:	8f af       	std	Y+63, r24	; 0x3f
    2f82:	60 97       	sbiw	r28, 0x10	; 16
    2f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f88:	98 17       	cp	r25, r24
    2f8a:	18 f0       	brcs	.+6      	; 0x2f92 <T0_GetStatus+0x330>
    2f8c:	60 96       	adiw	r28, 0x10	; 16
    2f8e:	1f ae       	std	Y+63, r1	; 0x3f
    2f90:	60 97       	sbiw	r28, 0x10	; 16
    2f92:	2d 96       	adiw	r28, 0x0d	; 13
    2f94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f96:	2d 97       	sbiw	r28, 0x0d	; 13
    2f98:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f9a:	98 0f       	add	r25, r24
    2f9c:	61 96       	adiw	r28, 0x11	; 17
    2f9e:	9f af       	std	Y+63, r25	; 0x3f
    2fa0:	61 97       	sbiw	r28, 0x11	; 17
    2fa2:	91 e0       	ldi	r25, 0x01	; 1
    2fa4:	62 96       	adiw	r28, 0x12	; 18
    2fa6:	9f af       	std	Y+63, r25	; 0x3f
    2fa8:	62 97       	sbiw	r28, 0x12	; 18
    2faa:	61 96       	adiw	r28, 0x11	; 17
    2fac:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fae:	61 97       	sbiw	r28, 0x11	; 17
    2fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fb2:	89 17       	cp	r24, r25
    2fb4:	18 f0       	brcs	.+6      	; 0x2fbc <T0_GetStatus+0x35a>
    2fb6:	62 96       	adiw	r28, 0x12	; 18
    2fb8:	1f ae       	std	Y+63, r1	; 0x3f
    2fba:	62 97       	sbiw	r28, 0x12	; 18
    2fbc:	60 96       	adiw	r28, 0x10	; 16
    2fbe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fc0:	60 97       	sbiw	r28, 0x10	; 16
    2fc2:	62 96       	adiw	r28, 0x12	; 18
    2fc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fc6:	62 97       	sbiw	r28, 0x12	; 18
    2fc8:	89 2b       	or	r24, r25
    2fca:	60 96       	adiw	r28, 0x10	; 16
    2fcc:	8f af       	std	Y+63, r24	; 0x3f
    2fce:	60 97       	sbiw	r28, 0x10	; 16
    2fd0:	61 96       	adiw	r28, 0x11	; 17
    2fd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2fd4:	61 97       	sbiw	r28, 0x11	; 17
    2fd6:	8f af       	std	Y+63, r24	; 0x3f
    2fd8:	98 a1       	ldd	r25, Y+32	; 0x20
    2fda:	88 ad       	ldd	r24, Y+56	; 0x38
    2fdc:	98 0f       	add	r25, r24
    2fde:	21 96       	adiw	r28, 0x01	; 1
    2fe0:	9f af       	std	Y+63, r25	; 0x3f
    2fe2:	21 97       	sbiw	r28, 0x01	; 1
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	63 96       	adiw	r28, 0x13	; 19
    2fe8:	9f af       	std	Y+63, r25	; 0x3f
    2fea:	63 97       	sbiw	r28, 0x13	; 19
    2fec:	21 96       	adiw	r28, 0x01	; 1
    2fee:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ff0:	21 97       	sbiw	r28, 0x01	; 1
    2ff2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ff4:	89 17       	cp	r24, r25
    2ff6:	18 f0       	brcs	.+6      	; 0x2ffe <T0_GetStatus+0x39c>
    2ff8:	63 96       	adiw	r28, 0x13	; 19
    2ffa:	1f ae       	std	Y+63, r1	; 0x3f
    2ffc:	63 97       	sbiw	r28, 0x13	; 19
    2ffe:	60 96       	adiw	r28, 0x10	; 16
    3000:	8f ad       	ldd	r24, Y+63	; 0x3f
    3002:	60 97       	sbiw	r28, 0x10	; 16
    3004:	21 96       	adiw	r28, 0x01	; 1
    3006:	9f ad       	ldd	r25, Y+63	; 0x3f
    3008:	21 97       	sbiw	r28, 0x01	; 1
    300a:	89 0f       	add	r24, r25
    300c:	64 96       	adiw	r28, 0x14	; 20
    300e:	8f af       	std	Y+63, r24	; 0x3f
    3010:	64 97       	sbiw	r28, 0x14	; 20
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	65 96       	adiw	r28, 0x15	; 21
    3016:	8f af       	std	Y+63, r24	; 0x3f
    3018:	65 97       	sbiw	r28, 0x15	; 21
    301a:	64 96       	adiw	r28, 0x14	; 20
    301c:	9f ad       	ldd	r25, Y+63	; 0x3f
    301e:	64 97       	sbiw	r28, 0x14	; 20
    3020:	21 96       	adiw	r28, 0x01	; 1
    3022:	8f ad       	ldd	r24, Y+63	; 0x3f
    3024:	21 97       	sbiw	r28, 0x01	; 1
    3026:	98 17       	cp	r25, r24
    3028:	18 f0       	brcs	.+6      	; 0x3030 <T0_GetStatus+0x3ce>
    302a:	65 96       	adiw	r28, 0x15	; 21
    302c:	1f ae       	std	Y+63, r1	; 0x3f
    302e:	65 97       	sbiw	r28, 0x15	; 21
    3030:	63 96       	adiw	r28, 0x13	; 19
    3032:	9f ad       	ldd	r25, Y+63	; 0x3f
    3034:	63 97       	sbiw	r28, 0x13	; 19
    3036:	65 96       	adiw	r28, 0x15	; 21
    3038:	8f ad       	ldd	r24, Y+63	; 0x3f
    303a:	65 97       	sbiw	r28, 0x15	; 21
    303c:	98 2b       	or	r25, r24
    303e:	63 96       	adiw	r28, 0x13	; 19
    3040:	9f af       	std	Y+63, r25	; 0x3f
    3042:	63 97       	sbiw	r28, 0x13	; 19
    3044:	64 96       	adiw	r28, 0x14	; 20
    3046:	9f ad       	ldd	r25, Y+63	; 0x3f
    3048:	64 97       	sbiw	r28, 0x14	; 20
    304a:	21 96       	adiw	r28, 0x01	; 1
    304c:	9f af       	std	Y+63, r25	; 0x3f
    304e:	21 97       	sbiw	r28, 0x01	; 1
    3050:	89 a1       	ldd	r24, Y+33	; 0x21
    3052:	99 ad       	ldd	r25, Y+57	; 0x39
    3054:	89 0f       	add	r24, r25
    3056:	22 96       	adiw	r28, 0x02	; 2
    3058:	8f af       	std	Y+63, r24	; 0x3f
    305a:	22 97       	sbiw	r28, 0x02	; 2
    305c:	63 96       	adiw	r28, 0x13	; 19
    305e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3060:	63 97       	sbiw	r28, 0x13	; 19
    3062:	22 96       	adiw	r28, 0x02	; 2
    3064:	9f ad       	ldd	r25, Y+63	; 0x3f
    3066:	22 97       	sbiw	r28, 0x02	; 2
    3068:	89 0f       	add	r24, r25
    306a:	22 96       	adiw	r28, 0x02	; 2
    306c:	8f af       	std	Y+63, r24	; 0x3f
    306e:	22 97       	sbiw	r28, 0x02	; 2
    3070:	2a ad       	ldd	r18, Y+58	; 0x3a
    3072:	3b ad       	ldd	r19, Y+59	; 0x3b
    3074:	4c ad       	ldd	r20, Y+60	; 0x3c
    3076:	5d ad       	ldd	r21, Y+61	; 0x3d
    3078:	6e ad       	ldd	r22, Y+62	; 0x3e
    307a:	7f ad       	ldd	r23, Y+63	; 0x3f
    307c:	21 96       	adiw	r28, 0x01	; 1
    307e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3080:	21 97       	sbiw	r28, 0x01	; 1
    3082:	22 96       	adiw	r28, 0x02	; 2
    3084:	9f ad       	ldd	r25, Y+63	; 0x3f
    3086:	22 97       	sbiw	r28, 0x02	; 2
    3088:	20 93 8e 01 	sts	0x018E, r18
    308c:	30 93 8f 01 	sts	0x018F, r19
    3090:	40 93 90 01 	sts	0x0190, r20
    3094:	50 93 91 01 	sts	0x0191, r21
    3098:	60 93 92 01 	sts	0x0192, r22
    309c:	70 93 93 01 	sts	0x0193, r23
    30a0:	80 93 94 01 	sts	0x0194, r24
    30a4:	90 93 95 01 	sts	0x0195, r25
    30a8:	6a c2       	rjmp	.+1236   	; 0x357e <T0_GetStatus+0x91c>
         }
      }
      //if the current overflow value equals the calculated total overflows value
      else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
    30aa:	80 91 8e 01 	lds	r24, 0x018E
    30ae:	8a 8b       	std	Y+18, r24	; 0x12
    30b0:	90 91 8f 01 	lds	r25, 0x018F
    30b4:	9b 8b       	std	Y+19, r25	; 0x13
    30b6:	80 91 90 01 	lds	r24, 0x0190
    30ba:	8c 8b       	std	Y+20, r24	; 0x14
    30bc:	90 91 91 01 	lds	r25, 0x0191
    30c0:	9d 8b       	std	Y+21, r25	; 0x15
    30c2:	80 91 92 01 	lds	r24, 0x0192
    30c6:	8e 8b       	std	Y+22, r24	; 0x16
    30c8:	90 91 93 01 	lds	r25, 0x0193
    30cc:	9f 8b       	std	Y+23, r25	; 0x17
    30ce:	80 91 94 01 	lds	r24, 0x0194
    30d2:	88 8f       	std	Y+24, r24	; 0x18
    30d4:	90 91 95 01 	lds	r25, 0x0195
    30d8:	99 8f       	std	Y+25, r25	; 0x19
    30da:	80 91 86 01 	lds	r24, 0x0186
    30de:	8a 87       	std	Y+10, r24	; 0x0a
    30e0:	90 91 87 01 	lds	r25, 0x0187
    30e4:	9b 87       	std	Y+11, r25	; 0x0b
    30e6:	80 91 88 01 	lds	r24, 0x0188
    30ea:	8c 87       	std	Y+12, r24	; 0x0c
    30ec:	90 91 89 01 	lds	r25, 0x0189
    30f0:	9d 87       	std	Y+13, r25	; 0x0d
    30f2:	80 91 8a 01 	lds	r24, 0x018A
    30f6:	8e 87       	std	Y+14, r24	; 0x0e
    30f8:	90 91 8b 01 	lds	r25, 0x018B
    30fc:	9f 87       	std	Y+15, r25	; 0x0f
    30fe:	80 91 8c 01 	lds	r24, 0x018C
    3102:	88 8b       	std	Y+16, r24	; 0x10
    3104:	90 91 8d 01 	lds	r25, 0x018D
    3108:	99 8b       	std	Y+17, r25	; 0x11
    310a:	8a 89       	ldd	r24, Y+18	; 0x12
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	89 17       	cp	r24, r25
    3110:	09 f0       	breq	.+2      	; 0x3114 <T0_GetStatus+0x4b2>
    3112:	25 c2       	rjmp	.+1098   	; 0x355e <T0_GetStatus+0x8fc>
    3114:	8b 89       	ldd	r24, Y+19	; 0x13
    3116:	9b 85       	ldd	r25, Y+11	; 0x0b
    3118:	89 17       	cp	r24, r25
    311a:	09 f0       	breq	.+2      	; 0x311e <T0_GetStatus+0x4bc>
    311c:	20 c2       	rjmp	.+1088   	; 0x355e <T0_GetStatus+0x8fc>
    311e:	8c 89       	ldd	r24, Y+20	; 0x14
    3120:	9c 85       	ldd	r25, Y+12	; 0x0c
    3122:	89 17       	cp	r24, r25
    3124:	09 f0       	breq	.+2      	; 0x3128 <T0_GetStatus+0x4c6>
    3126:	1b c2       	rjmp	.+1078   	; 0x355e <T0_GetStatus+0x8fc>
    3128:	8d 89       	ldd	r24, Y+21	; 0x15
    312a:	9d 85       	ldd	r25, Y+13	; 0x0d
    312c:	89 17       	cp	r24, r25
    312e:	09 f0       	breq	.+2      	; 0x3132 <T0_GetStatus+0x4d0>
    3130:	16 c2       	rjmp	.+1068   	; 0x355e <T0_GetStatus+0x8fc>
    3132:	8e 89       	ldd	r24, Y+22	; 0x16
    3134:	9e 85       	ldd	r25, Y+14	; 0x0e
    3136:	89 17       	cp	r24, r25
    3138:	09 f0       	breq	.+2      	; 0x313c <T0_GetStatus+0x4da>
    313a:	11 c2       	rjmp	.+1058   	; 0x355e <T0_GetStatus+0x8fc>
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3140:	89 17       	cp	r24, r25
    3142:	09 f0       	breq	.+2      	; 0x3146 <T0_GetStatus+0x4e4>
    3144:	0c c2       	rjmp	.+1048   	; 0x355e <T0_GetStatus+0x8fc>
    3146:	88 8d       	ldd	r24, Y+24	; 0x18
    3148:	98 89       	ldd	r25, Y+16	; 0x10
    314a:	89 17       	cp	r24, r25
    314c:	09 f0       	breq	.+2      	; 0x3150 <T0_GetStatus+0x4ee>
    314e:	07 c2       	rjmp	.+1038   	; 0x355e <T0_GetStatus+0x8fc>
    3150:	89 8d       	ldd	r24, Y+25	; 0x19
    3152:	99 89       	ldd	r25, Y+17	; 0x11
    3154:	89 17       	cp	r24, r25
    3156:	09 f0       	breq	.+2      	; 0x315a <T0_GetStatus+0x4f8>
    3158:	02 c2       	rjmp	.+1028   	; 0x355e <T0_GetStatus+0x8fc>
      {
         //set the timer value to the remaining timing
         TCNT0_R=((T0_TICKS-1)-Gu32_T0LastOVTicks);
    315a:	e2 e5       	ldi	r30, 0x52	; 82
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 91 96 01 	lds	r24, 0x0196
    3162:	80 95       	com	r24
    3164:	80 83       	st	Z, r24
         //clear the overflow flag
         SET_BIT(TIFR_R,TOV0_B);
    3166:	a8 e5       	ldi	r26, 0x58	; 88
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e8 e5       	ldi	r30, 0x58	; 88
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	81 60       	ori	r24, 0x01	; 1
    3172:	8c 93       	st	X, r24
         //increase the overflow counter
         Gu32_T0CurrentOVCount++;
    3174:	80 91 8e 01 	lds	r24, 0x018E
    3178:	8a 83       	std	Y+2, r24	; 0x02
    317a:	90 91 8f 01 	lds	r25, 0x018F
    317e:	9b 83       	std	Y+3, r25	; 0x03
    3180:	80 91 90 01 	lds	r24, 0x0190
    3184:	8c 83       	std	Y+4, r24	; 0x04
    3186:	90 91 91 01 	lds	r25, 0x0191
    318a:	9d 83       	std	Y+5, r25	; 0x05
    318c:	80 91 92 01 	lds	r24, 0x0192
    3190:	8e 83       	std	Y+6, r24	; 0x06
    3192:	90 91 93 01 	lds	r25, 0x0193
    3196:	9f 83       	std	Y+7, r25	; 0x07
    3198:	80 91 94 01 	lds	r24, 0x0194
    319c:	88 87       	std	Y+8, r24	; 0x08
    319e:	90 91 95 01 	lds	r25, 0x0195
    31a2:	99 87       	std	Y+9, r25	; 0x09
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	66 96       	adiw	r28, 0x16	; 22
    31a8:	8f af       	std	Y+63, r24	; 0x3f
    31aa:	66 97       	sbiw	r28, 0x16	; 22
    31ac:	67 96       	adiw	r28, 0x17	; 23
    31ae:	1f ae       	std	Y+63, r1	; 0x3f
    31b0:	67 97       	sbiw	r28, 0x17	; 23
    31b2:	68 96       	adiw	r28, 0x18	; 24
    31b4:	1f ae       	std	Y+63, r1	; 0x3f
    31b6:	68 97       	sbiw	r28, 0x18	; 24
    31b8:	69 96       	adiw	r28, 0x19	; 25
    31ba:	1f ae       	std	Y+63, r1	; 0x3f
    31bc:	69 97       	sbiw	r28, 0x19	; 25
    31be:	6a 96       	adiw	r28, 0x1a	; 26
    31c0:	1f ae       	std	Y+63, r1	; 0x3f
    31c2:	6a 97       	sbiw	r28, 0x1a	; 26
    31c4:	6b 96       	adiw	r28, 0x1b	; 27
    31c6:	1f ae       	std	Y+63, r1	; 0x3f
    31c8:	6b 97       	sbiw	r28, 0x1b	; 27
    31ca:	6c 96       	adiw	r28, 0x1c	; 28
    31cc:	1f ae       	std	Y+63, r1	; 0x3f
    31ce:	6c 97       	sbiw	r28, 0x1c	; 28
    31d0:	6d 96       	adiw	r28, 0x1d	; 29
    31d2:	1f ae       	std	Y+63, r1	; 0x3f
    31d4:	6d 97       	sbiw	r28, 0x1d	; 29
    31d6:	9a 81       	ldd	r25, Y+2	; 0x02
    31d8:	66 96       	adiw	r28, 0x16	; 22
    31da:	8f ad       	ldd	r24, Y+63	; 0x3f
    31dc:	66 97       	sbiw	r28, 0x16	; 22
    31de:	98 0f       	add	r25, r24
    31e0:	6e 96       	adiw	r28, 0x1e	; 30
    31e2:	9f af       	std	Y+63, r25	; 0x3f
    31e4:	6e 97       	sbiw	r28, 0x1e	; 30
    31e6:	91 e0       	ldi	r25, 0x01	; 1
    31e8:	a6 96       	adiw	r28, 0x26	; 38
    31ea:	9f af       	std	Y+63, r25	; 0x3f
    31ec:	a6 97       	sbiw	r28, 0x26	; 38
    31ee:	6e 96       	adiw	r28, 0x1e	; 30
    31f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    31f2:	6e 97       	sbiw	r28, 0x1e	; 30
    31f4:	9a 81       	ldd	r25, Y+2	; 0x02
    31f6:	89 17       	cp	r24, r25
    31f8:	18 f0       	brcs	.+6      	; 0x3200 <T0_GetStatus+0x59e>
    31fa:	a6 96       	adiw	r28, 0x26	; 38
    31fc:	1f ae       	std	Y+63, r1	; 0x3f
    31fe:	a6 97       	sbiw	r28, 0x26	; 38
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	67 96       	adiw	r28, 0x17	; 23
    3204:	9f ad       	ldd	r25, Y+63	; 0x3f
    3206:	67 97       	sbiw	r28, 0x17	; 23
    3208:	89 0f       	add	r24, r25
    320a:	6f 96       	adiw	r28, 0x1f	; 31
    320c:	8f af       	std	Y+63, r24	; 0x3f
    320e:	6f 97       	sbiw	r28, 0x1f	; 31
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	a7 96       	adiw	r28, 0x27	; 39
    3214:	8f af       	std	Y+63, r24	; 0x3f
    3216:	a7 97       	sbiw	r28, 0x27	; 39
    3218:	6f 96       	adiw	r28, 0x1f	; 31
    321a:	9f ad       	ldd	r25, Y+63	; 0x3f
    321c:	6f 97       	sbiw	r28, 0x1f	; 31
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	98 17       	cp	r25, r24
    3222:	18 f0       	brcs	.+6      	; 0x322a <T0_GetStatus+0x5c8>
    3224:	a7 96       	adiw	r28, 0x27	; 39
    3226:	1f ae       	std	Y+63, r1	; 0x3f
    3228:	a7 97       	sbiw	r28, 0x27	; 39
    322a:	a6 96       	adiw	r28, 0x26	; 38
    322c:	9f ad       	ldd	r25, Y+63	; 0x3f
    322e:	a6 97       	sbiw	r28, 0x26	; 38
    3230:	6f 96       	adiw	r28, 0x1f	; 31
    3232:	8f ad       	ldd	r24, Y+63	; 0x3f
    3234:	6f 97       	sbiw	r28, 0x1f	; 31
    3236:	98 0f       	add	r25, r24
    3238:	a8 96       	adiw	r28, 0x28	; 40
    323a:	9f af       	std	Y+63, r25	; 0x3f
    323c:	a8 97       	sbiw	r28, 0x28	; 40
    323e:	91 e0       	ldi	r25, 0x01	; 1
    3240:	a9 96       	adiw	r28, 0x29	; 41
    3242:	9f af       	std	Y+63, r25	; 0x3f
    3244:	a9 97       	sbiw	r28, 0x29	; 41
    3246:	a8 96       	adiw	r28, 0x28	; 40
    3248:	8f ad       	ldd	r24, Y+63	; 0x3f
    324a:	a8 97       	sbiw	r28, 0x28	; 40
    324c:	6f 96       	adiw	r28, 0x1f	; 31
    324e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3250:	6f 97       	sbiw	r28, 0x1f	; 31
    3252:	89 17       	cp	r24, r25
    3254:	18 f0       	brcs	.+6      	; 0x325c <T0_GetStatus+0x5fa>
    3256:	a9 96       	adiw	r28, 0x29	; 41
    3258:	1f ae       	std	Y+63, r1	; 0x3f
    325a:	a9 97       	sbiw	r28, 0x29	; 41
    325c:	a7 96       	adiw	r28, 0x27	; 39
    325e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3260:	a7 97       	sbiw	r28, 0x27	; 39
    3262:	a9 96       	adiw	r28, 0x29	; 41
    3264:	9f ad       	ldd	r25, Y+63	; 0x3f
    3266:	a9 97       	sbiw	r28, 0x29	; 41
    3268:	89 2b       	or	r24, r25
    326a:	a7 96       	adiw	r28, 0x27	; 39
    326c:	8f af       	std	Y+63, r24	; 0x3f
    326e:	a7 97       	sbiw	r28, 0x27	; 39
    3270:	a8 96       	adiw	r28, 0x28	; 40
    3272:	8f ad       	ldd	r24, Y+63	; 0x3f
    3274:	a8 97       	sbiw	r28, 0x28	; 40
    3276:	6f 96       	adiw	r28, 0x1f	; 31
    3278:	8f af       	std	Y+63, r24	; 0x3f
    327a:	6f 97       	sbiw	r28, 0x1f	; 31
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	68 96       	adiw	r28, 0x18	; 24
    3280:	8f ad       	ldd	r24, Y+63	; 0x3f
    3282:	68 97       	sbiw	r28, 0x18	; 24
    3284:	98 0f       	add	r25, r24
    3286:	a0 96       	adiw	r28, 0x20	; 32
    3288:	9f af       	std	Y+63, r25	; 0x3f
    328a:	a0 97       	sbiw	r28, 0x20	; 32
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	aa 96       	adiw	r28, 0x2a	; 42
    3290:	9f af       	std	Y+63, r25	; 0x3f
    3292:	aa 97       	sbiw	r28, 0x2a	; 42
    3294:	a0 96       	adiw	r28, 0x20	; 32
    3296:	8f ad       	ldd	r24, Y+63	; 0x3f
    3298:	a0 97       	sbiw	r28, 0x20	; 32
    329a:	9c 81       	ldd	r25, Y+4	; 0x04
    329c:	89 17       	cp	r24, r25
    329e:	18 f0       	brcs	.+6      	; 0x32a6 <T0_GetStatus+0x644>
    32a0:	aa 96       	adiw	r28, 0x2a	; 42
    32a2:	1f ae       	std	Y+63, r1	; 0x3f
    32a4:	aa 97       	sbiw	r28, 0x2a	; 42
    32a6:	a7 96       	adiw	r28, 0x27	; 39
    32a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    32aa:	a7 97       	sbiw	r28, 0x27	; 39
    32ac:	a0 96       	adiw	r28, 0x20	; 32
    32ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    32b0:	a0 97       	sbiw	r28, 0x20	; 32
    32b2:	89 0f       	add	r24, r25
    32b4:	ab 96       	adiw	r28, 0x2b	; 43
    32b6:	8f af       	std	Y+63, r24	; 0x3f
    32b8:	ab 97       	sbiw	r28, 0x2b	; 43
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	ac 96       	adiw	r28, 0x2c	; 44
    32be:	8f af       	std	Y+63, r24	; 0x3f
    32c0:	ac 97       	sbiw	r28, 0x2c	; 44
    32c2:	ab 96       	adiw	r28, 0x2b	; 43
    32c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    32c6:	ab 97       	sbiw	r28, 0x2b	; 43
    32c8:	a0 96       	adiw	r28, 0x20	; 32
    32ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    32cc:	a0 97       	sbiw	r28, 0x20	; 32
    32ce:	98 17       	cp	r25, r24
    32d0:	18 f0       	brcs	.+6      	; 0x32d8 <T0_GetStatus+0x676>
    32d2:	ac 96       	adiw	r28, 0x2c	; 44
    32d4:	1f ae       	std	Y+63, r1	; 0x3f
    32d6:	ac 97       	sbiw	r28, 0x2c	; 44
    32d8:	aa 96       	adiw	r28, 0x2a	; 42
    32da:	9f ad       	ldd	r25, Y+63	; 0x3f
    32dc:	aa 97       	sbiw	r28, 0x2a	; 42
    32de:	ac 96       	adiw	r28, 0x2c	; 44
    32e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    32e2:	ac 97       	sbiw	r28, 0x2c	; 44
    32e4:	98 2b       	or	r25, r24
    32e6:	aa 96       	adiw	r28, 0x2a	; 42
    32e8:	9f af       	std	Y+63, r25	; 0x3f
    32ea:	aa 97       	sbiw	r28, 0x2a	; 42
    32ec:	ab 96       	adiw	r28, 0x2b	; 43
    32ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    32f0:	ab 97       	sbiw	r28, 0x2b	; 43
    32f2:	a0 96       	adiw	r28, 0x20	; 32
    32f4:	9f af       	std	Y+63, r25	; 0x3f
    32f6:	a0 97       	sbiw	r28, 0x20	; 32
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	69 96       	adiw	r28, 0x19	; 25
    32fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    32fe:	69 97       	sbiw	r28, 0x19	; 25
    3300:	89 0f       	add	r24, r25
    3302:	a1 96       	adiw	r28, 0x21	; 33
    3304:	8f af       	std	Y+63, r24	; 0x3f
    3306:	a1 97       	sbiw	r28, 0x21	; 33
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	ad 96       	adiw	r28, 0x2d	; 45
    330c:	8f af       	std	Y+63, r24	; 0x3f
    330e:	ad 97       	sbiw	r28, 0x2d	; 45
    3310:	a1 96       	adiw	r28, 0x21	; 33
    3312:	9f ad       	ldd	r25, Y+63	; 0x3f
    3314:	a1 97       	sbiw	r28, 0x21	; 33
    3316:	8d 81       	ldd	r24, Y+5	; 0x05
    3318:	98 17       	cp	r25, r24
    331a:	18 f0       	brcs	.+6      	; 0x3322 <T0_GetStatus+0x6c0>
    331c:	ad 96       	adiw	r28, 0x2d	; 45
    331e:	1f ae       	std	Y+63, r1	; 0x3f
    3320:	ad 97       	sbiw	r28, 0x2d	; 45
    3322:	aa 96       	adiw	r28, 0x2a	; 42
    3324:	9f ad       	ldd	r25, Y+63	; 0x3f
    3326:	aa 97       	sbiw	r28, 0x2a	; 42
    3328:	a1 96       	adiw	r28, 0x21	; 33
    332a:	8f ad       	ldd	r24, Y+63	; 0x3f
    332c:	a1 97       	sbiw	r28, 0x21	; 33
    332e:	98 0f       	add	r25, r24
    3330:	ae 96       	adiw	r28, 0x2e	; 46
    3332:	9f af       	std	Y+63, r25	; 0x3f
    3334:	ae 97       	sbiw	r28, 0x2e	; 46
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	af 96       	adiw	r28, 0x2f	; 47
    333a:	9f af       	std	Y+63, r25	; 0x3f
    333c:	af 97       	sbiw	r28, 0x2f	; 47
    333e:	ae 96       	adiw	r28, 0x2e	; 46
    3340:	8f ad       	ldd	r24, Y+63	; 0x3f
    3342:	ae 97       	sbiw	r28, 0x2e	; 46
    3344:	a1 96       	adiw	r28, 0x21	; 33
    3346:	9f ad       	ldd	r25, Y+63	; 0x3f
    3348:	a1 97       	sbiw	r28, 0x21	; 33
    334a:	89 17       	cp	r24, r25
    334c:	18 f0       	brcs	.+6      	; 0x3354 <T0_GetStatus+0x6f2>
    334e:	af 96       	adiw	r28, 0x2f	; 47
    3350:	1f ae       	std	Y+63, r1	; 0x3f
    3352:	af 97       	sbiw	r28, 0x2f	; 47
    3354:	ad 96       	adiw	r28, 0x2d	; 45
    3356:	8f ad       	ldd	r24, Y+63	; 0x3f
    3358:	ad 97       	sbiw	r28, 0x2d	; 45
    335a:	af 96       	adiw	r28, 0x2f	; 47
    335c:	9f ad       	ldd	r25, Y+63	; 0x3f
    335e:	af 97       	sbiw	r28, 0x2f	; 47
    3360:	89 2b       	or	r24, r25
    3362:	ad 96       	adiw	r28, 0x2d	; 45
    3364:	8f af       	std	Y+63, r24	; 0x3f
    3366:	ad 97       	sbiw	r28, 0x2d	; 45
    3368:	ae 96       	adiw	r28, 0x2e	; 46
    336a:	8f ad       	ldd	r24, Y+63	; 0x3f
    336c:	ae 97       	sbiw	r28, 0x2e	; 46
    336e:	a1 96       	adiw	r28, 0x21	; 33
    3370:	8f af       	std	Y+63, r24	; 0x3f
    3372:	a1 97       	sbiw	r28, 0x21	; 33
    3374:	9e 81       	ldd	r25, Y+6	; 0x06
    3376:	6a 96       	adiw	r28, 0x1a	; 26
    3378:	8f ad       	ldd	r24, Y+63	; 0x3f
    337a:	6a 97       	sbiw	r28, 0x1a	; 26
    337c:	98 0f       	add	r25, r24
    337e:	a2 96       	adiw	r28, 0x22	; 34
    3380:	9f af       	std	Y+63, r25	; 0x3f
    3382:	a2 97       	sbiw	r28, 0x22	; 34
    3384:	91 e0       	ldi	r25, 0x01	; 1
    3386:	e0 96       	adiw	r28, 0x30	; 48
    3388:	9f af       	std	Y+63, r25	; 0x3f
    338a:	e0 97       	sbiw	r28, 0x30	; 48
    338c:	a2 96       	adiw	r28, 0x22	; 34
    338e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3390:	a2 97       	sbiw	r28, 0x22	; 34
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	89 17       	cp	r24, r25
    3396:	18 f0       	brcs	.+6      	; 0x339e <T0_GetStatus+0x73c>
    3398:	e0 96       	adiw	r28, 0x30	; 48
    339a:	1f ae       	std	Y+63, r1	; 0x3f
    339c:	e0 97       	sbiw	r28, 0x30	; 48
    339e:	ad 96       	adiw	r28, 0x2d	; 45
    33a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    33a2:	ad 97       	sbiw	r28, 0x2d	; 45
    33a4:	a2 96       	adiw	r28, 0x22	; 34
    33a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    33a8:	a2 97       	sbiw	r28, 0x22	; 34
    33aa:	89 0f       	add	r24, r25
    33ac:	e1 96       	adiw	r28, 0x31	; 49
    33ae:	8f af       	std	Y+63, r24	; 0x3f
    33b0:	e1 97       	sbiw	r28, 0x31	; 49
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	e2 96       	adiw	r28, 0x32	; 50
    33b6:	8f af       	std	Y+63, r24	; 0x3f
    33b8:	e2 97       	sbiw	r28, 0x32	; 50
    33ba:	e1 96       	adiw	r28, 0x31	; 49
    33bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    33be:	e1 97       	sbiw	r28, 0x31	; 49
    33c0:	a2 96       	adiw	r28, 0x22	; 34
    33c2:	8f ad       	ldd	r24, Y+63	; 0x3f
    33c4:	a2 97       	sbiw	r28, 0x22	; 34
    33c6:	98 17       	cp	r25, r24
    33c8:	18 f0       	brcs	.+6      	; 0x33d0 <T0_GetStatus+0x76e>
    33ca:	e2 96       	adiw	r28, 0x32	; 50
    33cc:	1f ae       	std	Y+63, r1	; 0x3f
    33ce:	e2 97       	sbiw	r28, 0x32	; 50
    33d0:	e0 96       	adiw	r28, 0x30	; 48
    33d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    33d4:	e0 97       	sbiw	r28, 0x30	; 48
    33d6:	e2 96       	adiw	r28, 0x32	; 50
    33d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    33da:	e2 97       	sbiw	r28, 0x32	; 50
    33dc:	98 2b       	or	r25, r24
    33de:	e0 96       	adiw	r28, 0x30	; 48
    33e0:	9f af       	std	Y+63, r25	; 0x3f
    33e2:	e0 97       	sbiw	r28, 0x30	; 48
    33e4:	e1 96       	adiw	r28, 0x31	; 49
    33e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    33e8:	e1 97       	sbiw	r28, 0x31	; 49
    33ea:	a2 96       	adiw	r28, 0x22	; 34
    33ec:	9f af       	std	Y+63, r25	; 0x3f
    33ee:	a2 97       	sbiw	r28, 0x22	; 34
    33f0:	8f 81       	ldd	r24, Y+7	; 0x07
    33f2:	6b 96       	adiw	r28, 0x1b	; 27
    33f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    33f6:	6b 97       	sbiw	r28, 0x1b	; 27
    33f8:	89 0f       	add	r24, r25
    33fa:	a3 96       	adiw	r28, 0x23	; 35
    33fc:	8f af       	std	Y+63, r24	; 0x3f
    33fe:	a3 97       	sbiw	r28, 0x23	; 35
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	e3 96       	adiw	r28, 0x33	; 51
    3404:	8f af       	std	Y+63, r24	; 0x3f
    3406:	e3 97       	sbiw	r28, 0x33	; 51
    3408:	a3 96       	adiw	r28, 0x23	; 35
    340a:	9f ad       	ldd	r25, Y+63	; 0x3f
    340c:	a3 97       	sbiw	r28, 0x23	; 35
    340e:	8f 81       	ldd	r24, Y+7	; 0x07
    3410:	98 17       	cp	r25, r24
    3412:	18 f0       	brcs	.+6      	; 0x341a <T0_GetStatus+0x7b8>
    3414:	e3 96       	adiw	r28, 0x33	; 51
    3416:	1f ae       	std	Y+63, r1	; 0x3f
    3418:	e3 97       	sbiw	r28, 0x33	; 51
    341a:	e0 96       	adiw	r28, 0x30	; 48
    341c:	9f ad       	ldd	r25, Y+63	; 0x3f
    341e:	e0 97       	sbiw	r28, 0x30	; 48
    3420:	a3 96       	adiw	r28, 0x23	; 35
    3422:	8f ad       	ldd	r24, Y+63	; 0x3f
    3424:	a3 97       	sbiw	r28, 0x23	; 35
    3426:	98 0f       	add	r25, r24
    3428:	e4 96       	adiw	r28, 0x34	; 52
    342a:	9f af       	std	Y+63, r25	; 0x3f
    342c:	e4 97       	sbiw	r28, 0x34	; 52
    342e:	91 e0       	ldi	r25, 0x01	; 1
    3430:	e5 96       	adiw	r28, 0x35	; 53
    3432:	9f af       	std	Y+63, r25	; 0x3f
    3434:	e5 97       	sbiw	r28, 0x35	; 53
    3436:	e4 96       	adiw	r28, 0x34	; 52
    3438:	8f ad       	ldd	r24, Y+63	; 0x3f
    343a:	e4 97       	sbiw	r28, 0x34	; 52
    343c:	a3 96       	adiw	r28, 0x23	; 35
    343e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3440:	a3 97       	sbiw	r28, 0x23	; 35
    3442:	89 17       	cp	r24, r25
    3444:	18 f0       	brcs	.+6      	; 0x344c <T0_GetStatus+0x7ea>
    3446:	e5 96       	adiw	r28, 0x35	; 53
    3448:	1f ae       	std	Y+63, r1	; 0x3f
    344a:	e5 97       	sbiw	r28, 0x35	; 53
    344c:	e3 96       	adiw	r28, 0x33	; 51
    344e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3450:	e3 97       	sbiw	r28, 0x33	; 51
    3452:	e5 96       	adiw	r28, 0x35	; 53
    3454:	9f ad       	ldd	r25, Y+63	; 0x3f
    3456:	e5 97       	sbiw	r28, 0x35	; 53
    3458:	89 2b       	or	r24, r25
    345a:	e3 96       	adiw	r28, 0x33	; 51
    345c:	8f af       	std	Y+63, r24	; 0x3f
    345e:	e3 97       	sbiw	r28, 0x33	; 51
    3460:	e4 96       	adiw	r28, 0x34	; 52
    3462:	8f ad       	ldd	r24, Y+63	; 0x3f
    3464:	e4 97       	sbiw	r28, 0x34	; 52
    3466:	a3 96       	adiw	r28, 0x23	; 35
    3468:	8f af       	std	Y+63, r24	; 0x3f
    346a:	a3 97       	sbiw	r28, 0x23	; 35
    346c:	98 85       	ldd	r25, Y+8	; 0x08
    346e:	6c 96       	adiw	r28, 0x1c	; 28
    3470:	8f ad       	ldd	r24, Y+63	; 0x3f
    3472:	6c 97       	sbiw	r28, 0x1c	; 28
    3474:	98 0f       	add	r25, r24
    3476:	a4 96       	adiw	r28, 0x24	; 36
    3478:	9f af       	std	Y+63, r25	; 0x3f
    347a:	a4 97       	sbiw	r28, 0x24	; 36
    347c:	91 e0       	ldi	r25, 0x01	; 1
    347e:	e6 96       	adiw	r28, 0x36	; 54
    3480:	9f af       	std	Y+63, r25	; 0x3f
    3482:	e6 97       	sbiw	r28, 0x36	; 54
    3484:	a4 96       	adiw	r28, 0x24	; 36
    3486:	8f ad       	ldd	r24, Y+63	; 0x3f
    3488:	a4 97       	sbiw	r28, 0x24	; 36
    348a:	98 85       	ldd	r25, Y+8	; 0x08
    348c:	89 17       	cp	r24, r25
    348e:	18 f0       	brcs	.+6      	; 0x3496 <T0_GetStatus+0x834>
    3490:	e6 96       	adiw	r28, 0x36	; 54
    3492:	1f ae       	std	Y+63, r1	; 0x3f
    3494:	e6 97       	sbiw	r28, 0x36	; 54
    3496:	e3 96       	adiw	r28, 0x33	; 51
    3498:	8f ad       	ldd	r24, Y+63	; 0x3f
    349a:	e3 97       	sbiw	r28, 0x33	; 51
    349c:	a4 96       	adiw	r28, 0x24	; 36
    349e:	9f ad       	ldd	r25, Y+63	; 0x3f
    34a0:	a4 97       	sbiw	r28, 0x24	; 36
    34a2:	89 0f       	add	r24, r25
    34a4:	e7 96       	adiw	r28, 0x37	; 55
    34a6:	8f af       	std	Y+63, r24	; 0x3f
    34a8:	e7 97       	sbiw	r28, 0x37	; 55
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	e8 96       	adiw	r28, 0x38	; 56
    34ae:	8f af       	std	Y+63, r24	; 0x3f
    34b0:	e8 97       	sbiw	r28, 0x38	; 56
    34b2:	e7 96       	adiw	r28, 0x37	; 55
    34b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    34b6:	e7 97       	sbiw	r28, 0x37	; 55
    34b8:	a4 96       	adiw	r28, 0x24	; 36
    34ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    34bc:	a4 97       	sbiw	r28, 0x24	; 36
    34be:	98 17       	cp	r25, r24
    34c0:	18 f0       	brcs	.+6      	; 0x34c8 <T0_GetStatus+0x866>
    34c2:	e8 96       	adiw	r28, 0x38	; 56
    34c4:	1f ae       	std	Y+63, r1	; 0x3f
    34c6:	e8 97       	sbiw	r28, 0x38	; 56
    34c8:	e6 96       	adiw	r28, 0x36	; 54
    34ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    34cc:	e6 97       	sbiw	r28, 0x36	; 54
    34ce:	e8 96       	adiw	r28, 0x38	; 56
    34d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    34d2:	e8 97       	sbiw	r28, 0x38	; 56
    34d4:	98 2b       	or	r25, r24
    34d6:	e6 96       	adiw	r28, 0x36	; 54
    34d8:	9f af       	std	Y+63, r25	; 0x3f
    34da:	e6 97       	sbiw	r28, 0x36	; 54
    34dc:	e7 96       	adiw	r28, 0x37	; 55
    34de:	9f ad       	ldd	r25, Y+63	; 0x3f
    34e0:	e7 97       	sbiw	r28, 0x37	; 55
    34e2:	a4 96       	adiw	r28, 0x24	; 36
    34e4:	9f af       	std	Y+63, r25	; 0x3f
    34e6:	a4 97       	sbiw	r28, 0x24	; 36
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	6d 96       	adiw	r28, 0x1d	; 29
    34ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    34ee:	6d 97       	sbiw	r28, 0x1d	; 29
    34f0:	89 0f       	add	r24, r25
    34f2:	a5 96       	adiw	r28, 0x25	; 37
    34f4:	8f af       	std	Y+63, r24	; 0x3f
    34f6:	a5 97       	sbiw	r28, 0x25	; 37
    34f8:	e6 96       	adiw	r28, 0x36	; 54
    34fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    34fc:	e6 97       	sbiw	r28, 0x36	; 54
    34fe:	a5 96       	adiw	r28, 0x25	; 37
    3500:	9f ad       	ldd	r25, Y+63	; 0x3f
    3502:	a5 97       	sbiw	r28, 0x25	; 37
    3504:	89 0f       	add	r24, r25
    3506:	a5 96       	adiw	r28, 0x25	; 37
    3508:	8f af       	std	Y+63, r24	; 0x3f
    350a:	a5 97       	sbiw	r28, 0x25	; 37
    350c:	6e 96       	adiw	r28, 0x1e	; 30
    350e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3510:	6e 97       	sbiw	r28, 0x1e	; 30
    3512:	6f 96       	adiw	r28, 0x1f	; 31
    3514:	3f ad       	ldd	r19, Y+63	; 0x3f
    3516:	6f 97       	sbiw	r28, 0x1f	; 31
    3518:	a0 96       	adiw	r28, 0x20	; 32
    351a:	4f ad       	ldd	r20, Y+63	; 0x3f
    351c:	a0 97       	sbiw	r28, 0x20	; 32
    351e:	a1 96       	adiw	r28, 0x21	; 33
    3520:	5f ad       	ldd	r21, Y+63	; 0x3f
    3522:	a1 97       	sbiw	r28, 0x21	; 33
    3524:	a2 96       	adiw	r28, 0x22	; 34
    3526:	6f ad       	ldd	r22, Y+63	; 0x3f
    3528:	a2 97       	sbiw	r28, 0x22	; 34
    352a:	a3 96       	adiw	r28, 0x23	; 35
    352c:	7f ad       	ldd	r23, Y+63	; 0x3f
    352e:	a3 97       	sbiw	r28, 0x23	; 35
    3530:	a4 96       	adiw	r28, 0x24	; 36
    3532:	8f ad       	ldd	r24, Y+63	; 0x3f
    3534:	a4 97       	sbiw	r28, 0x24	; 36
    3536:	a5 96       	adiw	r28, 0x25	; 37
    3538:	9f ad       	ldd	r25, Y+63	; 0x3f
    353a:	a5 97       	sbiw	r28, 0x25	; 37
    353c:	20 93 8e 01 	sts	0x018E, r18
    3540:	30 93 8f 01 	sts	0x018F, r19
    3544:	40 93 90 01 	sts	0x0190, r20
    3548:	50 93 91 01 	sts	0x0191, r21
    354c:	60 93 92 01 	sts	0x0192, r22
    3550:	70 93 93 01 	sts	0x0193, r23
    3554:	80 93 94 01 	sts	0x0194, r24
    3558:	90 93 95 01 	sts	0x0195, r25
    355c:	10 c0       	rjmp	.+32     	; 0x357e <T0_GetStatus+0x91c>
      
      //if the time is up
      else
      {
         //check if the global pointer to function holds a valid function address
         if (G_fptr != NULLPTR)
    355e:	80 91 84 01 	lds	r24, 0x0184
    3562:	90 91 85 01 	lds	r25, 0x0185
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	29 f0       	breq	.+10     	; 0x3574 <T0_GetStatus+0x912>
         {
            //if so, call the function
            G_fptr();
    356a:	e0 91 84 01 	lds	r30, 0x0184
    356e:	f0 91 85 01 	lds	r31, 0x0185
    3572:	09 95       	icall
         }
         //stop the timer
         T0_Stop();
    3574:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <T0_Stop>
         //return a E_OK state
         return E_OK;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <T0_GetStatus+0x91e>
         
      }
      // if all failed, return an error state
   return E_ERROR;
    357e:	19 82       	std	Y+1, r1	; 0x01
    3580:	89 81       	ldd	r24, Y+1	; 0x01
}
    3582:	c9 58       	subi	r28, 0x89	; 137
    3584:	df 4f       	sbci	r29, 0xFF	; 255
    3586:	0f b6       	in	r0, 0x3f	; 63
    3588:	f8 94       	cli
    358a:	de bf       	out	0x3e, r29	; 62
    358c:	0f be       	out	0x3f, r0	; 63
    358e:	cd bf       	out	0x3d, r28	; 61
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <__vector_11>:

/******************** ISR FUNCTIONS ****************************************/

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER0_OVF_vect)
{
    3596:	1f 92       	push	r1
    3598:	0f 92       	push	r0
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	0f 92       	push	r0
    359e:	11 24       	eor	r1, r1
    35a0:	2f 93       	push	r18
    35a2:	3f 93       	push	r19
    35a4:	4f 93       	push	r20
    35a6:	5f 93       	push	r21
    35a8:	6f 93       	push	r22
    35aa:	7f 93       	push	r23
    35ac:	8f 93       	push	r24
    35ae:	9f 93       	push	r25
    35b0:	af 93       	push	r26
    35b2:	bf 93       	push	r27
    35b4:	ef 93       	push	r30
    35b6:	ff 93       	push	r31
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	c6 57       	subi	r28, 0x76	; 118
    35c2:	d0 40       	sbci	r29, 0x00	; 0
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	cd bf       	out	0x3d, r28	; 61
   //if the current overflow value is less than the total overflows value
   if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
    35c8:	80 91 8e 01 	lds	r24, 0x018E
    35cc:	89 a7       	std	Y+41, r24	; 0x29
    35ce:	90 91 8f 01 	lds	r25, 0x018F
    35d2:	9a a7       	std	Y+42, r25	; 0x2a
    35d4:	80 91 90 01 	lds	r24, 0x0190
    35d8:	8b a7       	std	Y+43, r24	; 0x2b
    35da:	90 91 91 01 	lds	r25, 0x0191
    35de:	9c a7       	std	Y+44, r25	; 0x2c
    35e0:	80 91 92 01 	lds	r24, 0x0192
    35e4:	8d a7       	std	Y+45, r24	; 0x2d
    35e6:	90 91 93 01 	lds	r25, 0x0193
    35ea:	9e a7       	std	Y+46, r25	; 0x2e
    35ec:	80 91 94 01 	lds	r24, 0x0194
    35f0:	8f a7       	std	Y+47, r24	; 0x2f
    35f2:	90 91 95 01 	lds	r25, 0x0195
    35f6:	98 ab       	std	Y+48, r25	; 0x30
    35f8:	80 91 86 01 	lds	r24, 0x0186
    35fc:	89 a3       	std	Y+33, r24	; 0x21
    35fe:	90 91 87 01 	lds	r25, 0x0187
    3602:	9a a3       	std	Y+34, r25	; 0x22
    3604:	80 91 88 01 	lds	r24, 0x0188
    3608:	8b a3       	std	Y+35, r24	; 0x23
    360a:	90 91 89 01 	lds	r25, 0x0189
    360e:	9c a3       	std	Y+36, r25	; 0x24
    3610:	80 91 8a 01 	lds	r24, 0x018A
    3614:	8d a3       	std	Y+37, r24	; 0x25
    3616:	90 91 8b 01 	lds	r25, 0x018B
    361a:	9e a3       	std	Y+38, r25	; 0x26
    361c:	80 91 8c 01 	lds	r24, 0x018C
    3620:	8f a3       	std	Y+39, r24	; 0x27
    3622:	90 91 8d 01 	lds	r25, 0x018D
    3626:	98 a7       	std	Y+40, r25	; 0x28
    3628:	88 a5       	ldd	r24, Y+40	; 0x28
    362a:	98 a9       	ldd	r25, Y+48	; 0x30
    362c:	98 17       	cp	r25, r24
    362e:	08 f4       	brcc	.+2      	; 0x3632 <__vector_11+0x9c>
    3630:	40 c0       	rjmp	.+128    	; 0x36b2 <__vector_11+0x11c>
    3632:	88 a5       	ldd	r24, Y+40	; 0x28
    3634:	98 a9       	ldd	r25, Y+48	; 0x30
    3636:	89 17       	cp	r24, r25
    3638:	09 f0       	breq	.+2      	; 0x363c <__vector_11+0xa6>
    363a:	c2 c1       	rjmp	.+900    	; 0x39c0 <__vector_11+0x42a>
    363c:	8f a1       	ldd	r24, Y+39	; 0x27
    363e:	9f a5       	ldd	r25, Y+47	; 0x2f
    3640:	98 17       	cp	r25, r24
    3642:	b8 f1       	brcs	.+110    	; 0x36b2 <__vector_11+0x11c>
    3644:	8f a1       	ldd	r24, Y+39	; 0x27
    3646:	9f a5       	ldd	r25, Y+47	; 0x2f
    3648:	89 17       	cp	r24, r25
    364a:	09 f0       	breq	.+2      	; 0x364e <__vector_11+0xb8>
    364c:	b9 c1       	rjmp	.+882    	; 0x39c0 <__vector_11+0x42a>
    364e:	8e a1       	ldd	r24, Y+38	; 0x26
    3650:	9e a5       	ldd	r25, Y+46	; 0x2e
    3652:	98 17       	cp	r25, r24
    3654:	70 f1       	brcs	.+92     	; 0x36b2 <__vector_11+0x11c>
    3656:	8e a1       	ldd	r24, Y+38	; 0x26
    3658:	9e a5       	ldd	r25, Y+46	; 0x2e
    365a:	89 17       	cp	r24, r25
    365c:	09 f0       	breq	.+2      	; 0x3660 <__vector_11+0xca>
    365e:	b0 c1       	rjmp	.+864    	; 0x39c0 <__vector_11+0x42a>
    3660:	8d a1       	ldd	r24, Y+37	; 0x25
    3662:	9d a5       	ldd	r25, Y+45	; 0x2d
    3664:	98 17       	cp	r25, r24
    3666:	28 f1       	brcs	.+74     	; 0x36b2 <__vector_11+0x11c>
    3668:	8d a1       	ldd	r24, Y+37	; 0x25
    366a:	9d a5       	ldd	r25, Y+45	; 0x2d
    366c:	89 17       	cp	r24, r25
    366e:	09 f0       	breq	.+2      	; 0x3672 <__vector_11+0xdc>
    3670:	a7 c1       	rjmp	.+846    	; 0x39c0 <__vector_11+0x42a>
    3672:	8c a1       	ldd	r24, Y+36	; 0x24
    3674:	9c a5       	ldd	r25, Y+44	; 0x2c
    3676:	98 17       	cp	r25, r24
    3678:	e0 f0       	brcs	.+56     	; 0x36b2 <__vector_11+0x11c>
    367a:	8c a1       	ldd	r24, Y+36	; 0x24
    367c:	9c a5       	ldd	r25, Y+44	; 0x2c
    367e:	89 17       	cp	r24, r25
    3680:	09 f0       	breq	.+2      	; 0x3684 <__vector_11+0xee>
    3682:	9e c1       	rjmp	.+828    	; 0x39c0 <__vector_11+0x42a>
    3684:	8b a1       	ldd	r24, Y+35	; 0x23
    3686:	9b a5       	ldd	r25, Y+43	; 0x2b
    3688:	98 17       	cp	r25, r24
    368a:	98 f0       	brcs	.+38     	; 0x36b2 <__vector_11+0x11c>
    368c:	8b a1       	ldd	r24, Y+35	; 0x23
    368e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3690:	89 17       	cp	r24, r25
    3692:	09 f0       	breq	.+2      	; 0x3696 <__vector_11+0x100>
    3694:	95 c1       	rjmp	.+810    	; 0x39c0 <__vector_11+0x42a>
    3696:	8a a1       	ldd	r24, Y+34	; 0x22
    3698:	9a a5       	ldd	r25, Y+42	; 0x2a
    369a:	98 17       	cp	r25, r24
    369c:	50 f0       	brcs	.+20     	; 0x36b2 <__vector_11+0x11c>
    369e:	8a a1       	ldd	r24, Y+34	; 0x22
    36a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a2:	89 17       	cp	r24, r25
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <__vector_11+0x112>
    36a6:	8c c1       	rjmp	.+792    	; 0x39c0 <__vector_11+0x42a>
    36a8:	89 a1       	ldd	r24, Y+33	; 0x21
    36aa:	99 a5       	ldd	r25, Y+41	; 0x29
    36ac:	98 17       	cp	r25, r24
    36ae:	08 f0       	brcs	.+2      	; 0x36b2 <__vector_11+0x11c>
    36b0:	87 c1       	rjmp	.+782    	; 0x39c0 <__vector_11+0x42a>
   {
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
    36b2:	80 91 8e 01 	lds	r24, 0x018E
    36b6:	89 8f       	std	Y+25, r24	; 0x19
    36b8:	90 91 8f 01 	lds	r25, 0x018F
    36bc:	9a 8f       	std	Y+26, r25	; 0x1a
    36be:	80 91 90 01 	lds	r24, 0x0190
    36c2:	8b 8f       	std	Y+27, r24	; 0x1b
    36c4:	90 91 91 01 	lds	r25, 0x0191
    36c8:	9c 8f       	std	Y+28, r25	; 0x1c
    36ca:	80 91 92 01 	lds	r24, 0x0192
    36ce:	8d 8f       	std	Y+29, r24	; 0x1d
    36d0:	90 91 93 01 	lds	r25, 0x0193
    36d4:	9e 8f       	std	Y+30, r25	; 0x1e
    36d6:	80 91 94 01 	lds	r24, 0x0194
    36da:	8f 8f       	std	Y+31, r24	; 0x1f
    36dc:	90 91 95 01 	lds	r25, 0x0195
    36e0:	98 a3       	std	Y+32, r25	; 0x20
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	89 ab       	std	Y+49, r24	; 0x31
    36e6:	1a aa       	std	Y+50, r1	; 0x32
    36e8:	1b aa       	std	Y+51, r1	; 0x33
    36ea:	1c aa       	std	Y+52, r1	; 0x34
    36ec:	1d aa       	std	Y+53, r1	; 0x35
    36ee:	1e aa       	std	Y+54, r1	; 0x36
    36f0:	1f aa       	std	Y+55, r1	; 0x37
    36f2:	18 ae       	std	Y+56, r1	; 0x38
    36f4:	99 8d       	ldd	r25, Y+25	; 0x19
    36f6:	89 a9       	ldd	r24, Y+49	; 0x31
    36f8:	98 0f       	add	r25, r24
    36fa:	99 af       	std	Y+57, r25	; 0x39
    36fc:	91 e0       	ldi	r25, 0x01	; 1
    36fe:	22 96       	adiw	r28, 0x02	; 2
    3700:	9f af       	std	Y+63, r25	; 0x3f
    3702:	22 97       	sbiw	r28, 0x02	; 2
    3704:	89 ad       	ldd	r24, Y+57	; 0x39
    3706:	99 8d       	ldd	r25, Y+25	; 0x19
    3708:	89 17       	cp	r24, r25
    370a:	18 f0       	brcs	.+6      	; 0x3712 <__vector_11+0x17c>
    370c:	22 96       	adiw	r28, 0x02	; 2
    370e:	1f ae       	std	Y+63, r1	; 0x3f
    3710:	22 97       	sbiw	r28, 0x02	; 2
    3712:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3714:	9a a9       	ldd	r25, Y+50	; 0x32
    3716:	89 0f       	add	r24, r25
    3718:	8a af       	std	Y+58, r24	; 0x3a
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	23 96       	adiw	r28, 0x03	; 3
    371e:	8f af       	std	Y+63, r24	; 0x3f
    3720:	23 97       	sbiw	r28, 0x03	; 3
    3722:	9a ad       	ldd	r25, Y+58	; 0x3a
    3724:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3726:	98 17       	cp	r25, r24
    3728:	18 f0       	brcs	.+6      	; 0x3730 <__vector_11+0x19a>
    372a:	23 96       	adiw	r28, 0x03	; 3
    372c:	1f ae       	std	Y+63, r1	; 0x3f
    372e:	23 97       	sbiw	r28, 0x03	; 3
    3730:	22 96       	adiw	r28, 0x02	; 2
    3732:	9f ad       	ldd	r25, Y+63	; 0x3f
    3734:	22 97       	sbiw	r28, 0x02	; 2
    3736:	8a ad       	ldd	r24, Y+58	; 0x3a
    3738:	98 0f       	add	r25, r24
    373a:	24 96       	adiw	r28, 0x04	; 4
    373c:	9f af       	std	Y+63, r25	; 0x3f
    373e:	24 97       	sbiw	r28, 0x04	; 4
    3740:	91 e0       	ldi	r25, 0x01	; 1
    3742:	25 96       	adiw	r28, 0x05	; 5
    3744:	9f af       	std	Y+63, r25	; 0x3f
    3746:	25 97       	sbiw	r28, 0x05	; 5
    3748:	24 96       	adiw	r28, 0x04	; 4
    374a:	8f ad       	ldd	r24, Y+63	; 0x3f
    374c:	24 97       	sbiw	r28, 0x04	; 4
    374e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3750:	89 17       	cp	r24, r25
    3752:	18 f0       	brcs	.+6      	; 0x375a <__vector_11+0x1c4>
    3754:	25 96       	adiw	r28, 0x05	; 5
    3756:	1f ae       	std	Y+63, r1	; 0x3f
    3758:	25 97       	sbiw	r28, 0x05	; 5
    375a:	23 96       	adiw	r28, 0x03	; 3
    375c:	8f ad       	ldd	r24, Y+63	; 0x3f
    375e:	23 97       	sbiw	r28, 0x03	; 3
    3760:	25 96       	adiw	r28, 0x05	; 5
    3762:	9f ad       	ldd	r25, Y+63	; 0x3f
    3764:	25 97       	sbiw	r28, 0x05	; 5
    3766:	89 2b       	or	r24, r25
    3768:	23 96       	adiw	r28, 0x03	; 3
    376a:	8f af       	std	Y+63, r24	; 0x3f
    376c:	23 97       	sbiw	r28, 0x03	; 3
    376e:	24 96       	adiw	r28, 0x04	; 4
    3770:	8f ad       	ldd	r24, Y+63	; 0x3f
    3772:	24 97       	sbiw	r28, 0x04	; 4
    3774:	8a af       	std	Y+58, r24	; 0x3a
    3776:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3778:	8b a9       	ldd	r24, Y+51	; 0x33
    377a:	98 0f       	add	r25, r24
    377c:	9b af       	std	Y+59, r25	; 0x3b
    377e:	91 e0       	ldi	r25, 0x01	; 1
    3780:	26 96       	adiw	r28, 0x06	; 6
    3782:	9f af       	std	Y+63, r25	; 0x3f
    3784:	26 97       	sbiw	r28, 0x06	; 6
    3786:	8b ad       	ldd	r24, Y+59	; 0x3b
    3788:	9b 8d       	ldd	r25, Y+27	; 0x1b
    378a:	89 17       	cp	r24, r25
    378c:	18 f0       	brcs	.+6      	; 0x3794 <__vector_11+0x1fe>
    378e:	26 96       	adiw	r28, 0x06	; 6
    3790:	1f ae       	std	Y+63, r1	; 0x3f
    3792:	26 97       	sbiw	r28, 0x06	; 6
    3794:	23 96       	adiw	r28, 0x03	; 3
    3796:	8f ad       	ldd	r24, Y+63	; 0x3f
    3798:	23 97       	sbiw	r28, 0x03	; 3
    379a:	9b ad       	ldd	r25, Y+59	; 0x3b
    379c:	89 0f       	add	r24, r25
    379e:	27 96       	adiw	r28, 0x07	; 7
    37a0:	8f af       	std	Y+63, r24	; 0x3f
    37a2:	27 97       	sbiw	r28, 0x07	; 7
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	28 96       	adiw	r28, 0x08	; 8
    37a8:	8f af       	std	Y+63, r24	; 0x3f
    37aa:	28 97       	sbiw	r28, 0x08	; 8
    37ac:	27 96       	adiw	r28, 0x07	; 7
    37ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    37b0:	27 97       	sbiw	r28, 0x07	; 7
    37b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b4:	98 17       	cp	r25, r24
    37b6:	18 f0       	brcs	.+6      	; 0x37be <__vector_11+0x228>
    37b8:	28 96       	adiw	r28, 0x08	; 8
    37ba:	1f ae       	std	Y+63, r1	; 0x3f
    37bc:	28 97       	sbiw	r28, 0x08	; 8
    37be:	26 96       	adiw	r28, 0x06	; 6
    37c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    37c2:	26 97       	sbiw	r28, 0x06	; 6
    37c4:	28 96       	adiw	r28, 0x08	; 8
    37c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    37c8:	28 97       	sbiw	r28, 0x08	; 8
    37ca:	98 2b       	or	r25, r24
    37cc:	26 96       	adiw	r28, 0x06	; 6
    37ce:	9f af       	std	Y+63, r25	; 0x3f
    37d0:	26 97       	sbiw	r28, 0x06	; 6
    37d2:	27 96       	adiw	r28, 0x07	; 7
    37d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    37d6:	27 97       	sbiw	r28, 0x07	; 7
    37d8:	9b af       	std	Y+59, r25	; 0x3b
    37da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37dc:	9c a9       	ldd	r25, Y+52	; 0x34
    37de:	89 0f       	add	r24, r25
    37e0:	8c af       	std	Y+60, r24	; 0x3c
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	29 96       	adiw	r28, 0x09	; 9
    37e6:	8f af       	std	Y+63, r24	; 0x3f
    37e8:	29 97       	sbiw	r28, 0x09	; 9
    37ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    37ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37ee:	98 17       	cp	r25, r24
    37f0:	18 f0       	brcs	.+6      	; 0x37f8 <__vector_11+0x262>
    37f2:	29 96       	adiw	r28, 0x09	; 9
    37f4:	1f ae       	std	Y+63, r1	; 0x3f
    37f6:	29 97       	sbiw	r28, 0x09	; 9
    37f8:	26 96       	adiw	r28, 0x06	; 6
    37fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    37fc:	26 97       	sbiw	r28, 0x06	; 6
    37fe:	8c ad       	ldd	r24, Y+60	; 0x3c
    3800:	98 0f       	add	r25, r24
    3802:	2a 96       	adiw	r28, 0x0a	; 10
    3804:	9f af       	std	Y+63, r25	; 0x3f
    3806:	2a 97       	sbiw	r28, 0x0a	; 10
    3808:	91 e0       	ldi	r25, 0x01	; 1
    380a:	2b 96       	adiw	r28, 0x0b	; 11
    380c:	9f af       	std	Y+63, r25	; 0x3f
    380e:	2b 97       	sbiw	r28, 0x0b	; 11
    3810:	2a 96       	adiw	r28, 0x0a	; 10
    3812:	8f ad       	ldd	r24, Y+63	; 0x3f
    3814:	2a 97       	sbiw	r28, 0x0a	; 10
    3816:	9c ad       	ldd	r25, Y+60	; 0x3c
    3818:	89 17       	cp	r24, r25
    381a:	18 f0       	brcs	.+6      	; 0x3822 <__vector_11+0x28c>
    381c:	2b 96       	adiw	r28, 0x0b	; 11
    381e:	1f ae       	std	Y+63, r1	; 0x3f
    3820:	2b 97       	sbiw	r28, 0x0b	; 11
    3822:	29 96       	adiw	r28, 0x09	; 9
    3824:	8f ad       	ldd	r24, Y+63	; 0x3f
    3826:	29 97       	sbiw	r28, 0x09	; 9
    3828:	2b 96       	adiw	r28, 0x0b	; 11
    382a:	9f ad       	ldd	r25, Y+63	; 0x3f
    382c:	2b 97       	sbiw	r28, 0x0b	; 11
    382e:	89 2b       	or	r24, r25
    3830:	29 96       	adiw	r28, 0x09	; 9
    3832:	8f af       	std	Y+63, r24	; 0x3f
    3834:	29 97       	sbiw	r28, 0x09	; 9
    3836:	2a 96       	adiw	r28, 0x0a	; 10
    3838:	8f ad       	ldd	r24, Y+63	; 0x3f
    383a:	2a 97       	sbiw	r28, 0x0a	; 10
    383c:	8c af       	std	Y+60, r24	; 0x3c
    383e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3840:	8d a9       	ldd	r24, Y+53	; 0x35
    3842:	98 0f       	add	r25, r24
    3844:	9d af       	std	Y+61, r25	; 0x3d
    3846:	91 e0       	ldi	r25, 0x01	; 1
    3848:	2c 96       	adiw	r28, 0x0c	; 12
    384a:	9f af       	std	Y+63, r25	; 0x3f
    384c:	2c 97       	sbiw	r28, 0x0c	; 12
    384e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3850:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3852:	89 17       	cp	r24, r25
    3854:	18 f0       	brcs	.+6      	; 0x385c <__vector_11+0x2c6>
    3856:	2c 96       	adiw	r28, 0x0c	; 12
    3858:	1f ae       	std	Y+63, r1	; 0x3f
    385a:	2c 97       	sbiw	r28, 0x0c	; 12
    385c:	29 96       	adiw	r28, 0x09	; 9
    385e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3860:	29 97       	sbiw	r28, 0x09	; 9
    3862:	9d ad       	ldd	r25, Y+61	; 0x3d
    3864:	89 0f       	add	r24, r25
    3866:	2d 96       	adiw	r28, 0x0d	; 13
    3868:	8f af       	std	Y+63, r24	; 0x3f
    386a:	2d 97       	sbiw	r28, 0x0d	; 13
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	2e 96       	adiw	r28, 0x0e	; 14
    3870:	8f af       	std	Y+63, r24	; 0x3f
    3872:	2e 97       	sbiw	r28, 0x0e	; 14
    3874:	2d 96       	adiw	r28, 0x0d	; 13
    3876:	9f ad       	ldd	r25, Y+63	; 0x3f
    3878:	2d 97       	sbiw	r28, 0x0d	; 13
    387a:	8d ad       	ldd	r24, Y+61	; 0x3d
    387c:	98 17       	cp	r25, r24
    387e:	18 f0       	brcs	.+6      	; 0x3886 <__vector_11+0x2f0>
    3880:	2e 96       	adiw	r28, 0x0e	; 14
    3882:	1f ae       	std	Y+63, r1	; 0x3f
    3884:	2e 97       	sbiw	r28, 0x0e	; 14
    3886:	2c 96       	adiw	r28, 0x0c	; 12
    3888:	9f ad       	ldd	r25, Y+63	; 0x3f
    388a:	2c 97       	sbiw	r28, 0x0c	; 12
    388c:	2e 96       	adiw	r28, 0x0e	; 14
    388e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3890:	2e 97       	sbiw	r28, 0x0e	; 14
    3892:	98 2b       	or	r25, r24
    3894:	2c 96       	adiw	r28, 0x0c	; 12
    3896:	9f af       	std	Y+63, r25	; 0x3f
    3898:	2c 97       	sbiw	r28, 0x0c	; 12
    389a:	2d 96       	adiw	r28, 0x0d	; 13
    389c:	9f ad       	ldd	r25, Y+63	; 0x3f
    389e:	2d 97       	sbiw	r28, 0x0d	; 13
    38a0:	9d af       	std	Y+61, r25	; 0x3d
    38a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38a4:	9e a9       	ldd	r25, Y+54	; 0x36
    38a6:	89 0f       	add	r24, r25
    38a8:	8e af       	std	Y+62, r24	; 0x3e
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	2f 96       	adiw	r28, 0x0f	; 15
    38ae:	8f af       	std	Y+63, r24	; 0x3f
    38b0:	2f 97       	sbiw	r28, 0x0f	; 15
    38b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    38b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38b6:	98 17       	cp	r25, r24
    38b8:	18 f0       	brcs	.+6      	; 0x38c0 <__vector_11+0x32a>
    38ba:	2f 96       	adiw	r28, 0x0f	; 15
    38bc:	1f ae       	std	Y+63, r1	; 0x3f
    38be:	2f 97       	sbiw	r28, 0x0f	; 15
    38c0:	2c 96       	adiw	r28, 0x0c	; 12
    38c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    38c4:	2c 97       	sbiw	r28, 0x0c	; 12
    38c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    38c8:	98 0f       	add	r25, r24
    38ca:	60 96       	adiw	r28, 0x10	; 16
    38cc:	9f af       	std	Y+63, r25	; 0x3f
    38ce:	60 97       	sbiw	r28, 0x10	; 16
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	61 96       	adiw	r28, 0x11	; 17
    38d4:	9f af       	std	Y+63, r25	; 0x3f
    38d6:	61 97       	sbiw	r28, 0x11	; 17
    38d8:	60 96       	adiw	r28, 0x10	; 16
    38da:	8f ad       	ldd	r24, Y+63	; 0x3f
    38dc:	60 97       	sbiw	r28, 0x10	; 16
    38de:	9e ad       	ldd	r25, Y+62	; 0x3e
    38e0:	89 17       	cp	r24, r25
    38e2:	18 f0       	brcs	.+6      	; 0x38ea <__vector_11+0x354>
    38e4:	61 96       	adiw	r28, 0x11	; 17
    38e6:	1f ae       	std	Y+63, r1	; 0x3f
    38e8:	61 97       	sbiw	r28, 0x11	; 17
    38ea:	2f 96       	adiw	r28, 0x0f	; 15
    38ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    38ee:	2f 97       	sbiw	r28, 0x0f	; 15
    38f0:	61 96       	adiw	r28, 0x11	; 17
    38f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    38f4:	61 97       	sbiw	r28, 0x11	; 17
    38f6:	89 2b       	or	r24, r25
    38f8:	2f 96       	adiw	r28, 0x0f	; 15
    38fa:	8f af       	std	Y+63, r24	; 0x3f
    38fc:	2f 97       	sbiw	r28, 0x0f	; 15
    38fe:	60 96       	adiw	r28, 0x10	; 16
    3900:	8f ad       	ldd	r24, Y+63	; 0x3f
    3902:	60 97       	sbiw	r28, 0x10	; 16
    3904:	8e af       	std	Y+62, r24	; 0x3e
    3906:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3908:	8f a9       	ldd	r24, Y+55	; 0x37
    390a:	98 0f       	add	r25, r24
    390c:	9f af       	std	Y+63, r25	; 0x3f
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	62 96       	adiw	r28, 0x12	; 18
    3912:	9f af       	std	Y+63, r25	; 0x3f
    3914:	62 97       	sbiw	r28, 0x12	; 18
    3916:	8f ad       	ldd	r24, Y+63	; 0x3f
    3918:	9f 8d       	ldd	r25, Y+31	; 0x1f
    391a:	89 17       	cp	r24, r25
    391c:	18 f0       	brcs	.+6      	; 0x3924 <__vector_11+0x38e>
    391e:	62 96       	adiw	r28, 0x12	; 18
    3920:	1f ae       	std	Y+63, r1	; 0x3f
    3922:	62 97       	sbiw	r28, 0x12	; 18
    3924:	2f 96       	adiw	r28, 0x0f	; 15
    3926:	8f ad       	ldd	r24, Y+63	; 0x3f
    3928:	2f 97       	sbiw	r28, 0x0f	; 15
    392a:	9f ad       	ldd	r25, Y+63	; 0x3f
    392c:	89 0f       	add	r24, r25
    392e:	63 96       	adiw	r28, 0x13	; 19
    3930:	8f af       	std	Y+63, r24	; 0x3f
    3932:	63 97       	sbiw	r28, 0x13	; 19
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	64 96       	adiw	r28, 0x14	; 20
    3938:	8f af       	std	Y+63, r24	; 0x3f
    393a:	64 97       	sbiw	r28, 0x14	; 20
    393c:	63 96       	adiw	r28, 0x13	; 19
    393e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3940:	63 97       	sbiw	r28, 0x13	; 19
    3942:	8f ad       	ldd	r24, Y+63	; 0x3f
    3944:	98 17       	cp	r25, r24
    3946:	18 f0       	brcs	.+6      	; 0x394e <__vector_11+0x3b8>
    3948:	64 96       	adiw	r28, 0x14	; 20
    394a:	1f ae       	std	Y+63, r1	; 0x3f
    394c:	64 97       	sbiw	r28, 0x14	; 20
    394e:	62 96       	adiw	r28, 0x12	; 18
    3950:	9f ad       	ldd	r25, Y+63	; 0x3f
    3952:	62 97       	sbiw	r28, 0x12	; 18
    3954:	64 96       	adiw	r28, 0x14	; 20
    3956:	8f ad       	ldd	r24, Y+63	; 0x3f
    3958:	64 97       	sbiw	r28, 0x14	; 20
    395a:	98 2b       	or	r25, r24
    395c:	62 96       	adiw	r28, 0x12	; 18
    395e:	9f af       	std	Y+63, r25	; 0x3f
    3960:	62 97       	sbiw	r28, 0x12	; 18
    3962:	63 96       	adiw	r28, 0x13	; 19
    3964:	9f ad       	ldd	r25, Y+63	; 0x3f
    3966:	63 97       	sbiw	r28, 0x13	; 19
    3968:	9f af       	std	Y+63, r25	; 0x3f
    396a:	88 a1       	ldd	r24, Y+32	; 0x20
    396c:	98 ad       	ldd	r25, Y+56	; 0x38
    396e:	89 0f       	add	r24, r25
    3970:	21 96       	adiw	r28, 0x01	; 1
    3972:	8f af       	std	Y+63, r24	; 0x3f
    3974:	21 97       	sbiw	r28, 0x01	; 1
    3976:	62 96       	adiw	r28, 0x12	; 18
    3978:	8f ad       	ldd	r24, Y+63	; 0x3f
    397a:	62 97       	sbiw	r28, 0x12	; 18
    397c:	21 96       	adiw	r28, 0x01	; 1
    397e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3980:	21 97       	sbiw	r28, 0x01	; 1
    3982:	89 0f       	add	r24, r25
    3984:	21 96       	adiw	r28, 0x01	; 1
    3986:	8f af       	std	Y+63, r24	; 0x3f
    3988:	21 97       	sbiw	r28, 0x01	; 1
    398a:	29 ad       	ldd	r18, Y+57	; 0x39
    398c:	3a ad       	ldd	r19, Y+58	; 0x3a
    398e:	4b ad       	ldd	r20, Y+59	; 0x3b
    3990:	5c ad       	ldd	r21, Y+60	; 0x3c
    3992:	6d ad       	ldd	r22, Y+61	; 0x3d
    3994:	7e ad       	ldd	r23, Y+62	; 0x3e
    3996:	8f ad       	ldd	r24, Y+63	; 0x3f
    3998:	21 96       	adiw	r28, 0x01	; 1
    399a:	9f ad       	ldd	r25, Y+63	; 0x3f
    399c:	21 97       	sbiw	r28, 0x01	; 1
    399e:	20 93 8e 01 	sts	0x018E, r18
    39a2:	30 93 8f 01 	sts	0x018F, r19
    39a6:	40 93 90 01 	sts	0x0190, r20
    39aa:	50 93 91 01 	sts	0x0191, r21
    39ae:	60 93 92 01 	sts	0x0192, r22
    39b2:	70 93 93 01 	sts	0x0193, r23
    39b6:	80 93 94 01 	sts	0x0194, r24
    39ba:	90 93 95 01 	sts	0x0195, r25
    39be:	6e c2       	rjmp	.+1244   	; 0x3e9c <__vector_11+0x906>
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
    39c0:	80 91 8e 01 	lds	r24, 0x018E
    39c4:	89 8b       	std	Y+17, r24	; 0x11
    39c6:	90 91 8f 01 	lds	r25, 0x018F
    39ca:	9a 8b       	std	Y+18, r25	; 0x12
    39cc:	80 91 90 01 	lds	r24, 0x0190
    39d0:	8b 8b       	std	Y+19, r24	; 0x13
    39d2:	90 91 91 01 	lds	r25, 0x0191
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	80 91 92 01 	lds	r24, 0x0192
    39dc:	8d 8b       	std	Y+21, r24	; 0x15
    39de:	90 91 93 01 	lds	r25, 0x0193
    39e2:	9e 8b       	std	Y+22, r25	; 0x16
    39e4:	80 91 94 01 	lds	r24, 0x0194
    39e8:	8f 8b       	std	Y+23, r24	; 0x17
    39ea:	90 91 95 01 	lds	r25, 0x0195
    39ee:	98 8f       	std	Y+24, r25	; 0x18
    39f0:	80 91 86 01 	lds	r24, 0x0186
    39f4:	89 87       	std	Y+9, r24	; 0x09
    39f6:	90 91 87 01 	lds	r25, 0x0187
    39fa:	9a 87       	std	Y+10, r25	; 0x0a
    39fc:	80 91 88 01 	lds	r24, 0x0188
    3a00:	8b 87       	std	Y+11, r24	; 0x0b
    3a02:	90 91 89 01 	lds	r25, 0x0189
    3a06:	9c 87       	std	Y+12, r25	; 0x0c
    3a08:	80 91 8a 01 	lds	r24, 0x018A
    3a0c:	8d 87       	std	Y+13, r24	; 0x0d
    3a0e:	90 91 8b 01 	lds	r25, 0x018B
    3a12:	9e 87       	std	Y+14, r25	; 0x0e
    3a14:	80 91 8c 01 	lds	r24, 0x018C
    3a18:	8f 87       	std	Y+15, r24	; 0x0f
    3a1a:	90 91 8d 01 	lds	r25, 0x018D
    3a1e:	98 8b       	std	Y+16, r25	; 0x10
    3a20:	89 89       	ldd	r24, Y+17	; 0x11
    3a22:	99 85       	ldd	r25, Y+9	; 0x09
    3a24:	89 17       	cp	r24, r25
    3a26:	09 f0       	breq	.+2      	; 0x3a2a <__vector_11+0x494>
    3a28:	1e c2       	rjmp	.+1084   	; 0x3e66 <__vector_11+0x8d0>
    3a2a:	8a 89       	ldd	r24, Y+18	; 0x12
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	89 17       	cp	r24, r25
    3a30:	09 f0       	breq	.+2      	; 0x3a34 <__vector_11+0x49e>
    3a32:	19 c2       	rjmp	.+1074   	; 0x3e66 <__vector_11+0x8d0>
    3a34:	8b 89       	ldd	r24, Y+19	; 0x13
    3a36:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a38:	89 17       	cp	r24, r25
    3a3a:	09 f0       	breq	.+2      	; 0x3a3e <__vector_11+0x4a8>
    3a3c:	14 c2       	rjmp	.+1064   	; 0x3e66 <__vector_11+0x8d0>
    3a3e:	8c 89       	ldd	r24, Y+20	; 0x14
    3a40:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a42:	89 17       	cp	r24, r25
    3a44:	09 f0       	breq	.+2      	; 0x3a48 <__vector_11+0x4b2>
    3a46:	0f c2       	rjmp	.+1054   	; 0x3e66 <__vector_11+0x8d0>
    3a48:	8d 89       	ldd	r24, Y+21	; 0x15
    3a4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a4c:	89 17       	cp	r24, r25
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <__vector_11+0x4bc>
    3a50:	0a c2       	rjmp	.+1044   	; 0x3e66 <__vector_11+0x8d0>
    3a52:	8e 89       	ldd	r24, Y+22	; 0x16
    3a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a56:	89 17       	cp	r24, r25
    3a58:	09 f0       	breq	.+2      	; 0x3a5c <__vector_11+0x4c6>
    3a5a:	05 c2       	rjmp	.+1034   	; 0x3e66 <__vector_11+0x8d0>
    3a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a60:	89 17       	cp	r24, r25
    3a62:	09 f0       	breq	.+2      	; 0x3a66 <__vector_11+0x4d0>
    3a64:	00 c2       	rjmp	.+1024   	; 0x3e66 <__vector_11+0x8d0>
    3a66:	88 8d       	ldd	r24, Y+24	; 0x18
    3a68:	98 89       	ldd	r25, Y+16	; 0x10
    3a6a:	89 17       	cp	r24, r25
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <__vector_11+0x4da>
    3a6e:	fb c1       	rjmp	.+1014   	; 0x3e66 <__vector_11+0x8d0>
   {
      //set the timer value to the remaining timing
      TCNT0_R=((T0_TICKS-1)-Gu32_T0LastOVTicks);
    3a70:	e2 e5       	ldi	r30, 0x52	; 82
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 91 96 01 	lds	r24, 0x0196
    3a78:	80 95       	com	r24
    3a7a:	80 83       	st	Z, r24
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
    3a7c:	80 91 8e 01 	lds	r24, 0x018E
    3a80:	89 83       	std	Y+1, r24	; 0x01
    3a82:	90 91 8f 01 	lds	r25, 0x018F
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	80 91 90 01 	lds	r24, 0x0190
    3a8c:	8b 83       	std	Y+3, r24	; 0x03
    3a8e:	90 91 91 01 	lds	r25, 0x0191
    3a92:	9c 83       	std	Y+4, r25	; 0x04
    3a94:	80 91 92 01 	lds	r24, 0x0192
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	90 91 93 01 	lds	r25, 0x0193
    3a9e:	9e 83       	std	Y+6, r25	; 0x06
    3aa0:	80 91 94 01 	lds	r24, 0x0194
    3aa4:	8f 83       	std	Y+7, r24	; 0x07
    3aa6:	90 91 95 01 	lds	r25, 0x0195
    3aaa:	98 87       	std	Y+8, r25	; 0x08
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	65 96       	adiw	r28, 0x15	; 21
    3ab0:	8f af       	std	Y+63, r24	; 0x3f
    3ab2:	65 97       	sbiw	r28, 0x15	; 21
    3ab4:	66 96       	adiw	r28, 0x16	; 22
    3ab6:	1f ae       	std	Y+63, r1	; 0x3f
    3ab8:	66 97       	sbiw	r28, 0x16	; 22
    3aba:	67 96       	adiw	r28, 0x17	; 23
    3abc:	1f ae       	std	Y+63, r1	; 0x3f
    3abe:	67 97       	sbiw	r28, 0x17	; 23
    3ac0:	68 96       	adiw	r28, 0x18	; 24
    3ac2:	1f ae       	std	Y+63, r1	; 0x3f
    3ac4:	68 97       	sbiw	r28, 0x18	; 24
    3ac6:	69 96       	adiw	r28, 0x19	; 25
    3ac8:	1f ae       	std	Y+63, r1	; 0x3f
    3aca:	69 97       	sbiw	r28, 0x19	; 25
    3acc:	6a 96       	adiw	r28, 0x1a	; 26
    3ace:	1f ae       	std	Y+63, r1	; 0x3f
    3ad0:	6a 97       	sbiw	r28, 0x1a	; 26
    3ad2:	6b 96       	adiw	r28, 0x1b	; 27
    3ad4:	1f ae       	std	Y+63, r1	; 0x3f
    3ad6:	6b 97       	sbiw	r28, 0x1b	; 27
    3ad8:	6c 96       	adiw	r28, 0x1c	; 28
    3ada:	1f ae       	std	Y+63, r1	; 0x3f
    3adc:	6c 97       	sbiw	r28, 0x1c	; 28
    3ade:	99 81       	ldd	r25, Y+1	; 0x01
    3ae0:	65 96       	adiw	r28, 0x15	; 21
    3ae2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ae4:	65 97       	sbiw	r28, 0x15	; 21
    3ae6:	98 0f       	add	r25, r24
    3ae8:	6d 96       	adiw	r28, 0x1d	; 29
    3aea:	9f af       	std	Y+63, r25	; 0x3f
    3aec:	6d 97       	sbiw	r28, 0x1d	; 29
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	a5 96       	adiw	r28, 0x25	; 37
    3af2:	9f af       	std	Y+63, r25	; 0x3f
    3af4:	a5 97       	sbiw	r28, 0x25	; 37
    3af6:	6d 96       	adiw	r28, 0x1d	; 29
    3af8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3afa:	6d 97       	sbiw	r28, 0x1d	; 29
    3afc:	99 81       	ldd	r25, Y+1	; 0x01
    3afe:	89 17       	cp	r24, r25
    3b00:	18 f0       	brcs	.+6      	; 0x3b08 <__vector_11+0x572>
    3b02:	a5 96       	adiw	r28, 0x25	; 37
    3b04:	1f ae       	std	Y+63, r1	; 0x3f
    3b06:	a5 97       	sbiw	r28, 0x25	; 37
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	66 96       	adiw	r28, 0x16	; 22
    3b0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b0e:	66 97       	sbiw	r28, 0x16	; 22
    3b10:	89 0f       	add	r24, r25
    3b12:	6e 96       	adiw	r28, 0x1e	; 30
    3b14:	8f af       	std	Y+63, r24	; 0x3f
    3b16:	6e 97       	sbiw	r28, 0x1e	; 30
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	a6 96       	adiw	r28, 0x26	; 38
    3b1c:	8f af       	std	Y+63, r24	; 0x3f
    3b1e:	a6 97       	sbiw	r28, 0x26	; 38
    3b20:	6e 96       	adiw	r28, 0x1e	; 30
    3b22:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b24:	6e 97       	sbiw	r28, 0x1e	; 30
    3b26:	8a 81       	ldd	r24, Y+2	; 0x02
    3b28:	98 17       	cp	r25, r24
    3b2a:	18 f0       	brcs	.+6      	; 0x3b32 <__vector_11+0x59c>
    3b2c:	a6 96       	adiw	r28, 0x26	; 38
    3b2e:	1f ae       	std	Y+63, r1	; 0x3f
    3b30:	a6 97       	sbiw	r28, 0x26	; 38
    3b32:	a5 96       	adiw	r28, 0x25	; 37
    3b34:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b36:	a5 97       	sbiw	r28, 0x25	; 37
    3b38:	6e 96       	adiw	r28, 0x1e	; 30
    3b3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b3c:	6e 97       	sbiw	r28, 0x1e	; 30
    3b3e:	98 0f       	add	r25, r24
    3b40:	a7 96       	adiw	r28, 0x27	; 39
    3b42:	9f af       	std	Y+63, r25	; 0x3f
    3b44:	a7 97       	sbiw	r28, 0x27	; 39
    3b46:	91 e0       	ldi	r25, 0x01	; 1
    3b48:	a8 96       	adiw	r28, 0x28	; 40
    3b4a:	9f af       	std	Y+63, r25	; 0x3f
    3b4c:	a8 97       	sbiw	r28, 0x28	; 40
    3b4e:	a7 96       	adiw	r28, 0x27	; 39
    3b50:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b52:	a7 97       	sbiw	r28, 0x27	; 39
    3b54:	6e 96       	adiw	r28, 0x1e	; 30
    3b56:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b58:	6e 97       	sbiw	r28, 0x1e	; 30
    3b5a:	89 17       	cp	r24, r25
    3b5c:	18 f0       	brcs	.+6      	; 0x3b64 <__vector_11+0x5ce>
    3b5e:	a8 96       	adiw	r28, 0x28	; 40
    3b60:	1f ae       	std	Y+63, r1	; 0x3f
    3b62:	a8 97       	sbiw	r28, 0x28	; 40
    3b64:	a6 96       	adiw	r28, 0x26	; 38
    3b66:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b68:	a6 97       	sbiw	r28, 0x26	; 38
    3b6a:	a8 96       	adiw	r28, 0x28	; 40
    3b6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b6e:	a8 97       	sbiw	r28, 0x28	; 40
    3b70:	89 2b       	or	r24, r25
    3b72:	a6 96       	adiw	r28, 0x26	; 38
    3b74:	8f af       	std	Y+63, r24	; 0x3f
    3b76:	a6 97       	sbiw	r28, 0x26	; 38
    3b78:	a7 96       	adiw	r28, 0x27	; 39
    3b7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b7c:	a7 97       	sbiw	r28, 0x27	; 39
    3b7e:	6e 96       	adiw	r28, 0x1e	; 30
    3b80:	8f af       	std	Y+63, r24	; 0x3f
    3b82:	6e 97       	sbiw	r28, 0x1e	; 30
    3b84:	9b 81       	ldd	r25, Y+3	; 0x03
    3b86:	67 96       	adiw	r28, 0x17	; 23
    3b88:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b8a:	67 97       	sbiw	r28, 0x17	; 23
    3b8c:	98 0f       	add	r25, r24
    3b8e:	6f 96       	adiw	r28, 0x1f	; 31
    3b90:	9f af       	std	Y+63, r25	; 0x3f
    3b92:	6f 97       	sbiw	r28, 0x1f	; 31
    3b94:	91 e0       	ldi	r25, 0x01	; 1
    3b96:	a9 96       	adiw	r28, 0x29	; 41
    3b98:	9f af       	std	Y+63, r25	; 0x3f
    3b9a:	a9 97       	sbiw	r28, 0x29	; 41
    3b9c:	6f 96       	adiw	r28, 0x1f	; 31
    3b9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ba0:	6f 97       	sbiw	r28, 0x1f	; 31
    3ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba4:	89 17       	cp	r24, r25
    3ba6:	18 f0       	brcs	.+6      	; 0x3bae <__vector_11+0x618>
    3ba8:	a9 96       	adiw	r28, 0x29	; 41
    3baa:	1f ae       	std	Y+63, r1	; 0x3f
    3bac:	a9 97       	sbiw	r28, 0x29	; 41
    3bae:	a6 96       	adiw	r28, 0x26	; 38
    3bb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bb2:	a6 97       	sbiw	r28, 0x26	; 38
    3bb4:	6f 96       	adiw	r28, 0x1f	; 31
    3bb6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bb8:	6f 97       	sbiw	r28, 0x1f	; 31
    3bba:	89 0f       	add	r24, r25
    3bbc:	aa 96       	adiw	r28, 0x2a	; 42
    3bbe:	8f af       	std	Y+63, r24	; 0x3f
    3bc0:	aa 97       	sbiw	r28, 0x2a	; 42
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	ab 96       	adiw	r28, 0x2b	; 43
    3bc6:	8f af       	std	Y+63, r24	; 0x3f
    3bc8:	ab 97       	sbiw	r28, 0x2b	; 43
    3bca:	aa 96       	adiw	r28, 0x2a	; 42
    3bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bce:	aa 97       	sbiw	r28, 0x2a	; 42
    3bd0:	6f 96       	adiw	r28, 0x1f	; 31
    3bd2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bd4:	6f 97       	sbiw	r28, 0x1f	; 31
    3bd6:	98 17       	cp	r25, r24
    3bd8:	18 f0       	brcs	.+6      	; 0x3be0 <__vector_11+0x64a>
    3bda:	ab 96       	adiw	r28, 0x2b	; 43
    3bdc:	1f ae       	std	Y+63, r1	; 0x3f
    3bde:	ab 97       	sbiw	r28, 0x2b	; 43
    3be0:	a9 96       	adiw	r28, 0x29	; 41
    3be2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3be4:	a9 97       	sbiw	r28, 0x29	; 41
    3be6:	ab 96       	adiw	r28, 0x2b	; 43
    3be8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bea:	ab 97       	sbiw	r28, 0x2b	; 43
    3bec:	98 2b       	or	r25, r24
    3bee:	a9 96       	adiw	r28, 0x29	; 41
    3bf0:	9f af       	std	Y+63, r25	; 0x3f
    3bf2:	a9 97       	sbiw	r28, 0x29	; 41
    3bf4:	aa 96       	adiw	r28, 0x2a	; 42
    3bf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bf8:	aa 97       	sbiw	r28, 0x2a	; 42
    3bfa:	6f 96       	adiw	r28, 0x1f	; 31
    3bfc:	9f af       	std	Y+63, r25	; 0x3f
    3bfe:	6f 97       	sbiw	r28, 0x1f	; 31
    3c00:	8c 81       	ldd	r24, Y+4	; 0x04
    3c02:	68 96       	adiw	r28, 0x18	; 24
    3c04:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c06:	68 97       	sbiw	r28, 0x18	; 24
    3c08:	89 0f       	add	r24, r25
    3c0a:	a0 96       	adiw	r28, 0x20	; 32
    3c0c:	8f af       	std	Y+63, r24	; 0x3f
    3c0e:	a0 97       	sbiw	r28, 0x20	; 32
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	ac 96       	adiw	r28, 0x2c	; 44
    3c14:	8f af       	std	Y+63, r24	; 0x3f
    3c16:	ac 97       	sbiw	r28, 0x2c	; 44
    3c18:	a0 96       	adiw	r28, 0x20	; 32
    3c1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c1c:	a0 97       	sbiw	r28, 0x20	; 32
    3c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c20:	98 17       	cp	r25, r24
    3c22:	18 f0       	brcs	.+6      	; 0x3c2a <__vector_11+0x694>
    3c24:	ac 96       	adiw	r28, 0x2c	; 44
    3c26:	1f ae       	std	Y+63, r1	; 0x3f
    3c28:	ac 97       	sbiw	r28, 0x2c	; 44
    3c2a:	a9 96       	adiw	r28, 0x29	; 41
    3c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c2e:	a9 97       	sbiw	r28, 0x29	; 41
    3c30:	a0 96       	adiw	r28, 0x20	; 32
    3c32:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c34:	a0 97       	sbiw	r28, 0x20	; 32
    3c36:	98 0f       	add	r25, r24
    3c38:	ad 96       	adiw	r28, 0x2d	; 45
    3c3a:	9f af       	std	Y+63, r25	; 0x3f
    3c3c:	ad 97       	sbiw	r28, 0x2d	; 45
    3c3e:	91 e0       	ldi	r25, 0x01	; 1
    3c40:	ae 96       	adiw	r28, 0x2e	; 46
    3c42:	9f af       	std	Y+63, r25	; 0x3f
    3c44:	ae 97       	sbiw	r28, 0x2e	; 46
    3c46:	ad 96       	adiw	r28, 0x2d	; 45
    3c48:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c4a:	ad 97       	sbiw	r28, 0x2d	; 45
    3c4c:	a0 96       	adiw	r28, 0x20	; 32
    3c4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c50:	a0 97       	sbiw	r28, 0x20	; 32
    3c52:	89 17       	cp	r24, r25
    3c54:	18 f0       	brcs	.+6      	; 0x3c5c <__vector_11+0x6c6>
    3c56:	ae 96       	adiw	r28, 0x2e	; 46
    3c58:	1f ae       	std	Y+63, r1	; 0x3f
    3c5a:	ae 97       	sbiw	r28, 0x2e	; 46
    3c5c:	ac 96       	adiw	r28, 0x2c	; 44
    3c5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c60:	ac 97       	sbiw	r28, 0x2c	; 44
    3c62:	ae 96       	adiw	r28, 0x2e	; 46
    3c64:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c66:	ae 97       	sbiw	r28, 0x2e	; 46
    3c68:	89 2b       	or	r24, r25
    3c6a:	ac 96       	adiw	r28, 0x2c	; 44
    3c6c:	8f af       	std	Y+63, r24	; 0x3f
    3c6e:	ac 97       	sbiw	r28, 0x2c	; 44
    3c70:	ad 96       	adiw	r28, 0x2d	; 45
    3c72:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c74:	ad 97       	sbiw	r28, 0x2d	; 45
    3c76:	a0 96       	adiw	r28, 0x20	; 32
    3c78:	8f af       	std	Y+63, r24	; 0x3f
    3c7a:	a0 97       	sbiw	r28, 0x20	; 32
    3c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c7e:	69 96       	adiw	r28, 0x19	; 25
    3c80:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c82:	69 97       	sbiw	r28, 0x19	; 25
    3c84:	98 0f       	add	r25, r24
    3c86:	a1 96       	adiw	r28, 0x21	; 33
    3c88:	9f af       	std	Y+63, r25	; 0x3f
    3c8a:	a1 97       	sbiw	r28, 0x21	; 33
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	af 96       	adiw	r28, 0x2f	; 47
    3c90:	9f af       	std	Y+63, r25	; 0x3f
    3c92:	af 97       	sbiw	r28, 0x2f	; 47
    3c94:	a1 96       	adiw	r28, 0x21	; 33
    3c96:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c98:	a1 97       	sbiw	r28, 0x21	; 33
    3c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9c:	89 17       	cp	r24, r25
    3c9e:	18 f0       	brcs	.+6      	; 0x3ca6 <__vector_11+0x710>
    3ca0:	af 96       	adiw	r28, 0x2f	; 47
    3ca2:	1f ae       	std	Y+63, r1	; 0x3f
    3ca4:	af 97       	sbiw	r28, 0x2f	; 47
    3ca6:	ac 96       	adiw	r28, 0x2c	; 44
    3ca8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3caa:	ac 97       	sbiw	r28, 0x2c	; 44
    3cac:	a1 96       	adiw	r28, 0x21	; 33
    3cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cb0:	a1 97       	sbiw	r28, 0x21	; 33
    3cb2:	89 0f       	add	r24, r25
    3cb4:	e0 96       	adiw	r28, 0x30	; 48
    3cb6:	8f af       	std	Y+63, r24	; 0x3f
    3cb8:	e0 97       	sbiw	r28, 0x30	; 48
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	e1 96       	adiw	r28, 0x31	; 49
    3cbe:	8f af       	std	Y+63, r24	; 0x3f
    3cc0:	e1 97       	sbiw	r28, 0x31	; 49
    3cc2:	e0 96       	adiw	r28, 0x30	; 48
    3cc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cc6:	e0 97       	sbiw	r28, 0x30	; 48
    3cc8:	a1 96       	adiw	r28, 0x21	; 33
    3cca:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ccc:	a1 97       	sbiw	r28, 0x21	; 33
    3cce:	98 17       	cp	r25, r24
    3cd0:	18 f0       	brcs	.+6      	; 0x3cd8 <__vector_11+0x742>
    3cd2:	e1 96       	adiw	r28, 0x31	; 49
    3cd4:	1f ae       	std	Y+63, r1	; 0x3f
    3cd6:	e1 97       	sbiw	r28, 0x31	; 49
    3cd8:	af 96       	adiw	r28, 0x2f	; 47
    3cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cdc:	af 97       	sbiw	r28, 0x2f	; 47
    3cde:	e1 96       	adiw	r28, 0x31	; 49
    3ce0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ce2:	e1 97       	sbiw	r28, 0x31	; 49
    3ce4:	98 2b       	or	r25, r24
    3ce6:	af 96       	adiw	r28, 0x2f	; 47
    3ce8:	9f af       	std	Y+63, r25	; 0x3f
    3cea:	af 97       	sbiw	r28, 0x2f	; 47
    3cec:	e0 96       	adiw	r28, 0x30	; 48
    3cee:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cf0:	e0 97       	sbiw	r28, 0x30	; 48
    3cf2:	a1 96       	adiw	r28, 0x21	; 33
    3cf4:	9f af       	std	Y+63, r25	; 0x3f
    3cf6:	a1 97       	sbiw	r28, 0x21	; 33
    3cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfa:	6a 96       	adiw	r28, 0x1a	; 26
    3cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cfe:	6a 97       	sbiw	r28, 0x1a	; 26
    3d00:	89 0f       	add	r24, r25
    3d02:	a2 96       	adiw	r28, 0x22	; 34
    3d04:	8f af       	std	Y+63, r24	; 0x3f
    3d06:	a2 97       	sbiw	r28, 0x22	; 34
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	e2 96       	adiw	r28, 0x32	; 50
    3d0c:	8f af       	std	Y+63, r24	; 0x3f
    3d0e:	e2 97       	sbiw	r28, 0x32	; 50
    3d10:	a2 96       	adiw	r28, 0x22	; 34
    3d12:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d14:	a2 97       	sbiw	r28, 0x22	; 34
    3d16:	8e 81       	ldd	r24, Y+6	; 0x06
    3d18:	98 17       	cp	r25, r24
    3d1a:	18 f0       	brcs	.+6      	; 0x3d22 <__vector_11+0x78c>
    3d1c:	e2 96       	adiw	r28, 0x32	; 50
    3d1e:	1f ae       	std	Y+63, r1	; 0x3f
    3d20:	e2 97       	sbiw	r28, 0x32	; 50
    3d22:	af 96       	adiw	r28, 0x2f	; 47
    3d24:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d26:	af 97       	sbiw	r28, 0x2f	; 47
    3d28:	a2 96       	adiw	r28, 0x22	; 34
    3d2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d2c:	a2 97       	sbiw	r28, 0x22	; 34
    3d2e:	98 0f       	add	r25, r24
    3d30:	e3 96       	adiw	r28, 0x33	; 51
    3d32:	9f af       	std	Y+63, r25	; 0x3f
    3d34:	e3 97       	sbiw	r28, 0x33	; 51
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	e4 96       	adiw	r28, 0x34	; 52
    3d3a:	9f af       	std	Y+63, r25	; 0x3f
    3d3c:	e4 97       	sbiw	r28, 0x34	; 52
    3d3e:	e3 96       	adiw	r28, 0x33	; 51
    3d40:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d42:	e3 97       	sbiw	r28, 0x33	; 51
    3d44:	a2 96       	adiw	r28, 0x22	; 34
    3d46:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d48:	a2 97       	sbiw	r28, 0x22	; 34
    3d4a:	89 17       	cp	r24, r25
    3d4c:	18 f0       	brcs	.+6      	; 0x3d54 <__vector_11+0x7be>
    3d4e:	e4 96       	adiw	r28, 0x34	; 52
    3d50:	1f ae       	std	Y+63, r1	; 0x3f
    3d52:	e4 97       	sbiw	r28, 0x34	; 52
    3d54:	e2 96       	adiw	r28, 0x32	; 50
    3d56:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d58:	e2 97       	sbiw	r28, 0x32	; 50
    3d5a:	e4 96       	adiw	r28, 0x34	; 52
    3d5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d5e:	e4 97       	sbiw	r28, 0x34	; 52
    3d60:	89 2b       	or	r24, r25
    3d62:	e2 96       	adiw	r28, 0x32	; 50
    3d64:	8f af       	std	Y+63, r24	; 0x3f
    3d66:	e2 97       	sbiw	r28, 0x32	; 50
    3d68:	e3 96       	adiw	r28, 0x33	; 51
    3d6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d6c:	e3 97       	sbiw	r28, 0x33	; 51
    3d6e:	a2 96       	adiw	r28, 0x22	; 34
    3d70:	8f af       	std	Y+63, r24	; 0x3f
    3d72:	a2 97       	sbiw	r28, 0x22	; 34
    3d74:	9f 81       	ldd	r25, Y+7	; 0x07
    3d76:	6b 96       	adiw	r28, 0x1b	; 27
    3d78:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d7a:	6b 97       	sbiw	r28, 0x1b	; 27
    3d7c:	98 0f       	add	r25, r24
    3d7e:	a3 96       	adiw	r28, 0x23	; 35
    3d80:	9f af       	std	Y+63, r25	; 0x3f
    3d82:	a3 97       	sbiw	r28, 0x23	; 35
    3d84:	91 e0       	ldi	r25, 0x01	; 1
    3d86:	e5 96       	adiw	r28, 0x35	; 53
    3d88:	9f af       	std	Y+63, r25	; 0x3f
    3d8a:	e5 97       	sbiw	r28, 0x35	; 53
    3d8c:	a3 96       	adiw	r28, 0x23	; 35
    3d8e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d90:	a3 97       	sbiw	r28, 0x23	; 35
    3d92:	9f 81       	ldd	r25, Y+7	; 0x07
    3d94:	89 17       	cp	r24, r25
    3d96:	18 f0       	brcs	.+6      	; 0x3d9e <__vector_11+0x808>
    3d98:	e5 96       	adiw	r28, 0x35	; 53
    3d9a:	1f ae       	std	Y+63, r1	; 0x3f
    3d9c:	e5 97       	sbiw	r28, 0x35	; 53
    3d9e:	e2 96       	adiw	r28, 0x32	; 50
    3da0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3da2:	e2 97       	sbiw	r28, 0x32	; 50
    3da4:	a3 96       	adiw	r28, 0x23	; 35
    3da6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3da8:	a3 97       	sbiw	r28, 0x23	; 35
    3daa:	89 0f       	add	r24, r25
    3dac:	e6 96       	adiw	r28, 0x36	; 54
    3dae:	8f af       	std	Y+63, r24	; 0x3f
    3db0:	e6 97       	sbiw	r28, 0x36	; 54
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	e7 96       	adiw	r28, 0x37	; 55
    3db6:	8f af       	std	Y+63, r24	; 0x3f
    3db8:	e7 97       	sbiw	r28, 0x37	; 55
    3dba:	e6 96       	adiw	r28, 0x36	; 54
    3dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dbe:	e6 97       	sbiw	r28, 0x36	; 54
    3dc0:	a3 96       	adiw	r28, 0x23	; 35
    3dc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3dc4:	a3 97       	sbiw	r28, 0x23	; 35
    3dc6:	98 17       	cp	r25, r24
    3dc8:	18 f0       	brcs	.+6      	; 0x3dd0 <__vector_11+0x83a>
    3dca:	e7 96       	adiw	r28, 0x37	; 55
    3dcc:	1f ae       	std	Y+63, r1	; 0x3f
    3dce:	e7 97       	sbiw	r28, 0x37	; 55
    3dd0:	e5 96       	adiw	r28, 0x35	; 53
    3dd2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dd4:	e5 97       	sbiw	r28, 0x35	; 53
    3dd6:	e7 96       	adiw	r28, 0x37	; 55
    3dd8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3dda:	e7 97       	sbiw	r28, 0x37	; 55
    3ddc:	98 2b       	or	r25, r24
    3dde:	e5 96       	adiw	r28, 0x35	; 53
    3de0:	9f af       	std	Y+63, r25	; 0x3f
    3de2:	e5 97       	sbiw	r28, 0x35	; 53
    3de4:	e6 96       	adiw	r28, 0x36	; 54
    3de6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3de8:	e6 97       	sbiw	r28, 0x36	; 54
    3dea:	a3 96       	adiw	r28, 0x23	; 35
    3dec:	9f af       	std	Y+63, r25	; 0x3f
    3dee:	a3 97       	sbiw	r28, 0x23	; 35
    3df0:	88 85       	ldd	r24, Y+8	; 0x08
    3df2:	6c 96       	adiw	r28, 0x1c	; 28
    3df4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3df6:	6c 97       	sbiw	r28, 0x1c	; 28
    3df8:	89 0f       	add	r24, r25
    3dfa:	a4 96       	adiw	r28, 0x24	; 36
    3dfc:	8f af       	std	Y+63, r24	; 0x3f
    3dfe:	a4 97       	sbiw	r28, 0x24	; 36
    3e00:	e5 96       	adiw	r28, 0x35	; 53
    3e02:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e04:	e5 97       	sbiw	r28, 0x35	; 53
    3e06:	a4 96       	adiw	r28, 0x24	; 36
    3e08:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e0a:	a4 97       	sbiw	r28, 0x24	; 36
    3e0c:	89 0f       	add	r24, r25
    3e0e:	a4 96       	adiw	r28, 0x24	; 36
    3e10:	8f af       	std	Y+63, r24	; 0x3f
    3e12:	a4 97       	sbiw	r28, 0x24	; 36
    3e14:	6d 96       	adiw	r28, 0x1d	; 29
    3e16:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e18:	6d 97       	sbiw	r28, 0x1d	; 29
    3e1a:	6e 96       	adiw	r28, 0x1e	; 30
    3e1c:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e1e:	6e 97       	sbiw	r28, 0x1e	; 30
    3e20:	6f 96       	adiw	r28, 0x1f	; 31
    3e22:	4f ad       	ldd	r20, Y+63	; 0x3f
    3e24:	6f 97       	sbiw	r28, 0x1f	; 31
    3e26:	a0 96       	adiw	r28, 0x20	; 32
    3e28:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e2a:	a0 97       	sbiw	r28, 0x20	; 32
    3e2c:	a1 96       	adiw	r28, 0x21	; 33
    3e2e:	6f ad       	ldd	r22, Y+63	; 0x3f
    3e30:	a1 97       	sbiw	r28, 0x21	; 33
    3e32:	a2 96       	adiw	r28, 0x22	; 34
    3e34:	7f ad       	ldd	r23, Y+63	; 0x3f
    3e36:	a2 97       	sbiw	r28, 0x22	; 34
    3e38:	a3 96       	adiw	r28, 0x23	; 35
    3e3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e3c:	a3 97       	sbiw	r28, 0x23	; 35
    3e3e:	a4 96       	adiw	r28, 0x24	; 36
    3e40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e42:	a4 97       	sbiw	r28, 0x24	; 36
    3e44:	20 93 8e 01 	sts	0x018E, r18
    3e48:	30 93 8f 01 	sts	0x018F, r19
    3e4c:	40 93 90 01 	sts	0x0190, r20
    3e50:	50 93 91 01 	sts	0x0191, r21
    3e54:	60 93 92 01 	sts	0x0192, r22
    3e58:	70 93 93 01 	sts	0x0193, r23
    3e5c:	80 93 94 01 	sts	0x0194, r24
    3e60:	90 93 95 01 	sts	0x0195, r25
    3e64:	1b c0       	rjmp	.+54     	; 0x3e9c <__vector_11+0x906>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T0CurrentOVCount=0;
    3e66:	10 92 8e 01 	sts	0x018E, r1
    3e6a:	10 92 8f 01 	sts	0x018F, r1
    3e6e:	10 92 90 01 	sts	0x0190, r1
    3e72:	10 92 91 01 	sts	0x0191, r1
    3e76:	10 92 92 01 	sts	0x0192, r1
    3e7a:	10 92 93 01 	sts	0x0193, r1
    3e7e:	10 92 94 01 	sts	0x0194, r1
    3e82:	10 92 95 01 	sts	0x0195, r1
      //check if the global pointer to function holds a valid function address
      if (G_fptr != NULLPTR)
    3e86:	80 91 84 01 	lds	r24, 0x0184
    3e8a:	90 91 85 01 	lds	r25, 0x0185
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	29 f0       	breq	.+10     	; 0x3e9c <__vector_11+0x906>
      {
         //call the function
         G_fptr();
    3e92:	e0 91 84 01 	lds	r30, 0x0184
    3e96:	f0 91 85 01 	lds	r31, 0x0185
    3e9a:	09 95       	icall
      }
   }      
}
    3e9c:	ca 58       	subi	r28, 0x8A	; 138
    3e9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	ff 91       	pop	r31
    3eaa:	ef 91       	pop	r30
    3eac:	bf 91       	pop	r27
    3eae:	af 91       	pop	r26
    3eb0:	9f 91       	pop	r25
    3eb2:	8f 91       	pop	r24
    3eb4:	7f 91       	pop	r23
    3eb6:	6f 91       	pop	r22
    3eb8:	5f 91       	pop	r21
    3eba:	4f 91       	pop	r20
    3ebc:	3f 91       	pop	r19
    3ebe:	2f 91       	pop	r18
    3ec0:	0f 90       	pop	r0
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	0f 90       	pop	r0
    3ec6:	1f 90       	pop	r1
    3ec8:	18 95       	reti

00003eca <Timer1_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize timer 1 according to the sent parameters
************************************************************************************/
enuErrorStatus_t Timer1_Init( enuTimer1Mode_t enuMode,enuTimer1Scaler_t enuScaler)
{
    3eca:	df 93       	push	r29
    3ecc:	cf 93       	push	r28
    3ece:	00 d0       	rcall	.+0      	; 0x3ed0 <Timer1_Init+0x6>
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <Timer1_Init+0x8>
    3ed2:	0f 92       	push	r0
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	89 83       	std	Y+1, r24	; 0x01
    3eda:	6a 83       	std	Y+2, r22	; 0x02
   //select the appropriate mode the user has selected by selecting 
   //and clearing the appropriate bits in the TCCR1A & TCCR1B Registers
   //Values are demonstrated in the datasheet
   switch (enuMode)
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	3d 83       	std	Y+5, r19	; 0x05
    3ee4:	2c 83       	std	Y+4, r18	; 0x04
    3ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    3eea:	99 23       	and	r25, r25
    3eec:	0c f4       	brge	.+2      	; 0x3ef0 <Timer1_Init+0x26>
    3eee:	44 c0       	rjmp	.+136    	; 0x3f78 <Timer1_Init+0xae>
    3ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    3ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    3ef4:	2d 30       	cpi	r18, 0x0D	; 13
    3ef6:	31 05       	cpc	r19, r1
    3ef8:	34 f0       	brlt	.+12     	; 0x3f06 <Timer1_Init+0x3c>
    3efa:	8c 81       	ldd	r24, Y+4	; 0x04
    3efc:	9d 81       	ldd	r25, Y+5	; 0x05
    3efe:	0e 97       	sbiw	r24, 0x0e	; 14
    3f00:	82 30       	cpi	r24, 0x02	; 2
    3f02:	91 05       	cpc	r25, r1
    3f04:	c8 f5       	brcc	.+114    	; 0x3f78 <Timer1_Init+0xae>
      case TIMER1_PWM_PHASE_OCRA_TOP_MODE:
      case TIMER1_CTC_ICR_TOP_MODE:
      case TIMER1_FASTPWM_ICR_TOP_MODE:
      case TIMER1_FASTPWM_OCRA_TOP_MODE:
         
         TCCR1A_R &= 0b11111100;
    3f06:	af e4       	ldi	r26, 0x4F	; 79
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	ef e4       	ldi	r30, 0x4F	; 79
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	8c 7f       	andi	r24, 0xFC	; 252
    3f12:	8c 93       	st	X, r24
         TCCR1A_R |= (enuMode & 0x03);
    3f14:	af e4       	ldi	r26, 0x4F	; 79
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	ef e4       	ldi	r30, 0x4F	; 79
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	80 81       	ld	r24, Z
    3f1e:	98 2f       	mov	r25, r24
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	83 70       	andi	r24, 0x03	; 3
    3f24:	89 2b       	or	r24, r25
    3f26:	8c 93       	st	X, r24
         
         TCCR1B_R &= 0b11100111;
    3f28:	ae e4       	ldi	r26, 0x4E	; 78
    3f2a:	b0 e0       	ldi	r27, 0x00	; 0
    3f2c:	ee e4       	ldi	r30, 0x4E	; 78
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	80 81       	ld	r24, Z
    3f32:	87 7e       	andi	r24, 0xE7	; 231
    3f34:	8c 93       	st	X, r24
         TCCR1B_R |= ((enuMode & 0b00001100)<<1);
    3f36:	ae e4       	ldi	r26, 0x4E	; 78
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	ee e4       	ldi	r30, 0x4E	; 78
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	80 81       	ld	r24, Z
    3f40:	28 2f       	mov	r18, r24
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
    3f44:	88 2f       	mov	r24, r24
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	8c 70       	andi	r24, 0x0C	; 12
    3f4a:	90 70       	andi	r25, 0x00	; 0
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	82 2b       	or	r24, r18
    3f52:	8c 93       	st	X, r24
         break;
      
   }
   
   //clear the prescaler bits in the TCCR1B
   TCCR1B_R &=0XF8;
    3f54:	ae e4       	ldi	r26, 0x4E	; 78
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	ee e4       	ldi	r30, 0x4E	; 78
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	80 81       	ld	r24, Z
    3f5e:	88 7f       	andi	r24, 0xF8	; 248
    3f60:	8c 93       	st	X, r24
   //enter the prescaler number the user has selected
   TCCR1B_R|=enuScaler;
    3f62:	ae e4       	ldi	r26, 0x4E	; 78
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	ee e4       	ldi	r30, 0x4E	; 78
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	90 81       	ld	r25, Z
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	89 2b       	or	r24, r25
    3f70:	8c 93       	st	X, r24
   return E_OK;
    3f72:	31 e0       	ldi	r19, 0x01	; 1
    3f74:	3b 83       	std	Y+3, r19	; 0x03
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <Timer1_Init+0xb0>
         TCCR1B_R &= 0b11100111;
         TCCR1B_R |= ((enuMode & 0b00001100)<<1);
         break;
      
      default:
         return E_ERROR;
    3f78:	1b 82       	std	Y+3, r1	; 0x03
    3f7a:	8b 81       	ldd	r24, Y+3	; 0x03
   //clear the prescaler bits in the TCCR1B
   TCCR1B_R &=0XF8;
   //enter the prescaler number the user has selected
   TCCR1B_R|=enuScaler;
   return E_OK;
}
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <Timer1_OCRA1Mode>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize the OCR1A pin for use in PWM generation
************************************************************************************/
enuErrorStatus_t Timer1_OCRA1Mode(enuOC1A_Mode_t enu_oc1a_mode)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	00 d0       	rcall	.+0      	; 0x3f92 <Timer1_OCRA1Mode+0x6>
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <Timer1_OCRA1Mode+0x8>
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
    3f98:	89 83       	std	Y+1, r24	; 0x01
      //select the appropriate mode for the OCR1A Pin the user has selected
      //and clearing the appropriate bits in the TCCR1A Register, Values are
      //demonstrated in the datasheet
   switch (enu_oc1a_mode)
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	28 2f       	mov	r18, r24
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	3c 83       	std	Y+4, r19	; 0x04
    3fa2:	2b 83       	std	Y+3, r18	; 0x03
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa8:	81 30       	cpi	r24, 0x01	; 1
    3faa:	91 05       	cpc	r25, r1
    3fac:	21 f1       	breq	.+72     	; 0x3ff6 <Timer1_OCRA1Mode+0x6a>
    3fae:	2b 81       	ldd	r18, Y+3	; 0x03
    3fb0:	3c 81       	ldd	r19, Y+4	; 0x04
    3fb2:	22 30       	cpi	r18, 0x02	; 2
    3fb4:	31 05       	cpc	r19, r1
    3fb6:	2c f4       	brge	.+10     	; 0x3fc2 <Timer1_OCRA1Mode+0x36>
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	61 f0       	breq	.+24     	; 0x3fd8 <Timer1_OCRA1Mode+0x4c>
    3fc0:	47 c0       	rjmp	.+142    	; 0x4050 <Timer1_OCRA1Mode+0xc4>
    3fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc6:	22 30       	cpi	r18, 0x02	; 2
    3fc8:	31 05       	cpc	r19, r1
    3fca:	21 f1       	breq	.+72     	; 0x4014 <Timer1_OCRA1Mode+0x88>
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	83 30       	cpi	r24, 0x03	; 3
    3fd2:	91 05       	cpc	r25, r1
    3fd4:	71 f1       	breq	.+92     	; 0x4032 <Timer1_OCRA1Mode+0xa6>
    3fd6:	3c c0       	rjmp	.+120    	; 0x4050 <Timer1_OCRA1Mode+0xc4>
   {
      case OCRA_DISCONNECTED:
      CLEAR_BIT(TCCR1A_R,COM1A0_B);
    3fd8:	af e4       	ldi	r26, 0x4F	; 79
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	ef e4       	ldi	r30, 0x4F	; 79
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	8f 7b       	andi	r24, 0xBF	; 191
    3fe4:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR1A_R,COM1A1_B);
    3fe6:	af e4       	ldi	r26, 0x4F	; 79
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	ef e4       	ldi	r30, 0x4F	; 79
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	8f 77       	andi	r24, 0x7F	; 127
    3ff2:	8c 93       	st	X, r24
    3ff4:	2f c0       	rjmp	.+94     	; 0x4054 <Timer1_OCRA1Mode+0xc8>
      break;
      case OCRA_TOGGLE:
      SET_BIT(TCCR1A_R,COM1A0_B);
    3ff6:	af e4       	ldi	r26, 0x4F	; 79
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	ef e4       	ldi	r30, 0x4F	; 79
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	80 64       	ori	r24, 0x40	; 64
    4002:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR1A_R,COM1A1_B);
    4004:	af e4       	ldi	r26, 0x4F	; 79
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	ef e4       	ldi	r30, 0x4F	; 79
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	80 81       	ld	r24, Z
    400e:	8f 77       	andi	r24, 0x7F	; 127
    4010:	8c 93       	st	X, r24
    4012:	20 c0       	rjmp	.+64     	; 0x4054 <Timer1_OCRA1Mode+0xc8>
      break;
      case OCRA_NON_INVERTING:
      CLEAR_BIT(TCCR1A_R,COM1A0_B);
    4014:	af e4       	ldi	r26, 0x4F	; 79
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	ef e4       	ldi	r30, 0x4F	; 79
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	80 81       	ld	r24, Z
    401e:	8f 7b       	andi	r24, 0xBF	; 191
    4020:	8c 93       	st	X, r24
      SET_BIT(TCCR1A_R,COM1A1_B);
    4022:	af e4       	ldi	r26, 0x4F	; 79
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	ef e4       	ldi	r30, 0x4F	; 79
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	80 68       	ori	r24, 0x80	; 128
    402e:	8c 93       	st	X, r24
    4030:	11 c0       	rjmp	.+34     	; 0x4054 <Timer1_OCRA1Mode+0xc8>
      break;
      case OCRA_INVERTING:
      SET_BIT(TCCR1A_R,COM1A0_B);
    4032:	af e4       	ldi	r26, 0x4F	; 79
    4034:	b0 e0       	ldi	r27, 0x00	; 0
    4036:	ef e4       	ldi	r30, 0x4F	; 79
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	80 81       	ld	r24, Z
    403c:	80 64       	ori	r24, 0x40	; 64
    403e:	8c 93       	st	X, r24
      SET_BIT(TCCR1A_R,COM1A1_B);
    4040:	af e4       	ldi	r26, 0x4F	; 79
    4042:	b0 e0       	ldi	r27, 0x00	; 0
    4044:	ef e4       	ldi	r30, 0x4F	; 79
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	80 68       	ori	r24, 0x80	; 128
    404c:	8c 93       	st	X, r24
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <Timer1_OCRA1Mode+0xc8>
      break;
      
      default:
      return E_ERROR;
    4050:	1a 82       	std	Y+2, r1	; 0x02
    4052:	02 c0       	rjmp	.+4      	; 0x4058 <Timer1_OCRA1Mode+0xcc>
      break;
   }
   return E_OK;
    4054:	91 e0       	ldi	r25, 0x01	; 1
    4056:	9a 83       	std	Y+2, r25	; 0x02
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
}
    405a:	0f 90       	pop	r0
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	08 95       	ret

00004068 <Timer1_OCRB1Mode>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize the OCR1B pin for use in PWM generation
************************************************************************************/
enuErrorStatus_t Timer1_OCRB1Mode(enuOC1B_Mode_t enu_oc1b_mode)
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	00 d0       	rcall	.+0      	; 0x406e <Timer1_OCRB1Mode+0x6>
    406e:	00 d0       	rcall	.+0      	; 0x4070 <Timer1_OCRB1Mode+0x8>
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	89 83       	std	Y+1, r24	; 0x01
   //select the appropriate mode for the OCR1B Pin the user has selected
   //and clearing the appropriate bits in the TCCR1A Register, Values are
   //demonstrated in the datasheet
   switch (enu_oc1b_mode)
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	28 2f       	mov	r18, r24
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	3c 83       	std	Y+4, r19	; 0x04
    407e:	2b 83       	std	Y+3, r18	; 0x03
    4080:	8b 81       	ldd	r24, Y+3	; 0x03
    4082:	9c 81       	ldd	r25, Y+4	; 0x04
    4084:	81 30       	cpi	r24, 0x01	; 1
    4086:	91 05       	cpc	r25, r1
    4088:	21 f1       	breq	.+72     	; 0x40d2 <Timer1_OCRB1Mode+0x6a>
    408a:	2b 81       	ldd	r18, Y+3	; 0x03
    408c:	3c 81       	ldd	r19, Y+4	; 0x04
    408e:	22 30       	cpi	r18, 0x02	; 2
    4090:	31 05       	cpc	r19, r1
    4092:	2c f4       	brge	.+10     	; 0x409e <Timer1_OCRB1Mode+0x36>
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	61 f0       	breq	.+24     	; 0x40b4 <Timer1_OCRB1Mode+0x4c>
    409c:	47 c0       	rjmp	.+142    	; 0x412c <Timer1_OCRB1Mode+0xc4>
    409e:	2b 81       	ldd	r18, Y+3	; 0x03
    40a0:	3c 81       	ldd	r19, Y+4	; 0x04
    40a2:	22 30       	cpi	r18, 0x02	; 2
    40a4:	31 05       	cpc	r19, r1
    40a6:	21 f1       	breq	.+72     	; 0x40f0 <Timer1_OCRB1Mode+0x88>
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	9c 81       	ldd	r25, Y+4	; 0x04
    40ac:	83 30       	cpi	r24, 0x03	; 3
    40ae:	91 05       	cpc	r25, r1
    40b0:	71 f1       	breq	.+92     	; 0x410e <Timer1_OCRB1Mode+0xa6>
    40b2:	3c c0       	rjmp	.+120    	; 0x412c <Timer1_OCRB1Mode+0xc4>
   {
      case OCRB_DISCONNECTED:
      CLEAR_BIT(TCCR1A_R,COM1B0_B);
    40b4:	af e4       	ldi	r26, 0x4F	; 79
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	ef e4       	ldi	r30, 0x4F	; 79
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	8f 7e       	andi	r24, 0xEF	; 239
    40c0:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR1A_R,COM1B1_B);
    40c2:	af e4       	ldi	r26, 0x4F	; 79
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	ef e4       	ldi	r30, 0x4F	; 79
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	8f 7d       	andi	r24, 0xDF	; 223
    40ce:	8c 93       	st	X, r24
    40d0:	2f c0       	rjmp	.+94     	; 0x4130 <Timer1_OCRB1Mode+0xc8>
      break;
      case OCRB_TOGGLE:
      SET_BIT(TCCR1A_R,COM1B0_B);
    40d2:	af e4       	ldi	r26, 0x4F	; 79
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	ef e4       	ldi	r30, 0x4F	; 79
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	80 61       	ori	r24, 0x10	; 16
    40de:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR1A_R,COM1B1_B);
    40e0:	af e4       	ldi	r26, 0x4F	; 79
    40e2:	b0 e0       	ldi	r27, 0x00	; 0
    40e4:	ef e4       	ldi	r30, 0x4F	; 79
    40e6:	f0 e0       	ldi	r31, 0x00	; 0
    40e8:	80 81       	ld	r24, Z
    40ea:	8f 7d       	andi	r24, 0xDF	; 223
    40ec:	8c 93       	st	X, r24
    40ee:	20 c0       	rjmp	.+64     	; 0x4130 <Timer1_OCRB1Mode+0xc8>
      break;
      case OCRB_NON_INVERTING:
      CLEAR_BIT(TCCR1A_R,COM1B0_B);
    40f0:	af e4       	ldi	r26, 0x4F	; 79
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	ef e4       	ldi	r30, 0x4F	; 79
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	80 81       	ld	r24, Z
    40fa:	8f 7e       	andi	r24, 0xEF	; 239
    40fc:	8c 93       	st	X, r24
      SET_BIT(TCCR1A_R,COM1B1_B);
    40fe:	af e4       	ldi	r26, 0x4F	; 79
    4100:	b0 e0       	ldi	r27, 0x00	; 0
    4102:	ef e4       	ldi	r30, 0x4F	; 79
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	80 81       	ld	r24, Z
    4108:	80 62       	ori	r24, 0x20	; 32
    410a:	8c 93       	st	X, r24
    410c:	11 c0       	rjmp	.+34     	; 0x4130 <Timer1_OCRB1Mode+0xc8>
      break;
      case OCRB_INVERTING:
      SET_BIT(TCCR1A_R,COM1B0_B);
    410e:	af e4       	ldi	r26, 0x4F	; 79
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	ef e4       	ldi	r30, 0x4F	; 79
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	80 61       	ori	r24, 0x10	; 16
    411a:	8c 93       	st	X, r24
      SET_BIT(TCCR1A_R,COM1B1_B);
    411c:	af e4       	ldi	r26, 0x4F	; 79
    411e:	b0 e0       	ldi	r27, 0x00	; 0
    4120:	ef e4       	ldi	r30, 0x4F	; 79
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	80 81       	ld	r24, Z
    4126:	80 62       	ori	r24, 0x20	; 32
    4128:	8c 93       	st	X, r24
    412a:	02 c0       	rjmp	.+4      	; 0x4130 <Timer1_OCRB1Mode+0xc8>
      break;
      
      default:
      return E_ERROR;
    412c:	1a 82       	std	Y+2, r1	; 0x02
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <Timer1_OCRB1Mode+0xcc>
      break;
   }
   return E_OK;
    4130:	91 e0       	ldi	r25, 0x01	; 1
    4132:	9a 83       	std	Y+2, r25	; 0x02
    4134:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <Timer1_OVF_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable over flow interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OVF_InterruptEnable(void)
{
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
   //set the appropriate pin in the TIMSK register to enable overflow interrupt
   SET_BIT(TIMSK_R,TOIE1_B);
    414c:	a9 e5       	ldi	r26, 0x59	; 89
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	e9 e5       	ldi	r30, 0x59	; 89
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	84 60       	ori	r24, 0x04	; 4
    4158:	8c 93       	st	X, r24
   return E_OK;
    415a:	81 e0       	ldi	r24, 0x01	; 1
}
    415c:	cf 91       	pop	r28
    415e:	df 91       	pop	r29
    4160:	08 95       	ret

00004162 <Timer1_OVF_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable over flow interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OVF_InterruptDisable(void)
{
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
   //clear the appropriate pin in the TIMSK register to disable overflow interrupt
   CLEAR_BIT(TIMSK_R,TOIE1_B);
    416a:	a9 e5       	ldi	r26, 0x59	; 89
    416c:	b0 e0       	ldi	r27, 0x00	; 0
    416e:	e9 e5       	ldi	r30, 0x59	; 89
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	80 81       	ld	r24, Z
    4174:	8b 7f       	andi	r24, 0xFB	; 251
    4176:	8c 93       	st	X, r24
   return E_OK;
    4178:	81 e0       	ldi	r24, 0x01	; 1
}
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <Timer1_OCA_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable output compare A interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OCA_InterruptEnable(void)
{
    4180:	df 93       	push	r29
    4182:	cf 93       	push	r28
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
   //set the appropriate pin in the TIMSK register to enable output compare A interrupt
   SET_BIT(TIMSK_R,OCIE1A_B);
    4188:	a9 e5       	ldi	r26, 0x59	; 89
    418a:	b0 e0       	ldi	r27, 0x00	; 0
    418c:	e9 e5       	ldi	r30, 0x59	; 89
    418e:	f0 e0       	ldi	r31, 0x00	; 0
    4190:	80 81       	ld	r24, Z
    4192:	80 61       	ori	r24, 0x10	; 16
    4194:	8c 93       	st	X, r24
   return E_OK;
    4196:	81 e0       	ldi	r24, 0x01	; 1
}
    4198:	cf 91       	pop	r28
    419a:	df 91       	pop	r29
    419c:	08 95       	ret

0000419e <Timer1_OCA_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable output compare A interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OCA_InterruptDisable(void)
{
    419e:	df 93       	push	r29
    41a0:	cf 93       	push	r28
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
   //Clear the appropriate pin in the TIMSK register to disable output compare B interrupt
   CLEAR_BIT(TIMSK_R,OCIE1A_B);
    41a6:	a9 e5       	ldi	r26, 0x59	; 89
    41a8:	b0 e0       	ldi	r27, 0x00	; 0
    41aa:	e9 e5       	ldi	r30, 0x59	; 89
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	80 81       	ld	r24, Z
    41b0:	8f 7e       	andi	r24, 0xEF	; 239
    41b2:	8c 93       	st	X, r24
   return E_OK;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
}
    41b6:	cf 91       	pop	r28
    41b8:	df 91       	pop	r29
    41ba:	08 95       	ret

000041bc <Timer1_OCB_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable output compare B interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OCB_InterruptEnable(void)
{
    41bc:	df 93       	push	r29
    41be:	cf 93       	push	r28
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
   //set the appropriate pin in the TIMSK register to enable output compare B interrupt
   SET_BIT(TIMSK_R,OCIE1B_B);
    41c4:	a9 e5       	ldi	r26, 0x59	; 89
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	e9 e5       	ldi	r30, 0x59	; 89
    41ca:	f0 e0       	ldi	r31, 0x00	; 0
    41cc:	80 81       	ld	r24, Z
    41ce:	88 60       	ori	r24, 0x08	; 8
    41d0:	8c 93       	st	X, r24
   return E_OK;
    41d2:	81 e0       	ldi	r24, 0x01	; 1
}
    41d4:	cf 91       	pop	r28
    41d6:	df 91       	pop	r29
    41d8:	08 95       	ret

000041da <Timer1_OCB_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable output compare B interrupt for timer 1
************************************************************************************/
enuErrorStatus_t Timer1_OCB_InterruptDisable(void)
{
    41da:	df 93       	push	r29
    41dc:	cf 93       	push	r28
    41de:	cd b7       	in	r28, 0x3d	; 61
    41e0:	de b7       	in	r29, 0x3e	; 62
   //Clear the appropriate pin in the TIMSK register to disable output compare A interrupt
   CLEAR_BIT(TIMSK_R,OCIE1B_B);
    41e2:	a9 e5       	ldi	r26, 0x59	; 89
    41e4:	b0 e0       	ldi	r27, 0x00	; 0
    41e6:	e9 e5       	ldi	r30, 0x59	; 89
    41e8:	f0 e0       	ldi	r31, 0x00	; 0
    41ea:	80 81       	ld	r24, Z
    41ec:	87 7f       	andi	r24, 0xF7	; 247
    41ee:	8c 93       	st	X, r24
   return E_OK;
    41f0:	81 e0       	ldi	r24, 0x01	; 1
}
    41f2:	cf 91       	pop	r28
    41f4:	df 91       	pop	r29
    41f6:	08 95       	ret

000041f8 <Timer1_OVF_SetCallback>:

void (*Timer1_OVF_Callback)(void)=NULLPTR;
enuErrorStatus_t Timer1_OVF_SetCallback(void (*local_Fptr)(void))
{
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	00 d0       	rcall	.+0      	; 0x41fe <Timer1_OVF_SetCallback+0x6>
    41fe:	0f 92       	push	r0
    4200:	cd b7       	in	r28, 0x3d	; 61
    4202:	de b7       	in	r29, 0x3e	; 62
    4204:	9a 83       	std	Y+2, r25	; 0x02
    4206:	89 83       	std	Y+1, r24	; 0x01
   if (local_Fptr == NULLPTR)
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	9a 81       	ldd	r25, Y+2	; 0x02
    420c:	00 97       	sbiw	r24, 0x00	; 0
    420e:	11 f4       	brne	.+4      	; 0x4214 <Timer1_OVF_SetCallback+0x1c>
   {
      return E_ERROR;
    4210:	1b 82       	std	Y+3, r1	; 0x03
    4212:	08 c0       	rjmp	.+16     	; 0x4224 <Timer1_OVF_SetCallback+0x2c>
   }
   Timer1_OVF_Callback=local_Fptr;
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	90 93 9a 01 	sts	0x019A, r25
    421c:	80 93 99 01 	sts	0x0199, r24
   return E_OK;
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	8b 83       	std	Y+3, r24	; 0x03
    4224:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	cf 91       	pop	r28
    422e:	df 91       	pop	r29
    4230:	08 95       	ret

00004232 <Timer1_GetOVFCount>:


uint32_t Timer1_OVF_Counter=0;
enuErrorStatus_t Timer1_GetOVFCount(uint32_t *buffer)
{
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	00 d0       	rcall	.+0      	; 0x4238 <Timer1_GetOVFCount+0x6>
    4238:	0f 92       	push	r0
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
    423e:	9a 83       	std	Y+2, r25	; 0x02
    4240:	89 83       	std	Y+1, r24	; 0x01
   if (buffer == NULLPTR)
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	9a 81       	ldd	r25, Y+2	; 0x02
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	11 f4       	brne	.+4      	; 0x424e <Timer1_GetOVFCount+0x1c>
   {
      return E_ERROR;
    424a:	1b 82       	std	Y+3, r1	; 0x03
    424c:	10 c0       	rjmp	.+32     	; 0x426e <Timer1_GetOVFCount+0x3c>
   }
   *buffer=Timer1_OVF_Counter;
    424e:	80 91 9b 01 	lds	r24, 0x019B
    4252:	90 91 9c 01 	lds	r25, 0x019C
    4256:	a0 91 9d 01 	lds	r26, 0x019D
    425a:	b0 91 9e 01 	lds	r27, 0x019E
    425e:	e9 81       	ldd	r30, Y+1	; 0x01
    4260:	fa 81       	ldd	r31, Y+2	; 0x02
    4262:	80 83       	st	Z, r24
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	a2 83       	std	Z+2, r26	; 0x02
    4268:	b3 83       	std	Z+3, r27	; 0x03
   return E_OK;
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	8b 83       	std	Y+3, r24	; 0x03
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	cf 91       	pop	r28
    4278:	df 91       	pop	r29
    427a:	08 95       	ret

0000427c <Timer1_ResetOVFCount>:

enuErrorStatus_t Timer1_ResetOVFCount(void)
{
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	cd b7       	in	r28, 0x3d	; 61
    4282:	de b7       	in	r29, 0x3e	; 62
   Timer1_OVF_Counter=0;
    4284:	10 92 9b 01 	sts	0x019B, r1
    4288:	10 92 9c 01 	sts	0x019C, r1
    428c:	10 92 9d 01 	sts	0x019D, r1
    4290:	10 92 9e 01 	sts	0x019E, r1
   return E_OK;
    4294:	81 e0       	ldi	r24, 0x01	; 1
}
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    429c:	1f 92       	push	r1
    429e:	0f 92       	push	r0
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	0f 92       	push	r0
    42a4:	11 24       	eor	r1, r1
    42a6:	2f 93       	push	r18
    42a8:	3f 93       	push	r19
    42aa:	4f 93       	push	r20
    42ac:	5f 93       	push	r21
    42ae:	6f 93       	push	r22
    42b0:	7f 93       	push	r23
    42b2:	8f 93       	push	r24
    42b4:	9f 93       	push	r25
    42b6:	af 93       	push	r26
    42b8:	bf 93       	push	r27
    42ba:	ef 93       	push	r30
    42bc:	ff 93       	push	r31
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
   Timer1_OVF_Counter++;
    42c6:	80 91 9b 01 	lds	r24, 0x019B
    42ca:	90 91 9c 01 	lds	r25, 0x019C
    42ce:	a0 91 9d 01 	lds	r26, 0x019D
    42d2:	b0 91 9e 01 	lds	r27, 0x019E
    42d6:	01 96       	adiw	r24, 0x01	; 1
    42d8:	a1 1d       	adc	r26, r1
    42da:	b1 1d       	adc	r27, r1
    42dc:	80 93 9b 01 	sts	0x019B, r24
    42e0:	90 93 9c 01 	sts	0x019C, r25
    42e4:	a0 93 9d 01 	sts	0x019D, r26
    42e8:	b0 93 9e 01 	sts	0x019E, r27
   if (Timer1_OVF_Callback != NULLPTR)
    42ec:	80 91 99 01 	lds	r24, 0x0199
    42f0:	90 91 9a 01 	lds	r25, 0x019A
    42f4:	00 97       	sbiw	r24, 0x00	; 0
    42f6:	29 f0       	breq	.+10     	; 0x4302 <__vector_9+0x66>
   {
      Timer1_OVF_Callback();
    42f8:	e0 91 99 01 	lds	r30, 0x0199
    42fc:	f0 91 9a 01 	lds	r31, 0x019A
    4300:	09 95       	icall
   }
}
    4302:	cf 91       	pop	r28
    4304:	df 91       	pop	r29
    4306:	ff 91       	pop	r31
    4308:	ef 91       	pop	r30
    430a:	bf 91       	pop	r27
    430c:	af 91       	pop	r26
    430e:	9f 91       	pop	r25
    4310:	8f 91       	pop	r24
    4312:	7f 91       	pop	r23
    4314:	6f 91       	pop	r22
    4316:	5f 91       	pop	r21
    4318:	4f 91       	pop	r20
    431a:	3f 91       	pop	r19
    431c:	2f 91       	pop	r18
    431e:	0f 90       	pop	r0
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	0f 90       	pop	r0
    4324:	1f 90       	pop	r1
    4326:	18 95       	reti

00004328 <T2_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize timer 0 according to the sent parameters
************************************************************************************/
enuErrorStatus_t T2_Init(enuTimer2Mode_t enuMode,enuTimer2Scaler_t enuScaler)
{
    4328:	df 93       	push	r29
    432a:	cf 93       	push	r28
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	27 97       	sbiw	r28, 0x07	; 7
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	89 83       	std	Y+1, r24	; 0x01
    433e:	6a 83       	std	Y+2, r22	; 0x02
   //set the timer mode by setting the correct configuration of the WGM bits for the mode the user has selected
   switch (enuMode)
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	28 2f       	mov	r18, r24
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	3f 83       	std	Y+7, r19	; 0x07
    4348:	2e 83       	std	Y+6, r18	; 0x06
    434a:	8e 81       	ldd	r24, Y+6	; 0x06
    434c:	9f 81       	ldd	r25, Y+7	; 0x07
    434e:	81 30       	cpi	r24, 0x01	; 1
    4350:	91 05       	cpc	r25, r1
    4352:	21 f1       	breq	.+72     	; 0x439c <T2_Init+0x74>
    4354:	2e 81       	ldd	r18, Y+6	; 0x06
    4356:	3f 81       	ldd	r19, Y+7	; 0x07
    4358:	22 30       	cpi	r18, 0x02	; 2
    435a:	31 05       	cpc	r19, r1
    435c:	2c f4       	brge	.+10     	; 0x4368 <T2_Init+0x40>
    435e:	8e 81       	ldd	r24, Y+6	; 0x06
    4360:	9f 81       	ldd	r25, Y+7	; 0x07
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	61 f0       	breq	.+24     	; 0x437e <T2_Init+0x56>
    4366:	47 c0       	rjmp	.+142    	; 0x43f6 <T2_Init+0xce>
    4368:	2e 81       	ldd	r18, Y+6	; 0x06
    436a:	3f 81       	ldd	r19, Y+7	; 0x07
    436c:	22 30       	cpi	r18, 0x02	; 2
    436e:	31 05       	cpc	r19, r1
    4370:	21 f1       	breq	.+72     	; 0x43ba <T2_Init+0x92>
    4372:	8e 81       	ldd	r24, Y+6	; 0x06
    4374:	9f 81       	ldd	r25, Y+7	; 0x07
    4376:	83 30       	cpi	r24, 0x03	; 3
    4378:	91 05       	cpc	r25, r1
    437a:	71 f1       	breq	.+92     	; 0x43d8 <T2_Init+0xb0>
    437c:	3c c0       	rjmp	.+120    	; 0x43f6 <T2_Init+0xce>
   {
      case TIMER2_NORMAL_MODE:
      CLEAR_BIT(TCCR2_R,WGM20_B);
    437e:	a5 e4       	ldi	r26, 0x45	; 69
    4380:	b0 e0       	ldi	r27, 0x00	; 0
    4382:	e5 e4       	ldi	r30, 0x45	; 69
    4384:	f0 e0       	ldi	r31, 0x00	; 0
    4386:	80 81       	ld	r24, Z
    4388:	8f 7b       	andi	r24, 0xBF	; 191
    438a:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR2_R,WGM21_B);
    438c:	a5 e4       	ldi	r26, 0x45	; 69
    438e:	b0 e0       	ldi	r27, 0x00	; 0
    4390:	e5 e4       	ldi	r30, 0x45	; 69
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	80 81       	ld	r24, Z
    4396:	87 7f       	andi	r24, 0xF7	; 247
    4398:	8c 93       	st	X, r24
    439a:	2f c0       	rjmp	.+94     	; 0x43fa <T2_Init+0xd2>
      break;
      case TIMER2_PHASECORRECT_MODE:
      SET_BIT(TCCR2_R,WGM20_B);
    439c:	a5 e4       	ldi	r26, 0x45	; 69
    439e:	b0 e0       	ldi	r27, 0x00	; 0
    43a0:	e5 e4       	ldi	r30, 0x45	; 69
    43a2:	f0 e0       	ldi	r31, 0x00	; 0
    43a4:	80 81       	ld	r24, Z
    43a6:	80 64       	ori	r24, 0x40	; 64
    43a8:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR2_R,WGM21_B);
    43aa:	a5 e4       	ldi	r26, 0x45	; 69
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	e5 e4       	ldi	r30, 0x45	; 69
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	80 81       	ld	r24, Z
    43b4:	87 7f       	andi	r24, 0xF7	; 247
    43b6:	8c 93       	st	X, r24
    43b8:	20 c0       	rjmp	.+64     	; 0x43fa <T2_Init+0xd2>
      break;
      case TIMER2_CTC_MODE:
      CLEAR_BIT(TCCR2_R,WGM20_B);
    43ba:	a5 e4       	ldi	r26, 0x45	; 69
    43bc:	b0 e0       	ldi	r27, 0x00	; 0
    43be:	e5 e4       	ldi	r30, 0x45	; 69
    43c0:	f0 e0       	ldi	r31, 0x00	; 0
    43c2:	80 81       	ld	r24, Z
    43c4:	8f 7b       	andi	r24, 0xBF	; 191
    43c6:	8c 93       	st	X, r24
      SET_BIT(TCCR2_R,WGM21_B);
    43c8:	a5 e4       	ldi	r26, 0x45	; 69
    43ca:	b0 e0       	ldi	r27, 0x00	; 0
    43cc:	e5 e4       	ldi	r30, 0x45	; 69
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	80 81       	ld	r24, Z
    43d2:	88 60       	ori	r24, 0x08	; 8
    43d4:	8c 93       	st	X, r24
    43d6:	11 c0       	rjmp	.+34     	; 0x43fa <T2_Init+0xd2>
      break;
      case TIMER2_FASTPWM_MODE:
      SET_BIT(TCCR2_R,WGM20_B);
    43d8:	a5 e4       	ldi	r26, 0x45	; 69
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	e5 e4       	ldi	r30, 0x45	; 69
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	80 64       	ori	r24, 0x40	; 64
    43e4:	8c 93       	st	X, r24
      SET_BIT(TCCR2_R,WGM21_B);
    43e6:	a5 e4       	ldi	r26, 0x45	; 69
    43e8:	b0 e0       	ldi	r27, 0x00	; 0
    43ea:	e5 e4       	ldi	r30, 0x45	; 69
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	80 81       	ld	r24, Z
    43f0:	88 60       	ori	r24, 0x08	; 8
    43f2:	8c 93       	st	X, r24
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <T2_Init+0xd2>
      break;
      default:
      return E_ERROR;
    43f6:	1d 82       	std	Y+5, r1	; 0x05
    43f8:	61 c0       	rjmp	.+194    	; 0x44bc <T2_Init+0x194>
      break;
   }

   //clear the CS bits in the Timer control register and set the prescaler value
   TCCR2_R &= 0xF8;
    43fa:	a5 e4       	ldi	r26, 0x45	; 69
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	e5 e4       	ldi	r30, 0x45	; 69
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	88 7f       	andi	r24, 0xF8	; 248
    4406:	8c 93       	st	X, r24
   TCCR2_R |= enuScaler;
    4408:	a5 e4       	ldi	r26, 0x45	; 69
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	e5 e4       	ldi	r30, 0x45	; 69
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	90 81       	ld	r25, Z
    4412:	8a 81       	ldd	r24, Y+2	; 0x02
    4414:	89 2b       	or	r24, r25
    4416:	8c 93       	st	X, r24

   //set the prescaler value in a global variable for other functions to use
   switch(enuScaler)
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	28 2f       	mov	r18, r24
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	3c 83       	std	Y+4, r19	; 0x04
    4420:	2b 83       	std	Y+3, r18	; 0x03
    4422:	8b 81       	ldd	r24, Y+3	; 0x03
    4424:	9c 81       	ldd	r25, Y+4	; 0x04
    4426:	82 30       	cpi	r24, 0x02	; 2
    4428:	91 05       	cpc	r25, r1
    442a:	59 f1       	breq	.+86     	; 0x4482 <T2_Init+0x15a>
    442c:	2b 81       	ldd	r18, Y+3	; 0x03
    442e:	3c 81       	ldd	r19, Y+4	; 0x04
    4430:	23 30       	cpi	r18, 0x03	; 3
    4432:	31 05       	cpc	r19, r1
    4434:	54 f4       	brge	.+20     	; 0x444a <T2_Init+0x122>
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	00 97       	sbiw	r24, 0x00	; 0
    443c:	b1 f0       	breq	.+44     	; 0x446a <T2_Init+0x142>
    443e:	2b 81       	ldd	r18, Y+3	; 0x03
    4440:	3c 81       	ldd	r19, Y+4	; 0x04
    4442:	21 30       	cpi	r18, 0x01	; 1
    4444:	31 05       	cpc	r19, r1
    4446:	b1 f0       	breq	.+44     	; 0x4474 <T2_Init+0x14c>
    4448:	37 c0       	rjmp	.+110    	; 0x44b8 <T2_Init+0x190>
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	9c 81       	ldd	r25, Y+4	; 0x04
    444e:	86 30       	cpi	r24, 0x06	; 6
    4450:	91 05       	cpc	r25, r1
    4452:	29 f1       	breq	.+74     	; 0x449e <T2_Init+0x176>
    4454:	2b 81       	ldd	r18, Y+3	; 0x03
    4456:	3c 81       	ldd	r19, Y+4	; 0x04
    4458:	27 30       	cpi	r18, 0x07	; 7
    445a:	31 05       	cpc	r19, r1
    445c:	39 f1       	breq	.+78     	; 0x44ac <T2_Init+0x184>
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	9c 81       	ldd	r25, Y+4	; 0x04
    4462:	84 30       	cpi	r24, 0x04	; 4
    4464:	91 05       	cpc	r25, r1
    4466:	a1 f0       	breq	.+40     	; 0x4490 <T2_Init+0x168>
    4468:	27 c0       	rjmp	.+78     	; 0x44b8 <T2_Init+0x190>
   {
      case TIMER2_STOP:          Gu16_T2Prescaler=0;       break;
    446a:	10 92 b3 01 	sts	0x01B3, r1
    446e:	10 92 b2 01 	sts	0x01B2, r1
    4472:	22 c0       	rjmp	.+68     	; 0x44b8 <T2_Init+0x190>
      case TIMER2_SCALER_1:      Gu16_T2Prescaler=1;       break;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	90 93 b3 01 	sts	0x01B3, r25
    447c:	80 93 b2 01 	sts	0x01B2, r24
    4480:	1b c0       	rjmp	.+54     	; 0x44b8 <T2_Init+0x190>
      case TIMER2_SCALER_8:      Gu16_T2Prescaler=8;       break;
    4482:	88 e0       	ldi	r24, 0x08	; 8
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	90 93 b3 01 	sts	0x01B3, r25
    448a:	80 93 b2 01 	sts	0x01B2, r24
    448e:	14 c0       	rjmp	.+40     	; 0x44b8 <T2_Init+0x190>
      case TIMER2_SCALER_64:     Gu16_T2Prescaler=64;      break;
    4490:	80 e4       	ldi	r24, 0x40	; 64
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	90 93 b3 01 	sts	0x01B3, r25
    4498:	80 93 b2 01 	sts	0x01B2, r24
    449c:	0d c0       	rjmp	.+26     	; 0x44b8 <T2_Init+0x190>
      case TIMER2_SCALER_256:    Gu16_T2Prescaler=256;     break;
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	90 93 b3 01 	sts	0x01B3, r25
    44a6:	80 93 b2 01 	sts	0x01B2, r24
    44aa:	06 c0       	rjmp	.+12     	; 0x44b8 <T2_Init+0x190>
      case TIMER2_SCALER_1024:   Gu16_T2Prescaler=1024;    break;
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	94 e0       	ldi	r25, 0x04	; 4
    44b0:	90 93 b3 01 	sts	0x01B3, r25
    44b4:	80 93 b2 01 	sts	0x01B2, r24
      default:                                             break;
   }
   //return E_OK state
   return E_OK;
    44b8:	91 e0       	ldi	r25, 0x01	; 1
    44ba:	9d 83       	std	Y+5, r25	; 0x05
    44bc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    44be:	27 96       	adiw	r28, 0x07	; 7
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	cf 91       	pop	r28
    44cc:	df 91       	pop	r29
    44ce:	08 95       	ret

000044d0 <T2_OC2Mode>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to initialize the OCR0 pin for use in PWM generation
************************************************************************************/
enuErrorStatus_t T2_OC2Mode(enuOC2Mode_t enuMode)
{
    44d0:	df 93       	push	r29
    44d2:	cf 93       	push	r28
    44d4:	00 d0       	rcall	.+0      	; 0x44d6 <T2_OC2Mode+0x6>
    44d6:	00 d0       	rcall	.+0      	; 0x44d8 <T2_OC2Mode+0x8>
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	89 83       	std	Y+1, r24	; 0x01
   //set the OC0 pin mode by setting the correct configuration of the COM bits for the mode the user has selected
   switch (enuMode)
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	28 2f       	mov	r18, r24
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	3c 83       	std	Y+4, r19	; 0x04
    44e6:	2b 83       	std	Y+3, r18	; 0x03
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	9c 81       	ldd	r25, Y+4	; 0x04
    44ec:	81 30       	cpi	r24, 0x01	; 1
    44ee:	91 05       	cpc	r25, r1
    44f0:	21 f1       	breq	.+72     	; 0x453a <T2_OC2Mode+0x6a>
    44f2:	2b 81       	ldd	r18, Y+3	; 0x03
    44f4:	3c 81       	ldd	r19, Y+4	; 0x04
    44f6:	22 30       	cpi	r18, 0x02	; 2
    44f8:	31 05       	cpc	r19, r1
    44fa:	2c f4       	brge	.+10     	; 0x4506 <T2_OC2Mode+0x36>
    44fc:	8b 81       	ldd	r24, Y+3	; 0x03
    44fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4500:	00 97       	sbiw	r24, 0x00	; 0
    4502:	61 f0       	breq	.+24     	; 0x451c <T2_OC2Mode+0x4c>
    4504:	47 c0       	rjmp	.+142    	; 0x4594 <T2_OC2Mode+0xc4>
    4506:	2b 81       	ldd	r18, Y+3	; 0x03
    4508:	3c 81       	ldd	r19, Y+4	; 0x04
    450a:	22 30       	cpi	r18, 0x02	; 2
    450c:	31 05       	cpc	r19, r1
    450e:	21 f1       	breq	.+72     	; 0x4558 <T2_OC2Mode+0x88>
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    4512:	9c 81       	ldd	r25, Y+4	; 0x04
    4514:	83 30       	cpi	r24, 0x03	; 3
    4516:	91 05       	cpc	r25, r1
    4518:	71 f1       	breq	.+92     	; 0x4576 <T2_OC2Mode+0xa6>
    451a:	3c c0       	rjmp	.+120    	; 0x4594 <T2_OC2Mode+0xc4>
   {
      case OC2_DISCONNECTED:
      CLEAR_BIT(TCCR2_R,COM20_B);
    451c:	a5 e4       	ldi	r26, 0x45	; 69
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e5 e4       	ldi	r30, 0x45	; 69
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	8f 7e       	andi	r24, 0xEF	; 239
    4528:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR2_R,COM21_B);
    452a:	a5 e4       	ldi	r26, 0x45	; 69
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	e5 e4       	ldi	r30, 0x45	; 69
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	8f 7d       	andi	r24, 0xDF	; 223
    4536:	8c 93       	st	X, r24
    4538:	2f c0       	rjmp	.+94     	; 0x4598 <T2_OC2Mode+0xc8>
      break;
      case OC2_TOGGLE:
      SET_BIT(TCCR2_R,COM20_B);
    453a:	a5 e4       	ldi	r26, 0x45	; 69
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	e5 e4       	ldi	r30, 0x45	; 69
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	80 61       	ori	r24, 0x10	; 16
    4546:	8c 93       	st	X, r24
      CLEAR_BIT(TCCR2_R,COM21_B);
    4548:	a5 e4       	ldi	r26, 0x45	; 69
    454a:	b0 e0       	ldi	r27, 0x00	; 0
    454c:	e5 e4       	ldi	r30, 0x45	; 69
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	8f 7d       	andi	r24, 0xDF	; 223
    4554:	8c 93       	st	X, r24
    4556:	20 c0       	rjmp	.+64     	; 0x4598 <T2_OC2Mode+0xc8>
      break;
      case OC2_NON_INVERTING:
      CLEAR_BIT(TCCR2_R,COM20_B);
    4558:	a5 e4       	ldi	r26, 0x45	; 69
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	e5 e4       	ldi	r30, 0x45	; 69
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	8f 7e       	andi	r24, 0xEF	; 239
    4564:	8c 93       	st	X, r24
      SET_BIT(TCCR2_R,COM21_B);
    4566:	a5 e4       	ldi	r26, 0x45	; 69
    4568:	b0 e0       	ldi	r27, 0x00	; 0
    456a:	e5 e4       	ldi	r30, 0x45	; 69
    456c:	f0 e0       	ldi	r31, 0x00	; 0
    456e:	80 81       	ld	r24, Z
    4570:	80 62       	ori	r24, 0x20	; 32
    4572:	8c 93       	st	X, r24
    4574:	11 c0       	rjmp	.+34     	; 0x4598 <T2_OC2Mode+0xc8>
      break;
      case OC2_INVERTING:
      SET_BIT(TCCR2_R,COM20_B);
    4576:	a5 e4       	ldi	r26, 0x45	; 69
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e5 e4       	ldi	r30, 0x45	; 69
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	80 61       	ori	r24, 0x10	; 16
    4582:	8c 93       	st	X, r24
      SET_BIT(TCCR2_R,COM21_B);
    4584:	a5 e4       	ldi	r26, 0x45	; 69
    4586:	b0 e0       	ldi	r27, 0x00	; 0
    4588:	e5 e4       	ldi	r30, 0x45	; 69
    458a:	f0 e0       	ldi	r31, 0x00	; 0
    458c:	80 81       	ld	r24, Z
    458e:	80 62       	ori	r24, 0x20	; 32
    4590:	8c 93       	st	X, r24
    4592:	02 c0       	rjmp	.+4      	; 0x4598 <T2_OC2Mode+0xc8>
      break;

      default:
      return E_ERROR;
    4594:	1a 82       	std	Y+2, r1	; 0x02
    4596:	02 c0       	rjmp	.+4      	; 0x459c <T2_OC2Mode+0xcc>
      break;
   }
   //return E_OK state
   return E_OK;
    4598:	91 e0       	ldi	r25, 0x01	; 1
    459a:	9a 83       	std	Y+2, r25	; 0x02
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	08 95       	ret

000045ac <T2_OV_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable overflow interrupt
************************************************************************************/
enuErrorStatus_t T2_OV_InterruptEnable(void)
{
    45ac:	df 93       	push	r29
    45ae:	cf 93       	push	r28
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
   //set the TOIE bit to enable the overflow interrupt
   SET_BIT(TIMSK_R,TOIE2_B);
    45b4:	a9 e5       	ldi	r26, 0x59	; 89
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	e9 e5       	ldi	r30, 0x59	; 89
    45ba:	f0 e0       	ldi	r31, 0x00	; 0
    45bc:	80 81       	ld	r24, Z
    45be:	80 64       	ori	r24, 0x40	; 64
    45c0:	8c 93       	st	X, r24
   return E_OK;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
}
    45c4:	cf 91       	pop	r28
    45c6:	df 91       	pop	r29
    45c8:	08 95       	ret

000045ca <T2_OV_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable overflow interrupt
************************************************************************************/
enuErrorStatus_t T2_OV_InterruptDisable(void)
{
    45ca:	df 93       	push	r29
    45cc:	cf 93       	push	r28
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
   //clear the TOIE bit to disable the overflow interrupt
   CLEAR_BIT(TIMSK_R,TOIE2_B);
    45d2:	a9 e5       	ldi	r26, 0x59	; 89
    45d4:	b0 e0       	ldi	r27, 0x00	; 0
    45d6:	e9 e5       	ldi	r30, 0x59	; 89
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	80 81       	ld	r24, Z
    45dc:	8f 7b       	andi	r24, 0xBF	; 191
    45de:	8c 93       	st	X, r24
   return E_OK;
    45e0:	81 e0       	ldi	r24, 0x01	; 1
}
    45e2:	cf 91       	pop	r28
    45e4:	df 91       	pop	r29
    45e6:	08 95       	ret

000045e8 <T2_OC_InterruptEnable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to enable output compare interrupt
************************************************************************************/
enuErrorStatus_t T2_OC_InterruptEnable(void)
{
    45e8:	df 93       	push	r29
    45ea:	cf 93       	push	r28
    45ec:	cd b7       	in	r28, 0x3d	; 61
    45ee:	de b7       	in	r29, 0x3e	; 62
   //set the TOIE bit to enable output compare interrupt
   SET_BIT(TIMSK_R,OCIE2_B);
    45f0:	a9 e5       	ldi	r26, 0x59	; 89
    45f2:	b0 e0       	ldi	r27, 0x00	; 0
    45f4:	e9 e5       	ldi	r30, 0x59	; 89
    45f6:	f0 e0       	ldi	r31, 0x00	; 0
    45f8:	80 81       	ld	r24, Z
    45fa:	80 68       	ori	r24, 0x80	; 128
    45fc:	8c 93       	st	X, r24
   return E_OK;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
}
    4600:	cf 91       	pop	r28
    4602:	df 91       	pop	r29
    4604:	08 95       	ret

00004606 <T2_OC_InterruptDisable>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to disable output compare interrupt
************************************************************************************/
enuErrorStatus_t T2_OC_InterruptDisable(void)
{
    4606:	df 93       	push	r29
    4608:	cf 93       	push	r28
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
   //clear the TOIE bit to disable output compare interrupt
   CLEAR_BIT(TIMSK_R,OCIE2_B);
    460e:	a9 e5       	ldi	r26, 0x59	; 89
    4610:	b0 e0       	ldi	r27, 0x00	; 0
    4612:	e9 e5       	ldi	r30, 0x59	; 89
    4614:	f0 e0       	ldi	r31, 0x00	; 0
    4616:	80 81       	ld	r24, Z
    4618:	8f 77       	andi	r24, 0x7F	; 127
    461a:	8c 93       	st	X, r24
   return E_OK;
    461c:	81 e0       	ldi	r24, 0x01	; 1
}
    461e:	cf 91       	pop	r28
    4620:	df 91       	pop	r29
    4622:	08 95       	ret

00004624 <T2_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to start the timer and set a callback function to be called when time runs up
************************************************************************************/
enuErrorStatus_t T2_Start(uint64_t u64TimerValue, void(*pfCallback)(void))
{
    4624:	2f 92       	push	r2
    4626:	3f 92       	push	r3
    4628:	4f 92       	push	r4
    462a:	5f 92       	push	r5
    462c:	6f 92       	push	r6
    462e:	7f 92       	push	r7
    4630:	8f 92       	push	r8
    4632:	9f 92       	push	r9
    4634:	af 92       	push	r10
    4636:	bf 92       	push	r11
    4638:	cf 92       	push	r12
    463a:	df 92       	push	r13
    463c:	ef 92       	push	r14
    463e:	ff 92       	push	r15
    4640:	0f 93       	push	r16
    4642:	1f 93       	push	r17
    4644:	df 93       	push	r29
    4646:	cf 93       	push	r28
    4648:	cd b7       	in	r28, 0x3d	; 61
    464a:	de b7       	in	r29, 0x3e	; 62
    464c:	60 97       	sbiw	r28, 0x10	; 16
    464e:	0f b6       	in	r0, 0x3f	; 63
    4650:	f8 94       	cli
    4652:	de bf       	out	0x3e, r29	; 62
    4654:	0f be       	out	0x3f, r0	; 63
    4656:	cd bf       	out	0x3d, r28	; 61
    4658:	2e 83       	std	Y+6, r18	; 0x06
    465a:	3f 83       	std	Y+7, r19	; 0x07
    465c:	48 87       	std	Y+8, r20	; 0x08
    465e:	59 87       	std	Y+9, r21	; 0x09
    4660:	6a 87       	std	Y+10, r22	; 0x0a
    4662:	7b 87       	std	Y+11, r23	; 0x0b
    4664:	8c 87       	std	Y+12, r24	; 0x0c
    4666:	9d 87       	std	Y+13, r25	; 0x0d
    4668:	1f 87       	std	Y+15, r17	; 0x0f
    466a:	0e 87       	std	Y+14, r16	; 0x0e
   enuTimer2Scaler_t enuScaler=TIMER2_STOP;
    466c:	1d 82       	std	Y+5, r1	; 0x05

   //check if the timer interrupts are enabled
   if (GET_BIT(TIMSK_R,TOIE2_B) || GET_BIT(TIMSK_R,OCIE2_B))
    466e:	e9 e5       	ldi	r30, 0x59	; 89
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	80 81       	ld	r24, Z
    4674:	88 2f       	mov	r24, r24
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	80 74       	andi	r24, 0x40	; 64
    467a:	90 70       	andi	r25, 0x00	; 0
    467c:	08 2e       	mov	r0, r24
    467e:	89 2f       	mov	r24, r25
    4680:	00 0c       	add	r0, r0
    4682:	88 1f       	adc	r24, r24
    4684:	99 0b       	sbc	r25, r25
    4686:	00 0c       	add	r0, r0
    4688:	88 1f       	adc	r24, r24
    468a:	99 1f       	adc	r25, r25
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	59 f4       	brne	.+22     	; 0x46a6 <T2_Start+0x82>
    4690:	e9 e5       	ldi	r30, 0x59	; 89
    4692:	f0 e0       	ldi	r31, 0x00	; 0
    4694:	80 81       	ld	r24, Z
    4696:	88 1f       	adc	r24, r24
    4698:	88 27       	eor	r24, r24
    469a:	88 1f       	adc	r24, r24
    469c:	88 2f       	mov	r24, r24
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	90 70       	andi	r25, 0x00	; 0
    46a2:	00 97       	sbiw	r24, 0x00	; 0
    46a4:	61 f0       	breq	.+24     	; 0x46be <T2_Start+0x9a>
   {
      //check if the user has not sent a pointer to function to execute
      if (pfCallback == NULLPTR)
    46a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    46a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    46aa:	00 97       	sbiw	r24, 0x00	; 0
    46ac:	11 f4       	brne	.+4      	; 0x46b2 <T2_Start+0x8e>
      {
         //return error
         return E_ERROR;
    46ae:	18 8a       	std	Y+16, r1	; 0x10
    46b0:	3c c2       	rjmp	.+1144   	; 0x4b2a <T2_Start+0x506>
      }
      else
      {
         //else store this pointer to function in the global pointer to function for the ISR to be able to execute
         G_fptr2=pfCallback;
    46b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    46b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    46b6:	90 93 a0 01 	sts	0x01A0, r25
    46ba:	80 93 9f 01 	sts	0x019F, r24
      }
   }

    //if the user sent a 0 time delay
    if (u64TimerValue==0)
    46be:	8e 81       	ldd	r24, Y+6	; 0x06
    46c0:	9f 81       	ldd	r25, Y+7	; 0x07
    46c2:	89 2b       	or	r24, r25
    46c4:	98 85       	ldd	r25, Y+8	; 0x08
    46c6:	89 2b       	or	r24, r25
    46c8:	99 85       	ldd	r25, Y+9	; 0x09
    46ca:	89 2b       	or	r24, r25
    46cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ce:	89 2b       	or	r24, r25
    46d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    46d2:	89 2b       	or	r24, r25
    46d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    46d6:	89 2b       	or	r24, r25
    46d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    46da:	89 2b       	or	r24, r25
    46dc:	88 23       	and	r24, r24
    46de:	11 f4       	brne	.+4      	; 0x46e4 <T2_Start+0xc0>
    {
       //return an error
       return E_ERROR;
    46e0:	18 8a       	std	Y+16, r1	; 0x10
    46e2:	23 c2       	rjmp	.+1094   	; 0x4b2a <T2_Start+0x506>
    }

    //else select the appropriate timer prescaler depending on the time sent for the least number of overflows
    else if (u64TimerValue<=256)
    46e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e6:	88 23       	and	r24, r24
    46e8:	69 f5       	brne	.+90     	; 0x4744 <T2_Start+0x120>
    46ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ec:	88 23       	and	r24, r24
    46ee:	39 f5       	brne	.+78     	; 0x473e <T2_Start+0x11a>
    46f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    46f2:	88 23       	and	r24, r24
    46f4:	39 f5       	brne	.+78     	; 0x4744 <T2_Start+0x120>
    46f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    46f8:	88 23       	and	r24, r24
    46fa:	09 f5       	brne	.+66     	; 0x473e <T2_Start+0x11a>
    46fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    46fe:	88 23       	and	r24, r24
    4700:	09 f5       	brne	.+66     	; 0x4744 <T2_Start+0x120>
    4702:	8b 85       	ldd	r24, Y+11	; 0x0b
    4704:	88 23       	and	r24, r24
    4706:	d9 f4       	brne	.+54     	; 0x473e <T2_Start+0x11a>
    4708:	8a 85       	ldd	r24, Y+10	; 0x0a
    470a:	88 23       	and	r24, r24
    470c:	d9 f4       	brne	.+54     	; 0x4744 <T2_Start+0x120>
    470e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4710:	88 23       	and	r24, r24
    4712:	a9 f4       	brne	.+42     	; 0x473e <T2_Start+0x11a>
    4714:	89 85       	ldd	r24, Y+9	; 0x09
    4716:	88 23       	and	r24, r24
    4718:	a9 f4       	brne	.+42     	; 0x4744 <T2_Start+0x120>
    471a:	89 85       	ldd	r24, Y+9	; 0x09
    471c:	88 23       	and	r24, r24
    471e:	79 f4       	brne	.+30     	; 0x473e <T2_Start+0x11a>
    4720:	88 85       	ldd	r24, Y+8	; 0x08
    4722:	88 23       	and	r24, r24
    4724:	79 f4       	brne	.+30     	; 0x4744 <T2_Start+0x120>
    4726:	88 85       	ldd	r24, Y+8	; 0x08
    4728:	88 23       	and	r24, r24
    472a:	49 f4       	brne	.+18     	; 0x473e <T2_Start+0x11a>
    472c:	8f 81       	ldd	r24, Y+7	; 0x07
    472e:	82 30       	cpi	r24, 0x02	; 2
    4730:	48 f4       	brcc	.+18     	; 0x4744 <T2_Start+0x120>
    4732:	8f 81       	ldd	r24, Y+7	; 0x07
    4734:	81 30       	cpi	r24, 0x01	; 1
    4736:	19 f4       	brne	.+6      	; 0x473e <T2_Start+0x11a>
    4738:	8e 81       	ldd	r24, Y+6	; 0x06
    473a:	88 23       	and	r24, r24
    473c:	19 f4       	brne	.+6      	; 0x4744 <T2_Start+0x120>
    {
       enuScaler=TIMER2_SCALER_8;
    473e:	82 e0       	ldi	r24, 0x02	; 2
    4740:	8d 83       	std	Y+5, r24	; 0x05
    4742:	c8 c0       	rjmp	.+400    	; 0x48d4 <T2_Start+0x2b0>
    }
    else if (u64TimerValue>256 && u64TimerValue<=2048)
    4744:	8d 85       	ldd	r24, Y+13	; 0x0d
    4746:	88 23       	and	r24, r24
    4748:	81 f5       	brne	.+96     	; 0x47aa <T2_Start+0x186>
    474a:	8d 85       	ldd	r24, Y+13	; 0x0d
    474c:	88 23       	and	r24, r24
    474e:	09 f0       	breq	.+2      	; 0x4752 <T2_Start+0x12e>
    4750:	5c c0       	rjmp	.+184    	; 0x480a <T2_Start+0x1e6>
    4752:	8c 85       	ldd	r24, Y+12	; 0x0c
    4754:	88 23       	and	r24, r24
    4756:	49 f5       	brne	.+82     	; 0x47aa <T2_Start+0x186>
    4758:	8c 85       	ldd	r24, Y+12	; 0x0c
    475a:	88 23       	and	r24, r24
    475c:	09 f0       	breq	.+2      	; 0x4760 <T2_Start+0x13c>
    475e:	55 c0       	rjmp	.+170    	; 0x480a <T2_Start+0x1e6>
    4760:	8b 85       	ldd	r24, Y+11	; 0x0b
    4762:	88 23       	and	r24, r24
    4764:	11 f5       	brne	.+68     	; 0x47aa <T2_Start+0x186>
    4766:	8b 85       	ldd	r24, Y+11	; 0x0b
    4768:	88 23       	and	r24, r24
    476a:	09 f0       	breq	.+2      	; 0x476e <T2_Start+0x14a>
    476c:	4e c0       	rjmp	.+156    	; 0x480a <T2_Start+0x1e6>
    476e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4770:	88 23       	and	r24, r24
    4772:	d9 f4       	brne	.+54     	; 0x47aa <T2_Start+0x186>
    4774:	8a 85       	ldd	r24, Y+10	; 0x0a
    4776:	88 23       	and	r24, r24
    4778:	09 f0       	breq	.+2      	; 0x477c <T2_Start+0x158>
    477a:	47 c0       	rjmp	.+142    	; 0x480a <T2_Start+0x1e6>
    477c:	89 85       	ldd	r24, Y+9	; 0x09
    477e:	88 23       	and	r24, r24
    4780:	a1 f4       	brne	.+40     	; 0x47aa <T2_Start+0x186>
    4782:	89 85       	ldd	r24, Y+9	; 0x09
    4784:	88 23       	and	r24, r24
    4786:	09 f0       	breq	.+2      	; 0x478a <T2_Start+0x166>
    4788:	40 c0       	rjmp	.+128    	; 0x480a <T2_Start+0x1e6>
    478a:	88 85       	ldd	r24, Y+8	; 0x08
    478c:	88 23       	and	r24, r24
    478e:	69 f4       	brne	.+26     	; 0x47aa <T2_Start+0x186>
    4790:	88 85       	ldd	r24, Y+8	; 0x08
    4792:	88 23       	and	r24, r24
    4794:	09 f0       	breq	.+2      	; 0x4798 <T2_Start+0x174>
    4796:	39 c0       	rjmp	.+114    	; 0x480a <T2_Start+0x1e6>
    4798:	8f 81       	ldd	r24, Y+7	; 0x07
    479a:	82 30       	cpi	r24, 0x02	; 2
    479c:	30 f4       	brcc	.+12     	; 0x47aa <T2_Start+0x186>
    479e:	8f 81       	ldd	r24, Y+7	; 0x07
    47a0:	81 30       	cpi	r24, 0x01	; 1
    47a2:	99 f5       	brne	.+102    	; 0x480a <T2_Start+0x1e6>
    47a4:	8e 81       	ldd	r24, Y+6	; 0x06
    47a6:	88 23       	and	r24, r24
    47a8:	81 f1       	breq	.+96     	; 0x480a <T2_Start+0x1e6>
    47aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ac:	88 23       	and	r24, r24
    47ae:	69 f5       	brne	.+90     	; 0x480a <T2_Start+0x1e6>
    47b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47b2:	88 23       	and	r24, r24
    47b4:	39 f5       	brne	.+78     	; 0x4804 <T2_Start+0x1e0>
    47b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    47b8:	88 23       	and	r24, r24
    47ba:	39 f5       	brne	.+78     	; 0x480a <T2_Start+0x1e6>
    47bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    47be:	88 23       	and	r24, r24
    47c0:	09 f5       	brne	.+66     	; 0x4804 <T2_Start+0x1e0>
    47c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    47c4:	88 23       	and	r24, r24
    47c6:	09 f5       	brne	.+66     	; 0x480a <T2_Start+0x1e6>
    47c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    47ca:	88 23       	and	r24, r24
    47cc:	d9 f4       	brne	.+54     	; 0x4804 <T2_Start+0x1e0>
    47ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    47d0:	88 23       	and	r24, r24
    47d2:	d9 f4       	brne	.+54     	; 0x480a <T2_Start+0x1e6>
    47d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    47d6:	88 23       	and	r24, r24
    47d8:	a9 f4       	brne	.+42     	; 0x4804 <T2_Start+0x1e0>
    47da:	89 85       	ldd	r24, Y+9	; 0x09
    47dc:	88 23       	and	r24, r24
    47de:	a9 f4       	brne	.+42     	; 0x480a <T2_Start+0x1e6>
    47e0:	89 85       	ldd	r24, Y+9	; 0x09
    47e2:	88 23       	and	r24, r24
    47e4:	79 f4       	brne	.+30     	; 0x4804 <T2_Start+0x1e0>
    47e6:	88 85       	ldd	r24, Y+8	; 0x08
    47e8:	88 23       	and	r24, r24
    47ea:	79 f4       	brne	.+30     	; 0x480a <T2_Start+0x1e6>
    47ec:	88 85       	ldd	r24, Y+8	; 0x08
    47ee:	88 23       	and	r24, r24
    47f0:	49 f4       	brne	.+18     	; 0x4804 <T2_Start+0x1e0>
    47f2:	8f 81       	ldd	r24, Y+7	; 0x07
    47f4:	89 30       	cpi	r24, 0x09	; 9
    47f6:	48 f4       	brcc	.+18     	; 0x480a <T2_Start+0x1e6>
    47f8:	8f 81       	ldd	r24, Y+7	; 0x07
    47fa:	88 30       	cpi	r24, 0x08	; 8
    47fc:	19 f4       	brne	.+6      	; 0x4804 <T2_Start+0x1e0>
    47fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4800:	88 23       	and	r24, r24
    4802:	19 f4       	brne	.+6      	; 0x480a <T2_Start+0x1e6>
    {
       enuScaler=TIMER2_SCALER_64;
    4804:	84 e0       	ldi	r24, 0x04	; 4
    4806:	8d 83       	std	Y+5, r24	; 0x05
    4808:	65 c0       	rjmp	.+202    	; 0x48d4 <T2_Start+0x2b0>
    }
    else if (u64TimerValue>2048 && u64TimerValue<=8192)
    480a:	8d 85       	ldd	r24, Y+13	; 0x0d
    480c:	88 23       	and	r24, r24
    480e:	81 f5       	brne	.+96     	; 0x4870 <T2_Start+0x24c>
    4810:	8d 85       	ldd	r24, Y+13	; 0x0d
    4812:	88 23       	and	r24, r24
    4814:	09 f0       	breq	.+2      	; 0x4818 <T2_Start+0x1f4>
    4816:	5c c0       	rjmp	.+184    	; 0x48d0 <T2_Start+0x2ac>
    4818:	8c 85       	ldd	r24, Y+12	; 0x0c
    481a:	88 23       	and	r24, r24
    481c:	49 f5       	brne	.+82     	; 0x4870 <T2_Start+0x24c>
    481e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4820:	88 23       	and	r24, r24
    4822:	09 f0       	breq	.+2      	; 0x4826 <T2_Start+0x202>
    4824:	55 c0       	rjmp	.+170    	; 0x48d0 <T2_Start+0x2ac>
    4826:	8b 85       	ldd	r24, Y+11	; 0x0b
    4828:	88 23       	and	r24, r24
    482a:	11 f5       	brne	.+68     	; 0x4870 <T2_Start+0x24c>
    482c:	8b 85       	ldd	r24, Y+11	; 0x0b
    482e:	88 23       	and	r24, r24
    4830:	09 f0       	breq	.+2      	; 0x4834 <T2_Start+0x210>
    4832:	4e c0       	rjmp	.+156    	; 0x48d0 <T2_Start+0x2ac>
    4834:	8a 85       	ldd	r24, Y+10	; 0x0a
    4836:	88 23       	and	r24, r24
    4838:	d9 f4       	brne	.+54     	; 0x4870 <T2_Start+0x24c>
    483a:	8a 85       	ldd	r24, Y+10	; 0x0a
    483c:	88 23       	and	r24, r24
    483e:	09 f0       	breq	.+2      	; 0x4842 <T2_Start+0x21e>
    4840:	47 c0       	rjmp	.+142    	; 0x48d0 <T2_Start+0x2ac>
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	88 23       	and	r24, r24
    4846:	a1 f4       	brne	.+40     	; 0x4870 <T2_Start+0x24c>
    4848:	89 85       	ldd	r24, Y+9	; 0x09
    484a:	88 23       	and	r24, r24
    484c:	09 f0       	breq	.+2      	; 0x4850 <T2_Start+0x22c>
    484e:	40 c0       	rjmp	.+128    	; 0x48d0 <T2_Start+0x2ac>
    4850:	88 85       	ldd	r24, Y+8	; 0x08
    4852:	88 23       	and	r24, r24
    4854:	69 f4       	brne	.+26     	; 0x4870 <T2_Start+0x24c>
    4856:	88 85       	ldd	r24, Y+8	; 0x08
    4858:	88 23       	and	r24, r24
    485a:	09 f0       	breq	.+2      	; 0x485e <T2_Start+0x23a>
    485c:	39 c0       	rjmp	.+114    	; 0x48d0 <T2_Start+0x2ac>
    485e:	8f 81       	ldd	r24, Y+7	; 0x07
    4860:	89 30       	cpi	r24, 0x09	; 9
    4862:	30 f4       	brcc	.+12     	; 0x4870 <T2_Start+0x24c>
    4864:	8f 81       	ldd	r24, Y+7	; 0x07
    4866:	88 30       	cpi	r24, 0x08	; 8
    4868:	99 f5       	brne	.+102    	; 0x48d0 <T2_Start+0x2ac>
    486a:	8e 81       	ldd	r24, Y+6	; 0x06
    486c:	88 23       	and	r24, r24
    486e:	81 f1       	breq	.+96     	; 0x48d0 <T2_Start+0x2ac>
    4870:	8d 85       	ldd	r24, Y+13	; 0x0d
    4872:	88 23       	and	r24, r24
    4874:	69 f5       	brne	.+90     	; 0x48d0 <T2_Start+0x2ac>
    4876:	8d 85       	ldd	r24, Y+13	; 0x0d
    4878:	88 23       	and	r24, r24
    487a:	39 f5       	brne	.+78     	; 0x48ca <T2_Start+0x2a6>
    487c:	8c 85       	ldd	r24, Y+12	; 0x0c
    487e:	88 23       	and	r24, r24
    4880:	39 f5       	brne	.+78     	; 0x48d0 <T2_Start+0x2ac>
    4882:	8c 85       	ldd	r24, Y+12	; 0x0c
    4884:	88 23       	and	r24, r24
    4886:	09 f5       	brne	.+66     	; 0x48ca <T2_Start+0x2a6>
    4888:	8b 85       	ldd	r24, Y+11	; 0x0b
    488a:	88 23       	and	r24, r24
    488c:	09 f5       	brne	.+66     	; 0x48d0 <T2_Start+0x2ac>
    488e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4890:	88 23       	and	r24, r24
    4892:	d9 f4       	brne	.+54     	; 0x48ca <T2_Start+0x2a6>
    4894:	8a 85       	ldd	r24, Y+10	; 0x0a
    4896:	88 23       	and	r24, r24
    4898:	d9 f4       	brne	.+54     	; 0x48d0 <T2_Start+0x2ac>
    489a:	8a 85       	ldd	r24, Y+10	; 0x0a
    489c:	88 23       	and	r24, r24
    489e:	a9 f4       	brne	.+42     	; 0x48ca <T2_Start+0x2a6>
    48a0:	89 85       	ldd	r24, Y+9	; 0x09
    48a2:	88 23       	and	r24, r24
    48a4:	a9 f4       	brne	.+42     	; 0x48d0 <T2_Start+0x2ac>
    48a6:	89 85       	ldd	r24, Y+9	; 0x09
    48a8:	88 23       	and	r24, r24
    48aa:	79 f4       	brne	.+30     	; 0x48ca <T2_Start+0x2a6>
    48ac:	88 85       	ldd	r24, Y+8	; 0x08
    48ae:	88 23       	and	r24, r24
    48b0:	79 f4       	brne	.+30     	; 0x48d0 <T2_Start+0x2ac>
    48b2:	88 85       	ldd	r24, Y+8	; 0x08
    48b4:	88 23       	and	r24, r24
    48b6:	49 f4       	brne	.+18     	; 0x48ca <T2_Start+0x2a6>
    48b8:	8f 81       	ldd	r24, Y+7	; 0x07
    48ba:	81 32       	cpi	r24, 0x21	; 33
    48bc:	48 f4       	brcc	.+18     	; 0x48d0 <T2_Start+0x2ac>
    48be:	8f 81       	ldd	r24, Y+7	; 0x07
    48c0:	80 32       	cpi	r24, 0x20	; 32
    48c2:	19 f4       	brne	.+6      	; 0x48ca <T2_Start+0x2a6>
    48c4:	8e 81       	ldd	r24, Y+6	; 0x06
    48c6:	88 23       	and	r24, r24
    48c8:	19 f4       	brne	.+6      	; 0x48d0 <T2_Start+0x2ac>
    {
       enuScaler=TIMER2_SCALER_256;
    48ca:	86 e0       	ldi	r24, 0x06	; 6
    48cc:	8d 83       	std	Y+5, r24	; 0x05
    48ce:	02 c0       	rjmp	.+4      	; 0x48d4 <T2_Start+0x2b0>
    }
    else
    {
       enuScaler=TIMER2_SCALER_1024;
    48d0:	87 e0       	ldi	r24, 0x07	; 7
    48d2:	8d 83       	std	Y+5, r24	; 0x05
    }

   //initialize the timer in normal mode with the new prescaler
   T2_Init(TIMER2_NORMAL_MODE,enuScaler);
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	6d 81       	ldd	r22, Y+5	; 0x05
    48d8:	0e 94 94 21 	call	0x4328	; 0x4328 <T2_Init>



   //calculate tick time of the selected prescaler
   uint32_t u32TimerFreq=F_CPU/Gu16_T2Prescaler;
    48dc:	80 91 b2 01 	lds	r24, 0x01B2
    48e0:	90 91 b3 01 	lds	r25, 0x01B3
    48e4:	9c 01       	movw	r18, r24
    48e6:	40 e0       	ldi	r20, 0x00	; 0
    48e8:	50 e0       	ldi	r21, 0x00	; 0
    48ea:	80 e0       	ldi	r24, 0x00	; 0
    48ec:	92 e1       	ldi	r25, 0x12	; 18
    48ee:	aa e7       	ldi	r26, 0x7A	; 122
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	bc 01       	movw	r22, r24
    48f4:	cd 01       	movw	r24, r26
    48f6:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
    48fa:	da 01       	movw	r26, r20
    48fc:	c9 01       	movw	r24, r18
    48fe:	89 83       	std	Y+1, r24	; 0x01
    4900:	9a 83       	std	Y+2, r25	; 0x02
    4902:	ab 83       	std	Y+3, r26	; 0x03
    4904:	bc 83       	std	Y+4, r27	; 0x04

   //calculate the number of overflows required to reach the selected time
   Gu32_T2MaxOVCount=((u64TimerValue*u32TimerFreq)/(T2_TICKS*USEC_TO_SEC));
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	9a 81       	ldd	r25, Y+2	; 0x02
    490a:	ab 81       	ldd	r26, Y+3	; 0x03
    490c:	bc 81       	ldd	r27, Y+4	; 0x04
    490e:	5c 01       	movw	r10, r24
    4910:	6d 01       	movw	r12, r26
    4912:	ee 24       	eor	r14, r14
    4914:	ff 24       	eor	r15, r15
    4916:	87 01       	movw	r16, r14
    4918:	2a 2d       	mov	r18, r10
    491a:	3b 2d       	mov	r19, r11
    491c:	4c 2d       	mov	r20, r12
    491e:	5d 2d       	mov	r21, r13
    4920:	6e 2d       	mov	r22, r14
    4922:	7f 2d       	mov	r23, r15
    4924:	80 2f       	mov	r24, r16
    4926:	91 2f       	mov	r25, r17
    4928:	ae 80       	ldd	r10, Y+6	; 0x06
    492a:	bf 80       	ldd	r11, Y+7	; 0x07
    492c:	c8 84       	ldd	r12, Y+8	; 0x08
    492e:	d9 84       	ldd	r13, Y+9	; 0x09
    4930:	ea 84       	ldd	r14, Y+10	; 0x0a
    4932:	fb 84       	ldd	r15, Y+11	; 0x0b
    4934:	0c 85       	ldd	r16, Y+12	; 0x0c
    4936:	1d 85       	ldd	r17, Y+13	; 0x0d
    4938:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    493c:	22 2e       	mov	r2, r18
    493e:	33 2e       	mov	r3, r19
    4940:	44 2e       	mov	r4, r20
    4942:	55 2e       	mov	r5, r21
    4944:	66 2e       	mov	r6, r22
    4946:	77 2e       	mov	r7, r23
    4948:	88 2e       	mov	r8, r24
    494a:	99 2e       	mov	r9, r25
    494c:	a2 2c       	mov	r10, r2
    494e:	b3 2c       	mov	r11, r3
    4950:	c4 2c       	mov	r12, r4
    4952:	d5 2c       	mov	r13, r5
    4954:	e6 2c       	mov	r14, r6
    4956:	f7 2c       	mov	r15, r7
    4958:	08 2d       	mov	r16, r8
    495a:	19 2d       	mov	r17, r9
    495c:	2a 2d       	mov	r18, r10
    495e:	3b 2d       	mov	r19, r11
    4960:	4c 2d       	mov	r20, r12
    4962:	5d 2d       	mov	r21, r13
    4964:	6e 2d       	mov	r22, r14
    4966:	7f 2d       	mov	r23, r15
    4968:	80 2f       	mov	r24, r16
    496a:	91 2f       	mov	r25, r17
    496c:	aa 24       	eor	r10, r10
    496e:	bb 24       	eor	r11, r11
    4970:	68 94       	set
    4972:	b6 f8       	bld	r11, 6
    4974:	0f 2e       	mov	r0, r31
    4976:	f2 e4       	ldi	r31, 0x42	; 66
    4978:	cf 2e       	mov	r12, r31
    497a:	f0 2d       	mov	r31, r0
    497c:	0f 2e       	mov	r0, r31
    497e:	ff e0       	ldi	r31, 0x0F	; 15
    4980:	df 2e       	mov	r13, r31
    4982:	f0 2d       	mov	r31, r0
    4984:	ee 24       	eor	r14, r14
    4986:	ff 24       	eor	r15, r15
    4988:	00 e0       	ldi	r16, 0x00	; 0
    498a:	10 e0       	ldi	r17, 0x00	; 0
    498c:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    4990:	a2 2e       	mov	r10, r18
    4992:	b3 2e       	mov	r11, r19
    4994:	c4 2e       	mov	r12, r20
    4996:	d5 2e       	mov	r13, r21
    4998:	e6 2e       	mov	r14, r22
    499a:	f7 2e       	mov	r15, r23
    499c:	08 2f       	mov	r16, r24
    499e:	19 2f       	mov	r17, r25
    49a0:	2a 2d       	mov	r18, r10
    49a2:	3b 2d       	mov	r19, r11
    49a4:	4c 2d       	mov	r20, r12
    49a6:	5d 2d       	mov	r21, r13
    49a8:	6e 2d       	mov	r22, r14
    49aa:	7f 2d       	mov	r23, r15
    49ac:	80 2f       	mov	r24, r16
    49ae:	91 2f       	mov	r25, r17
    49b0:	20 93 a1 01 	sts	0x01A1, r18
    49b4:	30 93 a2 01 	sts	0x01A2, r19
    49b8:	40 93 a3 01 	sts	0x01A3, r20
    49bc:	50 93 a4 01 	sts	0x01A4, r21
    49c0:	60 93 a5 01 	sts	0x01A5, r22
    49c4:	70 93 a6 01 	sts	0x01A6, r23
    49c8:	80 93 a7 01 	sts	0x01A7, r24
    49cc:	90 93 a8 01 	sts	0x01A8, r25

   //calculate the time required to setup  the last overflow iteration
   Gu32_T2LastOVTicks=((u64TimerValue*u32TimerFreq)/USEC_TO_SEC)-(Gu32_T2MaxOVCount*T2_TICKS);
    49d0:	89 81       	ldd	r24, Y+1	; 0x01
    49d2:	9a 81       	ldd	r25, Y+2	; 0x02
    49d4:	ab 81       	ldd	r26, Y+3	; 0x03
    49d6:	bc 81       	ldd	r27, Y+4	; 0x04
    49d8:	5c 01       	movw	r10, r24
    49da:	6d 01       	movw	r12, r26
    49dc:	ee 24       	eor	r14, r14
    49de:	ff 24       	eor	r15, r15
    49e0:	87 01       	movw	r16, r14
    49e2:	2a 2d       	mov	r18, r10
    49e4:	3b 2d       	mov	r19, r11
    49e6:	4c 2d       	mov	r20, r12
    49e8:	5d 2d       	mov	r21, r13
    49ea:	6e 2d       	mov	r22, r14
    49ec:	7f 2d       	mov	r23, r15
    49ee:	80 2f       	mov	r24, r16
    49f0:	91 2f       	mov	r25, r17
    49f2:	ae 80       	ldd	r10, Y+6	; 0x06
    49f4:	bf 80       	ldd	r11, Y+7	; 0x07
    49f6:	c8 84       	ldd	r12, Y+8	; 0x08
    49f8:	d9 84       	ldd	r13, Y+9	; 0x09
    49fa:	ea 84       	ldd	r14, Y+10	; 0x0a
    49fc:	fb 84       	ldd	r15, Y+11	; 0x0b
    49fe:	0c 85       	ldd	r16, Y+12	; 0x0c
    4a00:	1d 85       	ldd	r17, Y+13	; 0x0d
    4a02:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    4a06:	22 2e       	mov	r2, r18
    4a08:	33 2e       	mov	r3, r19
    4a0a:	44 2e       	mov	r4, r20
    4a0c:	55 2e       	mov	r5, r21
    4a0e:	66 2e       	mov	r6, r22
    4a10:	77 2e       	mov	r7, r23
    4a12:	88 2e       	mov	r8, r24
    4a14:	99 2e       	mov	r9, r25
    4a16:	a2 2c       	mov	r10, r2
    4a18:	b3 2c       	mov	r11, r3
    4a1a:	c4 2c       	mov	r12, r4
    4a1c:	d5 2c       	mov	r13, r5
    4a1e:	e6 2c       	mov	r14, r6
    4a20:	f7 2c       	mov	r15, r7
    4a22:	08 2d       	mov	r16, r8
    4a24:	19 2d       	mov	r17, r9
    4a26:	2a 2d       	mov	r18, r10
    4a28:	3b 2d       	mov	r19, r11
    4a2a:	4c 2d       	mov	r20, r12
    4a2c:	5d 2d       	mov	r21, r13
    4a2e:	6e 2d       	mov	r22, r14
    4a30:	7f 2d       	mov	r23, r15
    4a32:	80 2f       	mov	r24, r16
    4a34:	91 2f       	mov	r25, r17
    4a36:	aa 24       	eor	r10, r10
    4a38:	68 94       	set
    4a3a:	a6 f8       	bld	r10, 6
    4a3c:	0f 2e       	mov	r0, r31
    4a3e:	f2 e4       	ldi	r31, 0x42	; 66
    4a40:	bf 2e       	mov	r11, r31
    4a42:	f0 2d       	mov	r31, r0
    4a44:	0f 2e       	mov	r0, r31
    4a46:	ff e0       	ldi	r31, 0x0F	; 15
    4a48:	cf 2e       	mov	r12, r31
    4a4a:	f0 2d       	mov	r31, r0
    4a4c:	dd 24       	eor	r13, r13
    4a4e:	ee 24       	eor	r14, r14
    4a50:	ff 24       	eor	r15, r15
    4a52:	00 e0       	ldi	r16, 0x00	; 0
    4a54:	10 e0       	ldi	r17, 0x00	; 0
    4a56:	0e 94 ef 01 	call	0x3de	; 0x3de <__udivdi3>
    4a5a:	a2 2e       	mov	r10, r18
    4a5c:	b3 2e       	mov	r11, r19
    4a5e:	c4 2e       	mov	r12, r20
    4a60:	d5 2e       	mov	r13, r21
    4a62:	e6 2e       	mov	r14, r22
    4a64:	f7 2e       	mov	r15, r23
    4a66:	08 2f       	mov	r16, r24
    4a68:	19 2f       	mov	r17, r25
    4a6a:	2a 2d       	mov	r18, r10
    4a6c:	3b 2d       	mov	r19, r11
    4a6e:	4c 2d       	mov	r20, r12
    4a70:	5d 2d       	mov	r21, r13
    4a72:	6e 2d       	mov	r22, r14
    4a74:	7f 2d       	mov	r23, r15
    4a76:	80 2f       	mov	r24, r16
    4a78:	91 2f       	mov	r25, r17
    4a7a:	92 2e       	mov	r9, r18
    4a7c:	a0 90 a1 01 	lds	r10, 0x01A1
    4a80:	b0 90 a2 01 	lds	r11, 0x01A2
    4a84:	c0 90 a3 01 	lds	r12, 0x01A3
    4a88:	d0 90 a4 01 	lds	r13, 0x01A4
    4a8c:	e0 90 a5 01 	lds	r14, 0x01A5
    4a90:	f0 90 a6 01 	lds	r15, 0x01A6
    4a94:	00 91 a7 01 	lds	r16, 0x01A7
    4a98:	10 91 a8 01 	lds	r17, 0x01A8
    4a9c:	2a 2d       	mov	r18, r10
    4a9e:	3b 2d       	mov	r19, r11
    4aa0:	4c 2d       	mov	r20, r12
    4aa2:	5d 2d       	mov	r21, r13
    4aa4:	6e 2d       	mov	r22, r14
    4aa6:	7f 2d       	mov	r23, r15
    4aa8:	80 2f       	mov	r24, r16
    4aaa:	91 2f       	mov	r25, r17
    4aac:	08 e0       	ldi	r16, 0x08	; 8
    4aae:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    4ab2:	a2 2e       	mov	r10, r18
    4ab4:	b3 2e       	mov	r11, r19
    4ab6:	c4 2e       	mov	r12, r20
    4ab8:	d5 2e       	mov	r13, r21
    4aba:	e6 2e       	mov	r14, r22
    4abc:	f7 2e       	mov	r15, r23
    4abe:	08 2f       	mov	r16, r24
    4ac0:	19 2f       	mov	r17, r25
    4ac2:	2a 2d       	mov	r18, r10
    4ac4:	3b 2d       	mov	r19, r11
    4ac6:	4c 2d       	mov	r20, r12
    4ac8:	5d 2d       	mov	r21, r13
    4aca:	6e 2d       	mov	r22, r14
    4acc:	7f 2d       	mov	r23, r15
    4ace:	80 2f       	mov	r24, r16
    4ad0:	91 2f       	mov	r25, r17
    4ad2:	82 2f       	mov	r24, r18
    4ad4:	99 2d       	mov	r25, r9
    4ad6:	98 1b       	sub	r25, r24
    4ad8:	89 2f       	mov	r24, r25
    4ada:	80 93 b1 01 	sts	0x01B1, r24


   //if the time can be achieved without overflows
   if (Gu32_T2MaxOVCount==0)
    4ade:	20 91 a1 01 	lds	r18, 0x01A1
    4ae2:	30 91 a2 01 	lds	r19, 0x01A2
    4ae6:	40 91 a3 01 	lds	r20, 0x01A3
    4aea:	50 91 a4 01 	lds	r21, 0x01A4
    4aee:	60 91 a5 01 	lds	r22, 0x01A5
    4af2:	70 91 a6 01 	lds	r23, 0x01A6
    4af6:	80 91 a7 01 	lds	r24, 0x01A7
    4afa:	90 91 a8 01 	lds	r25, 0x01A8
    4afe:	e2 2f       	mov	r30, r18
    4b00:	e3 2b       	or	r30, r19
    4b02:	e4 2b       	or	r30, r20
    4b04:	e5 2b       	or	r30, r21
    4b06:	e6 2b       	or	r30, r22
    4b08:	e7 2b       	or	r30, r23
    4b0a:	e8 2b       	or	r30, r24
    4b0c:	e9 2b       	or	r30, r25
    4b0e:	ee 23       	and	r30, r30
    4b10:	39 f4       	brne	.+14     	; 0x4b20 <T2_Start+0x4fc>
   {
      //set the timer value to overflow on the exact timing
      TCNT2_R= (T2_TICKS-Gu32_T2LastOVTicks);
    4b12:	e4 e4       	ldi	r30, 0x44	; 68
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	80 91 b1 01 	lds	r24, 0x01B1
    4b1a:	81 95       	neg	r24
    4b1c:	80 83       	st	Z, r24
    4b1e:	03 c0       	rjmp	.+6      	; 0x4b26 <T2_Start+0x502>
   }
   else
   {
      //else, set the overflow to 0
      TCNT2_R=0;
    4b20:	e4 e4       	ldi	r30, 0x44	; 68
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	10 82       	st	Z, r1
   }

   //return E_OK state
   return E_OK;
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	88 8b       	std	Y+16, r24	; 0x10
    4b2a:	88 89       	ldd	r24, Y+16	; 0x10
}
    4b2c:	60 96       	adiw	r28, 0x10	; 16
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	f8 94       	cli
    4b32:	de bf       	out	0x3e, r29	; 62
    4b34:	0f be       	out	0x3f, r0	; 63
    4b36:	cd bf       	out	0x3d, r28	; 61
    4b38:	cf 91       	pop	r28
    4b3a:	df 91       	pop	r29
    4b3c:	1f 91       	pop	r17
    4b3e:	0f 91       	pop	r16
    4b40:	ff 90       	pop	r15
    4b42:	ef 90       	pop	r14
    4b44:	df 90       	pop	r13
    4b46:	cf 90       	pop	r12
    4b48:	bf 90       	pop	r11
    4b4a:	af 90       	pop	r10
    4b4c:	9f 90       	pop	r9
    4b4e:	8f 90       	pop	r8
    4b50:	7f 90       	pop	r7
    4b52:	6f 90       	pop	r6
    4b54:	5f 90       	pop	r5
    4b56:	4f 90       	pop	r4
    4b58:	3f 90       	pop	r3
    4b5a:	2f 90       	pop	r2
    4b5c:	08 95       	ret

00004b5e <T2_Stop>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to stop the timer if running
************************************************************************************/
enuErrorStatus_t T2_Stop(void)
{
    4b5e:	df 93       	push	r29
    4b60:	cf 93       	push	r28
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
   //turn off all timer interrupts
   T2_OV_InterruptDisable();
    4b66:	0e 94 e5 22 	call	0x45ca	; 0x45ca <T2_OV_InterruptDisable>
   T2_OC_InterruptDisable();
    4b6a:	0e 94 03 23 	call	0x4606	; 0x4606 <T2_OC_InterruptDisable>
   //initialize the timer with no clock to stop it
   T2_Init(TIMER2_NORMAL_MODE,TIMER2_STOP);
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	0e 94 94 21 	call	0x4328	; 0x4328 <T2_Init>
   //clear the timer overflow flag
   SET_BIT(TIFR_R,TOV2_B);
    4b76:	a8 e5       	ldi	r26, 0x58	; 88
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	e8 e5       	ldi	r30, 0x58	; 88
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	80 81       	ld	r24, Z
    4b80:	80 64       	ori	r24, 0x40	; 64
    4b82:	8c 93       	st	X, r24

   //reset all global variables
   Gu32_T2MaxOVCount=0;
    4b84:	10 92 a1 01 	sts	0x01A1, r1
    4b88:	10 92 a2 01 	sts	0x01A2, r1
    4b8c:	10 92 a3 01 	sts	0x01A3, r1
    4b90:	10 92 a4 01 	sts	0x01A4, r1
    4b94:	10 92 a5 01 	sts	0x01A5, r1
    4b98:	10 92 a6 01 	sts	0x01A6, r1
    4b9c:	10 92 a7 01 	sts	0x01A7, r1
    4ba0:	10 92 a8 01 	sts	0x01A8, r1
   Gu32_T2LastOVTicks=0;
    4ba4:	10 92 b1 01 	sts	0x01B1, r1
   Gu32_T2CurrentOVCount=0;
    4ba8:	10 92 a9 01 	sts	0x01A9, r1
    4bac:	10 92 aa 01 	sts	0x01AA, r1
    4bb0:	10 92 ab 01 	sts	0x01AB, r1
    4bb4:	10 92 ac 01 	sts	0x01AC, r1
    4bb8:	10 92 ad 01 	sts	0x01AD, r1
    4bbc:	10 92 ae 01 	sts	0x01AE, r1
    4bc0:	10 92 af 01 	sts	0x01AF, r1
    4bc4:	10 92 b0 01 	sts	0x01B0, r1

   //return E_OK state
   return E_OK;
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
}
    4bca:	cf 91       	pop	r28
    4bcc:	df 91       	pop	r29
    4bce:	08 95       	ret

00004bd0 <T2_GetStatus>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=time's up or 0=timer is still running
* Description: A function to check if a previously set up timer is still running or not
************************************************************************************/
enuErrorStatus_t T2_GetStatus(void)
{
    4bd0:	df 93       	push	r29
    4bd2:	cf 93       	push	r28
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	c7 57       	subi	r28, 0x77	; 119
    4bda:	d0 40       	sbci	r29, 0x00	; 0
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
      //if the current overflow value is less than the total overflows value
      if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    4be6:	80 91 a9 01 	lds	r24, 0x01A9
    4bea:	8a a7       	std	Y+42, r24	; 0x2a
    4bec:	90 91 aa 01 	lds	r25, 0x01AA
    4bf0:	9b a7       	std	Y+43, r25	; 0x2b
    4bf2:	80 91 ab 01 	lds	r24, 0x01AB
    4bf6:	8c a7       	std	Y+44, r24	; 0x2c
    4bf8:	90 91 ac 01 	lds	r25, 0x01AC
    4bfc:	9d a7       	std	Y+45, r25	; 0x2d
    4bfe:	80 91 ad 01 	lds	r24, 0x01AD
    4c02:	8e a7       	std	Y+46, r24	; 0x2e
    4c04:	90 91 ae 01 	lds	r25, 0x01AE
    4c08:	9f a7       	std	Y+47, r25	; 0x2f
    4c0a:	80 91 af 01 	lds	r24, 0x01AF
    4c0e:	88 ab       	std	Y+48, r24	; 0x30
    4c10:	90 91 b0 01 	lds	r25, 0x01B0
    4c14:	99 ab       	std	Y+49, r25	; 0x31
    4c16:	80 91 a1 01 	lds	r24, 0x01A1
    4c1a:	8a a3       	std	Y+34, r24	; 0x22
    4c1c:	90 91 a2 01 	lds	r25, 0x01A2
    4c20:	9b a3       	std	Y+35, r25	; 0x23
    4c22:	80 91 a3 01 	lds	r24, 0x01A3
    4c26:	8c a3       	std	Y+36, r24	; 0x24
    4c28:	90 91 a4 01 	lds	r25, 0x01A4
    4c2c:	9d a3       	std	Y+37, r25	; 0x25
    4c2e:	80 91 a5 01 	lds	r24, 0x01A5
    4c32:	8e a3       	std	Y+38, r24	; 0x26
    4c34:	90 91 a6 01 	lds	r25, 0x01A6
    4c38:	9f a3       	std	Y+39, r25	; 0x27
    4c3a:	80 91 a7 01 	lds	r24, 0x01A7
    4c3e:	88 a7       	std	Y+40, r24	; 0x28
    4c40:	90 91 a8 01 	lds	r25, 0x01A8
    4c44:	99 a7       	std	Y+41, r25	; 0x29
    4c46:	89 a5       	ldd	r24, Y+41	; 0x29
    4c48:	99 a9       	ldd	r25, Y+49	; 0x31
    4c4a:	98 17       	cp	r25, r24
    4c4c:	08 f4       	brcc	.+2      	; 0x4c50 <T2_GetStatus+0x80>
    4c4e:	40 c0       	rjmp	.+128    	; 0x4cd0 <T2_GetStatus+0x100>
    4c50:	89 a5       	ldd	r24, Y+41	; 0x29
    4c52:	99 a9       	ldd	r25, Y+49	; 0x31
    4c54:	89 17       	cp	r24, r25
    4c56:	09 f0       	breq	.+2      	; 0x4c5a <T2_GetStatus+0x8a>
    4c58:	e7 c1       	rjmp	.+974    	; 0x5028 <T2_GetStatus+0x458>
    4c5a:	88 a5       	ldd	r24, Y+40	; 0x28
    4c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    4c5e:	98 17       	cp	r25, r24
    4c60:	b8 f1       	brcs	.+110    	; 0x4cd0 <T2_GetStatus+0x100>
    4c62:	88 a5       	ldd	r24, Y+40	; 0x28
    4c64:	98 a9       	ldd	r25, Y+48	; 0x30
    4c66:	89 17       	cp	r24, r25
    4c68:	09 f0       	breq	.+2      	; 0x4c6c <T2_GetStatus+0x9c>
    4c6a:	de c1       	rjmp	.+956    	; 0x5028 <T2_GetStatus+0x458>
    4c6c:	8f a1       	ldd	r24, Y+39	; 0x27
    4c6e:	9f a5       	ldd	r25, Y+47	; 0x2f
    4c70:	98 17       	cp	r25, r24
    4c72:	70 f1       	brcs	.+92     	; 0x4cd0 <T2_GetStatus+0x100>
    4c74:	8f a1       	ldd	r24, Y+39	; 0x27
    4c76:	9f a5       	ldd	r25, Y+47	; 0x2f
    4c78:	89 17       	cp	r24, r25
    4c7a:	09 f0       	breq	.+2      	; 0x4c7e <T2_GetStatus+0xae>
    4c7c:	d5 c1       	rjmp	.+938    	; 0x5028 <T2_GetStatus+0x458>
    4c7e:	8e a1       	ldd	r24, Y+38	; 0x26
    4c80:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c82:	98 17       	cp	r25, r24
    4c84:	28 f1       	brcs	.+74     	; 0x4cd0 <T2_GetStatus+0x100>
    4c86:	8e a1       	ldd	r24, Y+38	; 0x26
    4c88:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c8a:	89 17       	cp	r24, r25
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <T2_GetStatus+0xc0>
    4c8e:	cc c1       	rjmp	.+920    	; 0x5028 <T2_GetStatus+0x458>
    4c90:	8d a1       	ldd	r24, Y+37	; 0x25
    4c92:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c94:	98 17       	cp	r25, r24
    4c96:	e0 f0       	brcs	.+56     	; 0x4cd0 <T2_GetStatus+0x100>
    4c98:	8d a1       	ldd	r24, Y+37	; 0x25
    4c9a:	9d a5       	ldd	r25, Y+45	; 0x2d
    4c9c:	89 17       	cp	r24, r25
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <T2_GetStatus+0xd2>
    4ca0:	c3 c1       	rjmp	.+902    	; 0x5028 <T2_GetStatus+0x458>
    4ca2:	8c a1       	ldd	r24, Y+36	; 0x24
    4ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ca6:	98 17       	cp	r25, r24
    4ca8:	98 f0       	brcs	.+38     	; 0x4cd0 <T2_GetStatus+0x100>
    4caa:	8c a1       	ldd	r24, Y+36	; 0x24
    4cac:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cae:	89 17       	cp	r24, r25
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <T2_GetStatus+0xe4>
    4cb2:	ba c1       	rjmp	.+884    	; 0x5028 <T2_GetStatus+0x458>
    4cb4:	8b a1       	ldd	r24, Y+35	; 0x23
    4cb6:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cb8:	98 17       	cp	r25, r24
    4cba:	50 f0       	brcs	.+20     	; 0x4cd0 <T2_GetStatus+0x100>
    4cbc:	8b a1       	ldd	r24, Y+35	; 0x23
    4cbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    4cc0:	89 17       	cp	r24, r25
    4cc2:	09 f0       	breq	.+2      	; 0x4cc6 <T2_GetStatus+0xf6>
    4cc4:	b1 c1       	rjmp	.+866    	; 0x5028 <T2_GetStatus+0x458>
    4cc6:	8a a1       	ldd	r24, Y+34	; 0x22
    4cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cca:	98 17       	cp	r25, r24
    4ccc:	08 f0       	brcs	.+2      	; 0x4cd0 <T2_GetStatus+0x100>
    4cce:	ac c1       	rjmp	.+856    	; 0x5028 <T2_GetStatus+0x458>
      {
         //check the over flow flag
         if (GET_BIT(TIFR_R,TOV2_B))
    4cd0:	e8 e5       	ldi	r30, 0x58	; 88
    4cd2:	f0 e0       	ldi	r31, 0x00	; 0
    4cd4:	80 81       	ld	r24, Z
    4cd6:	88 2f       	mov	r24, r24
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	80 74       	andi	r24, 0x40	; 64
    4cdc:	90 70       	andi	r25, 0x00	; 0
    4cde:	08 2e       	mov	r0, r24
    4ce0:	89 2f       	mov	r24, r25
    4ce2:	00 0c       	add	r0, r0
    4ce4:	88 1f       	adc	r24, r24
    4ce6:	99 0b       	sbc	r25, r25
    4ce8:	00 0c       	add	r0, r0
    4cea:	88 1f       	adc	r24, r24
    4cec:	99 1f       	adc	r25, r25
    4cee:	00 97       	sbiw	r24, 0x00	; 0
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <T2_GetStatus+0x124>
    4cf2:	04 c4       	rjmp	.+2056   	; 0x54fc <T2_GetStatus+0x92c>
         {
            //if set, clear it
            SET_BIT(TIFR_R,TOV2_B);
    4cf4:	a8 e5       	ldi	r26, 0x58	; 88
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	e8 e5       	ldi	r30, 0x58	; 88
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	80 81       	ld	r24, Z
    4cfe:	80 64       	ori	r24, 0x40	; 64
    4d00:	8c 93       	st	X, r24
            //and increase the overflow counter
            Gu32_T2CurrentOVCount++;
    4d02:	80 91 a9 01 	lds	r24, 0x01A9
    4d06:	8a 8f       	std	Y+26, r24	; 0x1a
    4d08:	90 91 aa 01 	lds	r25, 0x01AA
    4d0c:	9b 8f       	std	Y+27, r25	; 0x1b
    4d0e:	80 91 ab 01 	lds	r24, 0x01AB
    4d12:	8c 8f       	std	Y+28, r24	; 0x1c
    4d14:	90 91 ac 01 	lds	r25, 0x01AC
    4d18:	9d 8f       	std	Y+29, r25	; 0x1d
    4d1a:	80 91 ad 01 	lds	r24, 0x01AD
    4d1e:	8e 8f       	std	Y+30, r24	; 0x1e
    4d20:	90 91 ae 01 	lds	r25, 0x01AE
    4d24:	9f 8f       	std	Y+31, r25	; 0x1f
    4d26:	80 91 af 01 	lds	r24, 0x01AF
    4d2a:	88 a3       	std	Y+32, r24	; 0x20
    4d2c:	90 91 b0 01 	lds	r25, 0x01B0
    4d30:	99 a3       	std	Y+33, r25	; 0x21
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	8a ab       	std	Y+50, r24	; 0x32
    4d36:	1b aa       	std	Y+51, r1	; 0x33
    4d38:	1c aa       	std	Y+52, r1	; 0x34
    4d3a:	1d aa       	std	Y+53, r1	; 0x35
    4d3c:	1e aa       	std	Y+54, r1	; 0x36
    4d3e:	1f aa       	std	Y+55, r1	; 0x37
    4d40:	18 ae       	std	Y+56, r1	; 0x38
    4d42:	19 ae       	std	Y+57, r1	; 0x39
    4d44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d46:	8a a9       	ldd	r24, Y+50	; 0x32
    4d48:	98 0f       	add	r25, r24
    4d4a:	9a af       	std	Y+58, r25	; 0x3a
    4d4c:	91 e0       	ldi	r25, 0x01	; 1
    4d4e:	23 96       	adiw	r28, 0x03	; 3
    4d50:	9f af       	std	Y+63, r25	; 0x3f
    4d52:	23 97       	sbiw	r28, 0x03	; 3
    4d54:	8a ad       	ldd	r24, Y+58	; 0x3a
    4d56:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d58:	89 17       	cp	r24, r25
    4d5a:	18 f0       	brcs	.+6      	; 0x4d62 <T2_GetStatus+0x192>
    4d5c:	23 96       	adiw	r28, 0x03	; 3
    4d5e:	1f ae       	std	Y+63, r1	; 0x3f
    4d60:	23 97       	sbiw	r28, 0x03	; 3
    4d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d64:	9b a9       	ldd	r25, Y+51	; 0x33
    4d66:	89 0f       	add	r24, r25
    4d68:	8b af       	std	Y+59, r24	; 0x3b
    4d6a:	81 e0       	ldi	r24, 0x01	; 1
    4d6c:	24 96       	adiw	r28, 0x04	; 4
    4d6e:	8f af       	std	Y+63, r24	; 0x3f
    4d70:	24 97       	sbiw	r28, 0x04	; 4
    4d72:	9b ad       	ldd	r25, Y+59	; 0x3b
    4d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d76:	98 17       	cp	r25, r24
    4d78:	18 f0       	brcs	.+6      	; 0x4d80 <T2_GetStatus+0x1b0>
    4d7a:	24 96       	adiw	r28, 0x04	; 4
    4d7c:	1f ae       	std	Y+63, r1	; 0x3f
    4d7e:	24 97       	sbiw	r28, 0x04	; 4
    4d80:	23 96       	adiw	r28, 0x03	; 3
    4d82:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d84:	23 97       	sbiw	r28, 0x03	; 3
    4d86:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d88:	98 0f       	add	r25, r24
    4d8a:	25 96       	adiw	r28, 0x05	; 5
    4d8c:	9f af       	std	Y+63, r25	; 0x3f
    4d8e:	25 97       	sbiw	r28, 0x05	; 5
    4d90:	91 e0       	ldi	r25, 0x01	; 1
    4d92:	26 96       	adiw	r28, 0x06	; 6
    4d94:	9f af       	std	Y+63, r25	; 0x3f
    4d96:	26 97       	sbiw	r28, 0x06	; 6
    4d98:	25 96       	adiw	r28, 0x05	; 5
    4d9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4d9c:	25 97       	sbiw	r28, 0x05	; 5
    4d9e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4da0:	89 17       	cp	r24, r25
    4da2:	18 f0       	brcs	.+6      	; 0x4daa <T2_GetStatus+0x1da>
    4da4:	26 96       	adiw	r28, 0x06	; 6
    4da6:	1f ae       	std	Y+63, r1	; 0x3f
    4da8:	26 97       	sbiw	r28, 0x06	; 6
    4daa:	24 96       	adiw	r28, 0x04	; 4
    4dac:	8f ad       	ldd	r24, Y+63	; 0x3f
    4dae:	24 97       	sbiw	r28, 0x04	; 4
    4db0:	26 96       	adiw	r28, 0x06	; 6
    4db2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4db4:	26 97       	sbiw	r28, 0x06	; 6
    4db6:	89 2b       	or	r24, r25
    4db8:	24 96       	adiw	r28, 0x04	; 4
    4dba:	8f af       	std	Y+63, r24	; 0x3f
    4dbc:	24 97       	sbiw	r28, 0x04	; 4
    4dbe:	25 96       	adiw	r28, 0x05	; 5
    4dc0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4dc2:	25 97       	sbiw	r28, 0x05	; 5
    4dc4:	8b af       	std	Y+59, r24	; 0x3b
    4dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dc8:	8c a9       	ldd	r24, Y+52	; 0x34
    4dca:	98 0f       	add	r25, r24
    4dcc:	9c af       	std	Y+60, r25	; 0x3c
    4dce:	91 e0       	ldi	r25, 0x01	; 1
    4dd0:	27 96       	adiw	r28, 0x07	; 7
    4dd2:	9f af       	std	Y+63, r25	; 0x3f
    4dd4:	27 97       	sbiw	r28, 0x07	; 7
    4dd6:	8c ad       	ldd	r24, Y+60	; 0x3c
    4dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dda:	89 17       	cp	r24, r25
    4ddc:	18 f0       	brcs	.+6      	; 0x4de4 <T2_GetStatus+0x214>
    4dde:	27 96       	adiw	r28, 0x07	; 7
    4de0:	1f ae       	std	Y+63, r1	; 0x3f
    4de2:	27 97       	sbiw	r28, 0x07	; 7
    4de4:	24 96       	adiw	r28, 0x04	; 4
    4de6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4de8:	24 97       	sbiw	r28, 0x04	; 4
    4dea:	9c ad       	ldd	r25, Y+60	; 0x3c
    4dec:	89 0f       	add	r24, r25
    4dee:	28 96       	adiw	r28, 0x08	; 8
    4df0:	8f af       	std	Y+63, r24	; 0x3f
    4df2:	28 97       	sbiw	r28, 0x08	; 8
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	29 96       	adiw	r28, 0x09	; 9
    4df8:	8f af       	std	Y+63, r24	; 0x3f
    4dfa:	29 97       	sbiw	r28, 0x09	; 9
    4dfc:	28 96       	adiw	r28, 0x08	; 8
    4dfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e00:	28 97       	sbiw	r28, 0x08	; 8
    4e02:	8c ad       	ldd	r24, Y+60	; 0x3c
    4e04:	98 17       	cp	r25, r24
    4e06:	18 f0       	brcs	.+6      	; 0x4e0e <T2_GetStatus+0x23e>
    4e08:	29 96       	adiw	r28, 0x09	; 9
    4e0a:	1f ae       	std	Y+63, r1	; 0x3f
    4e0c:	29 97       	sbiw	r28, 0x09	; 9
    4e0e:	27 96       	adiw	r28, 0x07	; 7
    4e10:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e12:	27 97       	sbiw	r28, 0x07	; 7
    4e14:	29 96       	adiw	r28, 0x09	; 9
    4e16:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e18:	29 97       	sbiw	r28, 0x09	; 9
    4e1a:	98 2b       	or	r25, r24
    4e1c:	27 96       	adiw	r28, 0x07	; 7
    4e1e:	9f af       	std	Y+63, r25	; 0x3f
    4e20:	27 97       	sbiw	r28, 0x07	; 7
    4e22:	28 96       	adiw	r28, 0x08	; 8
    4e24:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e26:	28 97       	sbiw	r28, 0x08	; 8
    4e28:	9c af       	std	Y+60, r25	; 0x3c
    4e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e2c:	9d a9       	ldd	r25, Y+53	; 0x35
    4e2e:	89 0f       	add	r24, r25
    4e30:	8d af       	std	Y+61, r24	; 0x3d
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	2a 96       	adiw	r28, 0x0a	; 10
    4e36:	8f af       	std	Y+63, r24	; 0x3f
    4e38:	2a 97       	sbiw	r28, 0x0a	; 10
    4e3a:	9d ad       	ldd	r25, Y+61	; 0x3d
    4e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e3e:	98 17       	cp	r25, r24
    4e40:	18 f0       	brcs	.+6      	; 0x4e48 <T2_GetStatus+0x278>
    4e42:	2a 96       	adiw	r28, 0x0a	; 10
    4e44:	1f ae       	std	Y+63, r1	; 0x3f
    4e46:	2a 97       	sbiw	r28, 0x0a	; 10
    4e48:	27 96       	adiw	r28, 0x07	; 7
    4e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e4c:	27 97       	sbiw	r28, 0x07	; 7
    4e4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4e50:	98 0f       	add	r25, r24
    4e52:	2b 96       	adiw	r28, 0x0b	; 11
    4e54:	9f af       	std	Y+63, r25	; 0x3f
    4e56:	2b 97       	sbiw	r28, 0x0b	; 11
    4e58:	91 e0       	ldi	r25, 0x01	; 1
    4e5a:	2c 96       	adiw	r28, 0x0c	; 12
    4e5c:	9f af       	std	Y+63, r25	; 0x3f
    4e5e:	2c 97       	sbiw	r28, 0x0c	; 12
    4e60:	2b 96       	adiw	r28, 0x0b	; 11
    4e62:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e64:	2b 97       	sbiw	r28, 0x0b	; 11
    4e66:	9d ad       	ldd	r25, Y+61	; 0x3d
    4e68:	89 17       	cp	r24, r25
    4e6a:	18 f0       	brcs	.+6      	; 0x4e72 <T2_GetStatus+0x2a2>
    4e6c:	2c 96       	adiw	r28, 0x0c	; 12
    4e6e:	1f ae       	std	Y+63, r1	; 0x3f
    4e70:	2c 97       	sbiw	r28, 0x0c	; 12
    4e72:	2a 96       	adiw	r28, 0x0a	; 10
    4e74:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e76:	2a 97       	sbiw	r28, 0x0a	; 10
    4e78:	2c 96       	adiw	r28, 0x0c	; 12
    4e7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4e7c:	2c 97       	sbiw	r28, 0x0c	; 12
    4e7e:	89 2b       	or	r24, r25
    4e80:	2a 96       	adiw	r28, 0x0a	; 10
    4e82:	8f af       	std	Y+63, r24	; 0x3f
    4e84:	2a 97       	sbiw	r28, 0x0a	; 10
    4e86:	2b 96       	adiw	r28, 0x0b	; 11
    4e88:	8f ad       	ldd	r24, Y+63	; 0x3f
    4e8a:	2b 97       	sbiw	r28, 0x0b	; 11
    4e8c:	8d af       	std	Y+61, r24	; 0x3d
    4e8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e90:	8e a9       	ldd	r24, Y+54	; 0x36
    4e92:	98 0f       	add	r25, r24
    4e94:	9e af       	std	Y+62, r25	; 0x3e
    4e96:	91 e0       	ldi	r25, 0x01	; 1
    4e98:	2d 96       	adiw	r28, 0x0d	; 13
    4e9a:	9f af       	std	Y+63, r25	; 0x3f
    4e9c:	2d 97       	sbiw	r28, 0x0d	; 13
    4e9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ea0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ea2:	89 17       	cp	r24, r25
    4ea4:	18 f0       	brcs	.+6      	; 0x4eac <T2_GetStatus+0x2dc>
    4ea6:	2d 96       	adiw	r28, 0x0d	; 13
    4ea8:	1f ae       	std	Y+63, r1	; 0x3f
    4eaa:	2d 97       	sbiw	r28, 0x0d	; 13
    4eac:	2a 96       	adiw	r28, 0x0a	; 10
    4eae:	8f ad       	ldd	r24, Y+63	; 0x3f
    4eb0:	2a 97       	sbiw	r28, 0x0a	; 10
    4eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4eb4:	89 0f       	add	r24, r25
    4eb6:	2e 96       	adiw	r28, 0x0e	; 14
    4eb8:	8f af       	std	Y+63, r24	; 0x3f
    4eba:	2e 97       	sbiw	r28, 0x0e	; 14
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	2f 96       	adiw	r28, 0x0f	; 15
    4ec0:	8f af       	std	Y+63, r24	; 0x3f
    4ec2:	2f 97       	sbiw	r28, 0x0f	; 15
    4ec4:	2e 96       	adiw	r28, 0x0e	; 14
    4ec6:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ec8:	2e 97       	sbiw	r28, 0x0e	; 14
    4eca:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ecc:	98 17       	cp	r25, r24
    4ece:	18 f0       	brcs	.+6      	; 0x4ed6 <T2_GetStatus+0x306>
    4ed0:	2f 96       	adiw	r28, 0x0f	; 15
    4ed2:	1f ae       	std	Y+63, r1	; 0x3f
    4ed4:	2f 97       	sbiw	r28, 0x0f	; 15
    4ed6:	2d 96       	adiw	r28, 0x0d	; 13
    4ed8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eda:	2d 97       	sbiw	r28, 0x0d	; 13
    4edc:	2f 96       	adiw	r28, 0x0f	; 15
    4ede:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ee0:	2f 97       	sbiw	r28, 0x0f	; 15
    4ee2:	98 2b       	or	r25, r24
    4ee4:	2d 96       	adiw	r28, 0x0d	; 13
    4ee6:	9f af       	std	Y+63, r25	; 0x3f
    4ee8:	2d 97       	sbiw	r28, 0x0d	; 13
    4eea:	2e 96       	adiw	r28, 0x0e	; 14
    4eec:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eee:	2e 97       	sbiw	r28, 0x0e	; 14
    4ef0:	9e af       	std	Y+62, r25	; 0x3e
    4ef2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ef4:	9f a9       	ldd	r25, Y+55	; 0x37
    4ef6:	89 0f       	add	r24, r25
    4ef8:	8f af       	std	Y+63, r24	; 0x3f
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	60 96       	adiw	r28, 0x10	; 16
    4efe:	8f af       	std	Y+63, r24	; 0x3f
    4f00:	60 97       	sbiw	r28, 0x10	; 16
    4f02:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f06:	98 17       	cp	r25, r24
    4f08:	18 f0       	brcs	.+6      	; 0x4f10 <T2_GetStatus+0x340>
    4f0a:	60 96       	adiw	r28, 0x10	; 16
    4f0c:	1f ae       	std	Y+63, r1	; 0x3f
    4f0e:	60 97       	sbiw	r28, 0x10	; 16
    4f10:	2d 96       	adiw	r28, 0x0d	; 13
    4f12:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f14:	2d 97       	sbiw	r28, 0x0d	; 13
    4f16:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f18:	98 0f       	add	r25, r24
    4f1a:	61 96       	adiw	r28, 0x11	; 17
    4f1c:	9f af       	std	Y+63, r25	; 0x3f
    4f1e:	61 97       	sbiw	r28, 0x11	; 17
    4f20:	91 e0       	ldi	r25, 0x01	; 1
    4f22:	62 96       	adiw	r28, 0x12	; 18
    4f24:	9f af       	std	Y+63, r25	; 0x3f
    4f26:	62 97       	sbiw	r28, 0x12	; 18
    4f28:	61 96       	adiw	r28, 0x11	; 17
    4f2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f2c:	61 97       	sbiw	r28, 0x11	; 17
    4f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f30:	89 17       	cp	r24, r25
    4f32:	18 f0       	brcs	.+6      	; 0x4f3a <T2_GetStatus+0x36a>
    4f34:	62 96       	adiw	r28, 0x12	; 18
    4f36:	1f ae       	std	Y+63, r1	; 0x3f
    4f38:	62 97       	sbiw	r28, 0x12	; 18
    4f3a:	60 96       	adiw	r28, 0x10	; 16
    4f3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f3e:	60 97       	sbiw	r28, 0x10	; 16
    4f40:	62 96       	adiw	r28, 0x12	; 18
    4f42:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f44:	62 97       	sbiw	r28, 0x12	; 18
    4f46:	89 2b       	or	r24, r25
    4f48:	60 96       	adiw	r28, 0x10	; 16
    4f4a:	8f af       	std	Y+63, r24	; 0x3f
    4f4c:	60 97       	sbiw	r28, 0x10	; 16
    4f4e:	61 96       	adiw	r28, 0x11	; 17
    4f50:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f52:	61 97       	sbiw	r28, 0x11	; 17
    4f54:	8f af       	std	Y+63, r24	; 0x3f
    4f56:	98 a1       	ldd	r25, Y+32	; 0x20
    4f58:	88 ad       	ldd	r24, Y+56	; 0x38
    4f5a:	98 0f       	add	r25, r24
    4f5c:	21 96       	adiw	r28, 0x01	; 1
    4f5e:	9f af       	std	Y+63, r25	; 0x3f
    4f60:	21 97       	sbiw	r28, 0x01	; 1
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	63 96       	adiw	r28, 0x13	; 19
    4f66:	9f af       	std	Y+63, r25	; 0x3f
    4f68:	63 97       	sbiw	r28, 0x13	; 19
    4f6a:	21 96       	adiw	r28, 0x01	; 1
    4f6c:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f6e:	21 97       	sbiw	r28, 0x01	; 1
    4f70:	98 a1       	ldd	r25, Y+32	; 0x20
    4f72:	89 17       	cp	r24, r25
    4f74:	18 f0       	brcs	.+6      	; 0x4f7c <T2_GetStatus+0x3ac>
    4f76:	63 96       	adiw	r28, 0x13	; 19
    4f78:	1f ae       	std	Y+63, r1	; 0x3f
    4f7a:	63 97       	sbiw	r28, 0x13	; 19
    4f7c:	60 96       	adiw	r28, 0x10	; 16
    4f7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4f80:	60 97       	sbiw	r28, 0x10	; 16
    4f82:	21 96       	adiw	r28, 0x01	; 1
    4f84:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f86:	21 97       	sbiw	r28, 0x01	; 1
    4f88:	89 0f       	add	r24, r25
    4f8a:	64 96       	adiw	r28, 0x14	; 20
    4f8c:	8f af       	std	Y+63, r24	; 0x3f
    4f8e:	64 97       	sbiw	r28, 0x14	; 20
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	65 96       	adiw	r28, 0x15	; 21
    4f94:	8f af       	std	Y+63, r24	; 0x3f
    4f96:	65 97       	sbiw	r28, 0x15	; 21
    4f98:	64 96       	adiw	r28, 0x14	; 20
    4f9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f9c:	64 97       	sbiw	r28, 0x14	; 20
    4f9e:	21 96       	adiw	r28, 0x01	; 1
    4fa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    4fa2:	21 97       	sbiw	r28, 0x01	; 1
    4fa4:	98 17       	cp	r25, r24
    4fa6:	18 f0       	brcs	.+6      	; 0x4fae <T2_GetStatus+0x3de>
    4fa8:	65 96       	adiw	r28, 0x15	; 21
    4faa:	1f ae       	std	Y+63, r1	; 0x3f
    4fac:	65 97       	sbiw	r28, 0x15	; 21
    4fae:	63 96       	adiw	r28, 0x13	; 19
    4fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fb2:	63 97       	sbiw	r28, 0x13	; 19
    4fb4:	65 96       	adiw	r28, 0x15	; 21
    4fb6:	8f ad       	ldd	r24, Y+63	; 0x3f
    4fb8:	65 97       	sbiw	r28, 0x15	; 21
    4fba:	98 2b       	or	r25, r24
    4fbc:	63 96       	adiw	r28, 0x13	; 19
    4fbe:	9f af       	std	Y+63, r25	; 0x3f
    4fc0:	63 97       	sbiw	r28, 0x13	; 19
    4fc2:	64 96       	adiw	r28, 0x14	; 20
    4fc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fc6:	64 97       	sbiw	r28, 0x14	; 20
    4fc8:	21 96       	adiw	r28, 0x01	; 1
    4fca:	9f af       	std	Y+63, r25	; 0x3f
    4fcc:	21 97       	sbiw	r28, 0x01	; 1
    4fce:	89 a1       	ldd	r24, Y+33	; 0x21
    4fd0:	99 ad       	ldd	r25, Y+57	; 0x39
    4fd2:	89 0f       	add	r24, r25
    4fd4:	22 96       	adiw	r28, 0x02	; 2
    4fd6:	8f af       	std	Y+63, r24	; 0x3f
    4fd8:	22 97       	sbiw	r28, 0x02	; 2
    4fda:	63 96       	adiw	r28, 0x13	; 19
    4fdc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4fde:	63 97       	sbiw	r28, 0x13	; 19
    4fe0:	22 96       	adiw	r28, 0x02	; 2
    4fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fe4:	22 97       	sbiw	r28, 0x02	; 2
    4fe6:	89 0f       	add	r24, r25
    4fe8:	22 96       	adiw	r28, 0x02	; 2
    4fea:	8f af       	std	Y+63, r24	; 0x3f
    4fec:	22 97       	sbiw	r28, 0x02	; 2
    4fee:	2a ad       	ldd	r18, Y+58	; 0x3a
    4ff0:	3b ad       	ldd	r19, Y+59	; 0x3b
    4ff2:	4c ad       	ldd	r20, Y+60	; 0x3c
    4ff4:	5d ad       	ldd	r21, Y+61	; 0x3d
    4ff6:	6e ad       	ldd	r22, Y+62	; 0x3e
    4ff8:	7f ad       	ldd	r23, Y+63	; 0x3f
    4ffa:	21 96       	adiw	r28, 0x01	; 1
    4ffc:	8f ad       	ldd	r24, Y+63	; 0x3f
    4ffe:	21 97       	sbiw	r28, 0x01	; 1
    5000:	22 96       	adiw	r28, 0x02	; 2
    5002:	9f ad       	ldd	r25, Y+63	; 0x3f
    5004:	22 97       	sbiw	r28, 0x02	; 2
    5006:	20 93 a9 01 	sts	0x01A9, r18
    500a:	30 93 aa 01 	sts	0x01AA, r19
    500e:	40 93 ab 01 	sts	0x01AB, r20
    5012:	50 93 ac 01 	sts	0x01AC, r21
    5016:	60 93 ad 01 	sts	0x01AD, r22
    501a:	70 93 ae 01 	sts	0x01AE, r23
    501e:	80 93 af 01 	sts	0x01AF, r24
    5022:	90 93 b0 01 	sts	0x01B0, r25
    5026:	6a c2       	rjmp	.+1236   	; 0x54fc <T2_GetStatus+0x92c>
         }
      }
      //if the current overflow value equals the calculated total overflows value
      else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    5028:	80 91 a9 01 	lds	r24, 0x01A9
    502c:	8a 8b       	std	Y+18, r24	; 0x12
    502e:	90 91 aa 01 	lds	r25, 0x01AA
    5032:	9b 8b       	std	Y+19, r25	; 0x13
    5034:	80 91 ab 01 	lds	r24, 0x01AB
    5038:	8c 8b       	std	Y+20, r24	; 0x14
    503a:	90 91 ac 01 	lds	r25, 0x01AC
    503e:	9d 8b       	std	Y+21, r25	; 0x15
    5040:	80 91 ad 01 	lds	r24, 0x01AD
    5044:	8e 8b       	std	Y+22, r24	; 0x16
    5046:	90 91 ae 01 	lds	r25, 0x01AE
    504a:	9f 8b       	std	Y+23, r25	; 0x17
    504c:	80 91 af 01 	lds	r24, 0x01AF
    5050:	88 8f       	std	Y+24, r24	; 0x18
    5052:	90 91 b0 01 	lds	r25, 0x01B0
    5056:	99 8f       	std	Y+25, r25	; 0x19
    5058:	80 91 a1 01 	lds	r24, 0x01A1
    505c:	8a 87       	std	Y+10, r24	; 0x0a
    505e:	90 91 a2 01 	lds	r25, 0x01A2
    5062:	9b 87       	std	Y+11, r25	; 0x0b
    5064:	80 91 a3 01 	lds	r24, 0x01A3
    5068:	8c 87       	std	Y+12, r24	; 0x0c
    506a:	90 91 a4 01 	lds	r25, 0x01A4
    506e:	9d 87       	std	Y+13, r25	; 0x0d
    5070:	80 91 a5 01 	lds	r24, 0x01A5
    5074:	8e 87       	std	Y+14, r24	; 0x0e
    5076:	90 91 a6 01 	lds	r25, 0x01A6
    507a:	9f 87       	std	Y+15, r25	; 0x0f
    507c:	80 91 a7 01 	lds	r24, 0x01A7
    5080:	88 8b       	std	Y+16, r24	; 0x10
    5082:	90 91 a8 01 	lds	r25, 0x01A8
    5086:	99 8b       	std	Y+17, r25	; 0x11
    5088:	8a 89       	ldd	r24, Y+18	; 0x12
    508a:	9a 85       	ldd	r25, Y+10	; 0x0a
    508c:	89 17       	cp	r24, r25
    508e:	09 f0       	breq	.+2      	; 0x5092 <T2_GetStatus+0x4c2>
    5090:	25 c2       	rjmp	.+1098   	; 0x54dc <T2_GetStatus+0x90c>
    5092:	8b 89       	ldd	r24, Y+19	; 0x13
    5094:	9b 85       	ldd	r25, Y+11	; 0x0b
    5096:	89 17       	cp	r24, r25
    5098:	09 f0       	breq	.+2      	; 0x509c <T2_GetStatus+0x4cc>
    509a:	20 c2       	rjmp	.+1088   	; 0x54dc <T2_GetStatus+0x90c>
    509c:	8c 89       	ldd	r24, Y+20	; 0x14
    509e:	9c 85       	ldd	r25, Y+12	; 0x0c
    50a0:	89 17       	cp	r24, r25
    50a2:	09 f0       	breq	.+2      	; 0x50a6 <T2_GetStatus+0x4d6>
    50a4:	1b c2       	rjmp	.+1078   	; 0x54dc <T2_GetStatus+0x90c>
    50a6:	8d 89       	ldd	r24, Y+21	; 0x15
    50a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    50aa:	89 17       	cp	r24, r25
    50ac:	09 f0       	breq	.+2      	; 0x50b0 <T2_GetStatus+0x4e0>
    50ae:	16 c2       	rjmp	.+1068   	; 0x54dc <T2_GetStatus+0x90c>
    50b0:	8e 89       	ldd	r24, Y+22	; 0x16
    50b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    50b4:	89 17       	cp	r24, r25
    50b6:	09 f0       	breq	.+2      	; 0x50ba <T2_GetStatus+0x4ea>
    50b8:	11 c2       	rjmp	.+1058   	; 0x54dc <T2_GetStatus+0x90c>
    50ba:	8f 89       	ldd	r24, Y+23	; 0x17
    50bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    50be:	89 17       	cp	r24, r25
    50c0:	09 f0       	breq	.+2      	; 0x50c4 <T2_GetStatus+0x4f4>
    50c2:	0c c2       	rjmp	.+1048   	; 0x54dc <T2_GetStatus+0x90c>
    50c4:	88 8d       	ldd	r24, Y+24	; 0x18
    50c6:	98 89       	ldd	r25, Y+16	; 0x10
    50c8:	89 17       	cp	r24, r25
    50ca:	09 f0       	breq	.+2      	; 0x50ce <T2_GetStatus+0x4fe>
    50cc:	07 c2       	rjmp	.+1038   	; 0x54dc <T2_GetStatus+0x90c>
    50ce:	89 8d       	ldd	r24, Y+25	; 0x19
    50d0:	99 89       	ldd	r25, Y+17	; 0x11
    50d2:	89 17       	cp	r24, r25
    50d4:	09 f0       	breq	.+2      	; 0x50d8 <T2_GetStatus+0x508>
    50d6:	02 c2       	rjmp	.+1028   	; 0x54dc <T2_GetStatus+0x90c>
      {
         //set the timer value to the remaining timing
         TCNT2_R=((T2_TICKS-1)-Gu32_T2LastOVTicks);
    50d8:	e4 e4       	ldi	r30, 0x44	; 68
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 91 b1 01 	lds	r24, 0x01B1
    50e0:	80 95       	com	r24
    50e2:	80 83       	st	Z, r24
         //clear the overflow flag
         SET_BIT(TIFR_R,TOV2_B);
    50e4:	a8 e5       	ldi	r26, 0x58	; 88
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e5       	ldi	r30, 0x58	; 88
    50ea:	f0 e0       	ldi	r31, 0x00	; 0
    50ec:	80 81       	ld	r24, Z
    50ee:	80 64       	ori	r24, 0x40	; 64
    50f0:	8c 93       	st	X, r24
         //increase the overflow counter
         Gu32_T2CurrentOVCount++;
    50f2:	80 91 a9 01 	lds	r24, 0x01A9
    50f6:	8a 83       	std	Y+2, r24	; 0x02
    50f8:	90 91 aa 01 	lds	r25, 0x01AA
    50fc:	9b 83       	std	Y+3, r25	; 0x03
    50fe:	80 91 ab 01 	lds	r24, 0x01AB
    5102:	8c 83       	std	Y+4, r24	; 0x04
    5104:	90 91 ac 01 	lds	r25, 0x01AC
    5108:	9d 83       	std	Y+5, r25	; 0x05
    510a:	80 91 ad 01 	lds	r24, 0x01AD
    510e:	8e 83       	std	Y+6, r24	; 0x06
    5110:	90 91 ae 01 	lds	r25, 0x01AE
    5114:	9f 83       	std	Y+7, r25	; 0x07
    5116:	80 91 af 01 	lds	r24, 0x01AF
    511a:	88 87       	std	Y+8, r24	; 0x08
    511c:	90 91 b0 01 	lds	r25, 0x01B0
    5120:	99 87       	std	Y+9, r25	; 0x09
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	66 96       	adiw	r28, 0x16	; 22
    5126:	8f af       	std	Y+63, r24	; 0x3f
    5128:	66 97       	sbiw	r28, 0x16	; 22
    512a:	67 96       	adiw	r28, 0x17	; 23
    512c:	1f ae       	std	Y+63, r1	; 0x3f
    512e:	67 97       	sbiw	r28, 0x17	; 23
    5130:	68 96       	adiw	r28, 0x18	; 24
    5132:	1f ae       	std	Y+63, r1	; 0x3f
    5134:	68 97       	sbiw	r28, 0x18	; 24
    5136:	69 96       	adiw	r28, 0x19	; 25
    5138:	1f ae       	std	Y+63, r1	; 0x3f
    513a:	69 97       	sbiw	r28, 0x19	; 25
    513c:	6a 96       	adiw	r28, 0x1a	; 26
    513e:	1f ae       	std	Y+63, r1	; 0x3f
    5140:	6a 97       	sbiw	r28, 0x1a	; 26
    5142:	6b 96       	adiw	r28, 0x1b	; 27
    5144:	1f ae       	std	Y+63, r1	; 0x3f
    5146:	6b 97       	sbiw	r28, 0x1b	; 27
    5148:	6c 96       	adiw	r28, 0x1c	; 28
    514a:	1f ae       	std	Y+63, r1	; 0x3f
    514c:	6c 97       	sbiw	r28, 0x1c	; 28
    514e:	6d 96       	adiw	r28, 0x1d	; 29
    5150:	1f ae       	std	Y+63, r1	; 0x3f
    5152:	6d 97       	sbiw	r28, 0x1d	; 29
    5154:	9a 81       	ldd	r25, Y+2	; 0x02
    5156:	66 96       	adiw	r28, 0x16	; 22
    5158:	8f ad       	ldd	r24, Y+63	; 0x3f
    515a:	66 97       	sbiw	r28, 0x16	; 22
    515c:	98 0f       	add	r25, r24
    515e:	6e 96       	adiw	r28, 0x1e	; 30
    5160:	9f af       	std	Y+63, r25	; 0x3f
    5162:	6e 97       	sbiw	r28, 0x1e	; 30
    5164:	91 e0       	ldi	r25, 0x01	; 1
    5166:	a6 96       	adiw	r28, 0x26	; 38
    5168:	9f af       	std	Y+63, r25	; 0x3f
    516a:	a6 97       	sbiw	r28, 0x26	; 38
    516c:	6e 96       	adiw	r28, 0x1e	; 30
    516e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5170:	6e 97       	sbiw	r28, 0x1e	; 30
    5172:	9a 81       	ldd	r25, Y+2	; 0x02
    5174:	89 17       	cp	r24, r25
    5176:	18 f0       	brcs	.+6      	; 0x517e <T2_GetStatus+0x5ae>
    5178:	a6 96       	adiw	r28, 0x26	; 38
    517a:	1f ae       	std	Y+63, r1	; 0x3f
    517c:	a6 97       	sbiw	r28, 0x26	; 38
    517e:	8b 81       	ldd	r24, Y+3	; 0x03
    5180:	67 96       	adiw	r28, 0x17	; 23
    5182:	9f ad       	ldd	r25, Y+63	; 0x3f
    5184:	67 97       	sbiw	r28, 0x17	; 23
    5186:	89 0f       	add	r24, r25
    5188:	6f 96       	adiw	r28, 0x1f	; 31
    518a:	8f af       	std	Y+63, r24	; 0x3f
    518c:	6f 97       	sbiw	r28, 0x1f	; 31
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	a7 96       	adiw	r28, 0x27	; 39
    5192:	8f af       	std	Y+63, r24	; 0x3f
    5194:	a7 97       	sbiw	r28, 0x27	; 39
    5196:	6f 96       	adiw	r28, 0x1f	; 31
    5198:	9f ad       	ldd	r25, Y+63	; 0x3f
    519a:	6f 97       	sbiw	r28, 0x1f	; 31
    519c:	8b 81       	ldd	r24, Y+3	; 0x03
    519e:	98 17       	cp	r25, r24
    51a0:	18 f0       	brcs	.+6      	; 0x51a8 <T2_GetStatus+0x5d8>
    51a2:	a7 96       	adiw	r28, 0x27	; 39
    51a4:	1f ae       	std	Y+63, r1	; 0x3f
    51a6:	a7 97       	sbiw	r28, 0x27	; 39
    51a8:	a6 96       	adiw	r28, 0x26	; 38
    51aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    51ac:	a6 97       	sbiw	r28, 0x26	; 38
    51ae:	6f 96       	adiw	r28, 0x1f	; 31
    51b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    51b2:	6f 97       	sbiw	r28, 0x1f	; 31
    51b4:	98 0f       	add	r25, r24
    51b6:	a8 96       	adiw	r28, 0x28	; 40
    51b8:	9f af       	std	Y+63, r25	; 0x3f
    51ba:	a8 97       	sbiw	r28, 0x28	; 40
    51bc:	91 e0       	ldi	r25, 0x01	; 1
    51be:	a9 96       	adiw	r28, 0x29	; 41
    51c0:	9f af       	std	Y+63, r25	; 0x3f
    51c2:	a9 97       	sbiw	r28, 0x29	; 41
    51c4:	a8 96       	adiw	r28, 0x28	; 40
    51c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    51c8:	a8 97       	sbiw	r28, 0x28	; 40
    51ca:	6f 96       	adiw	r28, 0x1f	; 31
    51cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    51ce:	6f 97       	sbiw	r28, 0x1f	; 31
    51d0:	89 17       	cp	r24, r25
    51d2:	18 f0       	brcs	.+6      	; 0x51da <T2_GetStatus+0x60a>
    51d4:	a9 96       	adiw	r28, 0x29	; 41
    51d6:	1f ae       	std	Y+63, r1	; 0x3f
    51d8:	a9 97       	sbiw	r28, 0x29	; 41
    51da:	a7 96       	adiw	r28, 0x27	; 39
    51dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    51de:	a7 97       	sbiw	r28, 0x27	; 39
    51e0:	a9 96       	adiw	r28, 0x29	; 41
    51e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    51e4:	a9 97       	sbiw	r28, 0x29	; 41
    51e6:	89 2b       	or	r24, r25
    51e8:	a7 96       	adiw	r28, 0x27	; 39
    51ea:	8f af       	std	Y+63, r24	; 0x3f
    51ec:	a7 97       	sbiw	r28, 0x27	; 39
    51ee:	a8 96       	adiw	r28, 0x28	; 40
    51f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    51f2:	a8 97       	sbiw	r28, 0x28	; 40
    51f4:	6f 96       	adiw	r28, 0x1f	; 31
    51f6:	8f af       	std	Y+63, r24	; 0x3f
    51f8:	6f 97       	sbiw	r28, 0x1f	; 31
    51fa:	9c 81       	ldd	r25, Y+4	; 0x04
    51fc:	68 96       	adiw	r28, 0x18	; 24
    51fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    5200:	68 97       	sbiw	r28, 0x18	; 24
    5202:	98 0f       	add	r25, r24
    5204:	a0 96       	adiw	r28, 0x20	; 32
    5206:	9f af       	std	Y+63, r25	; 0x3f
    5208:	a0 97       	sbiw	r28, 0x20	; 32
    520a:	91 e0       	ldi	r25, 0x01	; 1
    520c:	aa 96       	adiw	r28, 0x2a	; 42
    520e:	9f af       	std	Y+63, r25	; 0x3f
    5210:	aa 97       	sbiw	r28, 0x2a	; 42
    5212:	a0 96       	adiw	r28, 0x20	; 32
    5214:	8f ad       	ldd	r24, Y+63	; 0x3f
    5216:	a0 97       	sbiw	r28, 0x20	; 32
    5218:	9c 81       	ldd	r25, Y+4	; 0x04
    521a:	89 17       	cp	r24, r25
    521c:	18 f0       	brcs	.+6      	; 0x5224 <T2_GetStatus+0x654>
    521e:	aa 96       	adiw	r28, 0x2a	; 42
    5220:	1f ae       	std	Y+63, r1	; 0x3f
    5222:	aa 97       	sbiw	r28, 0x2a	; 42
    5224:	a7 96       	adiw	r28, 0x27	; 39
    5226:	8f ad       	ldd	r24, Y+63	; 0x3f
    5228:	a7 97       	sbiw	r28, 0x27	; 39
    522a:	a0 96       	adiw	r28, 0x20	; 32
    522c:	9f ad       	ldd	r25, Y+63	; 0x3f
    522e:	a0 97       	sbiw	r28, 0x20	; 32
    5230:	89 0f       	add	r24, r25
    5232:	ab 96       	adiw	r28, 0x2b	; 43
    5234:	8f af       	std	Y+63, r24	; 0x3f
    5236:	ab 97       	sbiw	r28, 0x2b	; 43
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	ac 96       	adiw	r28, 0x2c	; 44
    523c:	8f af       	std	Y+63, r24	; 0x3f
    523e:	ac 97       	sbiw	r28, 0x2c	; 44
    5240:	ab 96       	adiw	r28, 0x2b	; 43
    5242:	9f ad       	ldd	r25, Y+63	; 0x3f
    5244:	ab 97       	sbiw	r28, 0x2b	; 43
    5246:	a0 96       	adiw	r28, 0x20	; 32
    5248:	8f ad       	ldd	r24, Y+63	; 0x3f
    524a:	a0 97       	sbiw	r28, 0x20	; 32
    524c:	98 17       	cp	r25, r24
    524e:	18 f0       	brcs	.+6      	; 0x5256 <T2_GetStatus+0x686>
    5250:	ac 96       	adiw	r28, 0x2c	; 44
    5252:	1f ae       	std	Y+63, r1	; 0x3f
    5254:	ac 97       	sbiw	r28, 0x2c	; 44
    5256:	aa 96       	adiw	r28, 0x2a	; 42
    5258:	9f ad       	ldd	r25, Y+63	; 0x3f
    525a:	aa 97       	sbiw	r28, 0x2a	; 42
    525c:	ac 96       	adiw	r28, 0x2c	; 44
    525e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5260:	ac 97       	sbiw	r28, 0x2c	; 44
    5262:	98 2b       	or	r25, r24
    5264:	aa 96       	adiw	r28, 0x2a	; 42
    5266:	9f af       	std	Y+63, r25	; 0x3f
    5268:	aa 97       	sbiw	r28, 0x2a	; 42
    526a:	ab 96       	adiw	r28, 0x2b	; 43
    526c:	9f ad       	ldd	r25, Y+63	; 0x3f
    526e:	ab 97       	sbiw	r28, 0x2b	; 43
    5270:	a0 96       	adiw	r28, 0x20	; 32
    5272:	9f af       	std	Y+63, r25	; 0x3f
    5274:	a0 97       	sbiw	r28, 0x20	; 32
    5276:	8d 81       	ldd	r24, Y+5	; 0x05
    5278:	69 96       	adiw	r28, 0x19	; 25
    527a:	9f ad       	ldd	r25, Y+63	; 0x3f
    527c:	69 97       	sbiw	r28, 0x19	; 25
    527e:	89 0f       	add	r24, r25
    5280:	a1 96       	adiw	r28, 0x21	; 33
    5282:	8f af       	std	Y+63, r24	; 0x3f
    5284:	a1 97       	sbiw	r28, 0x21	; 33
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	ad 96       	adiw	r28, 0x2d	; 45
    528a:	8f af       	std	Y+63, r24	; 0x3f
    528c:	ad 97       	sbiw	r28, 0x2d	; 45
    528e:	a1 96       	adiw	r28, 0x21	; 33
    5290:	9f ad       	ldd	r25, Y+63	; 0x3f
    5292:	a1 97       	sbiw	r28, 0x21	; 33
    5294:	8d 81       	ldd	r24, Y+5	; 0x05
    5296:	98 17       	cp	r25, r24
    5298:	18 f0       	brcs	.+6      	; 0x52a0 <T2_GetStatus+0x6d0>
    529a:	ad 96       	adiw	r28, 0x2d	; 45
    529c:	1f ae       	std	Y+63, r1	; 0x3f
    529e:	ad 97       	sbiw	r28, 0x2d	; 45
    52a0:	aa 96       	adiw	r28, 0x2a	; 42
    52a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    52a4:	aa 97       	sbiw	r28, 0x2a	; 42
    52a6:	a1 96       	adiw	r28, 0x21	; 33
    52a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    52aa:	a1 97       	sbiw	r28, 0x21	; 33
    52ac:	98 0f       	add	r25, r24
    52ae:	ae 96       	adiw	r28, 0x2e	; 46
    52b0:	9f af       	std	Y+63, r25	; 0x3f
    52b2:	ae 97       	sbiw	r28, 0x2e	; 46
    52b4:	91 e0       	ldi	r25, 0x01	; 1
    52b6:	af 96       	adiw	r28, 0x2f	; 47
    52b8:	9f af       	std	Y+63, r25	; 0x3f
    52ba:	af 97       	sbiw	r28, 0x2f	; 47
    52bc:	ae 96       	adiw	r28, 0x2e	; 46
    52be:	8f ad       	ldd	r24, Y+63	; 0x3f
    52c0:	ae 97       	sbiw	r28, 0x2e	; 46
    52c2:	a1 96       	adiw	r28, 0x21	; 33
    52c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    52c6:	a1 97       	sbiw	r28, 0x21	; 33
    52c8:	89 17       	cp	r24, r25
    52ca:	18 f0       	brcs	.+6      	; 0x52d2 <T2_GetStatus+0x702>
    52cc:	af 96       	adiw	r28, 0x2f	; 47
    52ce:	1f ae       	std	Y+63, r1	; 0x3f
    52d0:	af 97       	sbiw	r28, 0x2f	; 47
    52d2:	ad 96       	adiw	r28, 0x2d	; 45
    52d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    52d6:	ad 97       	sbiw	r28, 0x2d	; 45
    52d8:	af 96       	adiw	r28, 0x2f	; 47
    52da:	9f ad       	ldd	r25, Y+63	; 0x3f
    52dc:	af 97       	sbiw	r28, 0x2f	; 47
    52de:	89 2b       	or	r24, r25
    52e0:	ad 96       	adiw	r28, 0x2d	; 45
    52e2:	8f af       	std	Y+63, r24	; 0x3f
    52e4:	ad 97       	sbiw	r28, 0x2d	; 45
    52e6:	ae 96       	adiw	r28, 0x2e	; 46
    52e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    52ea:	ae 97       	sbiw	r28, 0x2e	; 46
    52ec:	a1 96       	adiw	r28, 0x21	; 33
    52ee:	8f af       	std	Y+63, r24	; 0x3f
    52f0:	a1 97       	sbiw	r28, 0x21	; 33
    52f2:	9e 81       	ldd	r25, Y+6	; 0x06
    52f4:	6a 96       	adiw	r28, 0x1a	; 26
    52f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    52f8:	6a 97       	sbiw	r28, 0x1a	; 26
    52fa:	98 0f       	add	r25, r24
    52fc:	a2 96       	adiw	r28, 0x22	; 34
    52fe:	9f af       	std	Y+63, r25	; 0x3f
    5300:	a2 97       	sbiw	r28, 0x22	; 34
    5302:	91 e0       	ldi	r25, 0x01	; 1
    5304:	e0 96       	adiw	r28, 0x30	; 48
    5306:	9f af       	std	Y+63, r25	; 0x3f
    5308:	e0 97       	sbiw	r28, 0x30	; 48
    530a:	a2 96       	adiw	r28, 0x22	; 34
    530c:	8f ad       	ldd	r24, Y+63	; 0x3f
    530e:	a2 97       	sbiw	r28, 0x22	; 34
    5310:	9e 81       	ldd	r25, Y+6	; 0x06
    5312:	89 17       	cp	r24, r25
    5314:	18 f0       	brcs	.+6      	; 0x531c <T2_GetStatus+0x74c>
    5316:	e0 96       	adiw	r28, 0x30	; 48
    5318:	1f ae       	std	Y+63, r1	; 0x3f
    531a:	e0 97       	sbiw	r28, 0x30	; 48
    531c:	ad 96       	adiw	r28, 0x2d	; 45
    531e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5320:	ad 97       	sbiw	r28, 0x2d	; 45
    5322:	a2 96       	adiw	r28, 0x22	; 34
    5324:	9f ad       	ldd	r25, Y+63	; 0x3f
    5326:	a2 97       	sbiw	r28, 0x22	; 34
    5328:	89 0f       	add	r24, r25
    532a:	e1 96       	adiw	r28, 0x31	; 49
    532c:	8f af       	std	Y+63, r24	; 0x3f
    532e:	e1 97       	sbiw	r28, 0x31	; 49
    5330:	81 e0       	ldi	r24, 0x01	; 1
    5332:	e2 96       	adiw	r28, 0x32	; 50
    5334:	8f af       	std	Y+63, r24	; 0x3f
    5336:	e2 97       	sbiw	r28, 0x32	; 50
    5338:	e1 96       	adiw	r28, 0x31	; 49
    533a:	9f ad       	ldd	r25, Y+63	; 0x3f
    533c:	e1 97       	sbiw	r28, 0x31	; 49
    533e:	a2 96       	adiw	r28, 0x22	; 34
    5340:	8f ad       	ldd	r24, Y+63	; 0x3f
    5342:	a2 97       	sbiw	r28, 0x22	; 34
    5344:	98 17       	cp	r25, r24
    5346:	18 f0       	brcs	.+6      	; 0x534e <T2_GetStatus+0x77e>
    5348:	e2 96       	adiw	r28, 0x32	; 50
    534a:	1f ae       	std	Y+63, r1	; 0x3f
    534c:	e2 97       	sbiw	r28, 0x32	; 50
    534e:	e0 96       	adiw	r28, 0x30	; 48
    5350:	9f ad       	ldd	r25, Y+63	; 0x3f
    5352:	e0 97       	sbiw	r28, 0x30	; 48
    5354:	e2 96       	adiw	r28, 0x32	; 50
    5356:	8f ad       	ldd	r24, Y+63	; 0x3f
    5358:	e2 97       	sbiw	r28, 0x32	; 50
    535a:	98 2b       	or	r25, r24
    535c:	e0 96       	adiw	r28, 0x30	; 48
    535e:	9f af       	std	Y+63, r25	; 0x3f
    5360:	e0 97       	sbiw	r28, 0x30	; 48
    5362:	e1 96       	adiw	r28, 0x31	; 49
    5364:	9f ad       	ldd	r25, Y+63	; 0x3f
    5366:	e1 97       	sbiw	r28, 0x31	; 49
    5368:	a2 96       	adiw	r28, 0x22	; 34
    536a:	9f af       	std	Y+63, r25	; 0x3f
    536c:	a2 97       	sbiw	r28, 0x22	; 34
    536e:	8f 81       	ldd	r24, Y+7	; 0x07
    5370:	6b 96       	adiw	r28, 0x1b	; 27
    5372:	9f ad       	ldd	r25, Y+63	; 0x3f
    5374:	6b 97       	sbiw	r28, 0x1b	; 27
    5376:	89 0f       	add	r24, r25
    5378:	a3 96       	adiw	r28, 0x23	; 35
    537a:	8f af       	std	Y+63, r24	; 0x3f
    537c:	a3 97       	sbiw	r28, 0x23	; 35
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	e3 96       	adiw	r28, 0x33	; 51
    5382:	8f af       	std	Y+63, r24	; 0x3f
    5384:	e3 97       	sbiw	r28, 0x33	; 51
    5386:	a3 96       	adiw	r28, 0x23	; 35
    5388:	9f ad       	ldd	r25, Y+63	; 0x3f
    538a:	a3 97       	sbiw	r28, 0x23	; 35
    538c:	8f 81       	ldd	r24, Y+7	; 0x07
    538e:	98 17       	cp	r25, r24
    5390:	18 f0       	brcs	.+6      	; 0x5398 <T2_GetStatus+0x7c8>
    5392:	e3 96       	adiw	r28, 0x33	; 51
    5394:	1f ae       	std	Y+63, r1	; 0x3f
    5396:	e3 97       	sbiw	r28, 0x33	; 51
    5398:	e0 96       	adiw	r28, 0x30	; 48
    539a:	9f ad       	ldd	r25, Y+63	; 0x3f
    539c:	e0 97       	sbiw	r28, 0x30	; 48
    539e:	a3 96       	adiw	r28, 0x23	; 35
    53a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    53a2:	a3 97       	sbiw	r28, 0x23	; 35
    53a4:	98 0f       	add	r25, r24
    53a6:	e4 96       	adiw	r28, 0x34	; 52
    53a8:	9f af       	std	Y+63, r25	; 0x3f
    53aa:	e4 97       	sbiw	r28, 0x34	; 52
    53ac:	91 e0       	ldi	r25, 0x01	; 1
    53ae:	e5 96       	adiw	r28, 0x35	; 53
    53b0:	9f af       	std	Y+63, r25	; 0x3f
    53b2:	e5 97       	sbiw	r28, 0x35	; 53
    53b4:	e4 96       	adiw	r28, 0x34	; 52
    53b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    53b8:	e4 97       	sbiw	r28, 0x34	; 52
    53ba:	a3 96       	adiw	r28, 0x23	; 35
    53bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    53be:	a3 97       	sbiw	r28, 0x23	; 35
    53c0:	89 17       	cp	r24, r25
    53c2:	18 f0       	brcs	.+6      	; 0x53ca <T2_GetStatus+0x7fa>
    53c4:	e5 96       	adiw	r28, 0x35	; 53
    53c6:	1f ae       	std	Y+63, r1	; 0x3f
    53c8:	e5 97       	sbiw	r28, 0x35	; 53
    53ca:	e3 96       	adiw	r28, 0x33	; 51
    53cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    53ce:	e3 97       	sbiw	r28, 0x33	; 51
    53d0:	e5 96       	adiw	r28, 0x35	; 53
    53d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    53d4:	e5 97       	sbiw	r28, 0x35	; 53
    53d6:	89 2b       	or	r24, r25
    53d8:	e3 96       	adiw	r28, 0x33	; 51
    53da:	8f af       	std	Y+63, r24	; 0x3f
    53dc:	e3 97       	sbiw	r28, 0x33	; 51
    53de:	e4 96       	adiw	r28, 0x34	; 52
    53e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    53e2:	e4 97       	sbiw	r28, 0x34	; 52
    53e4:	a3 96       	adiw	r28, 0x23	; 35
    53e6:	8f af       	std	Y+63, r24	; 0x3f
    53e8:	a3 97       	sbiw	r28, 0x23	; 35
    53ea:	98 85       	ldd	r25, Y+8	; 0x08
    53ec:	6c 96       	adiw	r28, 0x1c	; 28
    53ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    53f0:	6c 97       	sbiw	r28, 0x1c	; 28
    53f2:	98 0f       	add	r25, r24
    53f4:	a4 96       	adiw	r28, 0x24	; 36
    53f6:	9f af       	std	Y+63, r25	; 0x3f
    53f8:	a4 97       	sbiw	r28, 0x24	; 36
    53fa:	91 e0       	ldi	r25, 0x01	; 1
    53fc:	e6 96       	adiw	r28, 0x36	; 54
    53fe:	9f af       	std	Y+63, r25	; 0x3f
    5400:	e6 97       	sbiw	r28, 0x36	; 54
    5402:	a4 96       	adiw	r28, 0x24	; 36
    5404:	8f ad       	ldd	r24, Y+63	; 0x3f
    5406:	a4 97       	sbiw	r28, 0x24	; 36
    5408:	98 85       	ldd	r25, Y+8	; 0x08
    540a:	89 17       	cp	r24, r25
    540c:	18 f0       	brcs	.+6      	; 0x5414 <T2_GetStatus+0x844>
    540e:	e6 96       	adiw	r28, 0x36	; 54
    5410:	1f ae       	std	Y+63, r1	; 0x3f
    5412:	e6 97       	sbiw	r28, 0x36	; 54
    5414:	e3 96       	adiw	r28, 0x33	; 51
    5416:	8f ad       	ldd	r24, Y+63	; 0x3f
    5418:	e3 97       	sbiw	r28, 0x33	; 51
    541a:	a4 96       	adiw	r28, 0x24	; 36
    541c:	9f ad       	ldd	r25, Y+63	; 0x3f
    541e:	a4 97       	sbiw	r28, 0x24	; 36
    5420:	89 0f       	add	r24, r25
    5422:	e7 96       	adiw	r28, 0x37	; 55
    5424:	8f af       	std	Y+63, r24	; 0x3f
    5426:	e7 97       	sbiw	r28, 0x37	; 55
    5428:	81 e0       	ldi	r24, 0x01	; 1
    542a:	e8 96       	adiw	r28, 0x38	; 56
    542c:	8f af       	std	Y+63, r24	; 0x3f
    542e:	e8 97       	sbiw	r28, 0x38	; 56
    5430:	e7 96       	adiw	r28, 0x37	; 55
    5432:	9f ad       	ldd	r25, Y+63	; 0x3f
    5434:	e7 97       	sbiw	r28, 0x37	; 55
    5436:	a4 96       	adiw	r28, 0x24	; 36
    5438:	8f ad       	ldd	r24, Y+63	; 0x3f
    543a:	a4 97       	sbiw	r28, 0x24	; 36
    543c:	98 17       	cp	r25, r24
    543e:	18 f0       	brcs	.+6      	; 0x5446 <T2_GetStatus+0x876>
    5440:	e8 96       	adiw	r28, 0x38	; 56
    5442:	1f ae       	std	Y+63, r1	; 0x3f
    5444:	e8 97       	sbiw	r28, 0x38	; 56
    5446:	e6 96       	adiw	r28, 0x36	; 54
    5448:	9f ad       	ldd	r25, Y+63	; 0x3f
    544a:	e6 97       	sbiw	r28, 0x36	; 54
    544c:	e8 96       	adiw	r28, 0x38	; 56
    544e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5450:	e8 97       	sbiw	r28, 0x38	; 56
    5452:	98 2b       	or	r25, r24
    5454:	e6 96       	adiw	r28, 0x36	; 54
    5456:	9f af       	std	Y+63, r25	; 0x3f
    5458:	e6 97       	sbiw	r28, 0x36	; 54
    545a:	e7 96       	adiw	r28, 0x37	; 55
    545c:	9f ad       	ldd	r25, Y+63	; 0x3f
    545e:	e7 97       	sbiw	r28, 0x37	; 55
    5460:	a4 96       	adiw	r28, 0x24	; 36
    5462:	9f af       	std	Y+63, r25	; 0x3f
    5464:	a4 97       	sbiw	r28, 0x24	; 36
    5466:	89 85       	ldd	r24, Y+9	; 0x09
    5468:	6d 96       	adiw	r28, 0x1d	; 29
    546a:	9f ad       	ldd	r25, Y+63	; 0x3f
    546c:	6d 97       	sbiw	r28, 0x1d	; 29
    546e:	89 0f       	add	r24, r25
    5470:	a5 96       	adiw	r28, 0x25	; 37
    5472:	8f af       	std	Y+63, r24	; 0x3f
    5474:	a5 97       	sbiw	r28, 0x25	; 37
    5476:	e6 96       	adiw	r28, 0x36	; 54
    5478:	8f ad       	ldd	r24, Y+63	; 0x3f
    547a:	e6 97       	sbiw	r28, 0x36	; 54
    547c:	a5 96       	adiw	r28, 0x25	; 37
    547e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5480:	a5 97       	sbiw	r28, 0x25	; 37
    5482:	89 0f       	add	r24, r25
    5484:	a5 96       	adiw	r28, 0x25	; 37
    5486:	8f af       	std	Y+63, r24	; 0x3f
    5488:	a5 97       	sbiw	r28, 0x25	; 37
    548a:	6e 96       	adiw	r28, 0x1e	; 30
    548c:	2f ad       	ldd	r18, Y+63	; 0x3f
    548e:	6e 97       	sbiw	r28, 0x1e	; 30
    5490:	6f 96       	adiw	r28, 0x1f	; 31
    5492:	3f ad       	ldd	r19, Y+63	; 0x3f
    5494:	6f 97       	sbiw	r28, 0x1f	; 31
    5496:	a0 96       	adiw	r28, 0x20	; 32
    5498:	4f ad       	ldd	r20, Y+63	; 0x3f
    549a:	a0 97       	sbiw	r28, 0x20	; 32
    549c:	a1 96       	adiw	r28, 0x21	; 33
    549e:	5f ad       	ldd	r21, Y+63	; 0x3f
    54a0:	a1 97       	sbiw	r28, 0x21	; 33
    54a2:	a2 96       	adiw	r28, 0x22	; 34
    54a4:	6f ad       	ldd	r22, Y+63	; 0x3f
    54a6:	a2 97       	sbiw	r28, 0x22	; 34
    54a8:	a3 96       	adiw	r28, 0x23	; 35
    54aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    54ac:	a3 97       	sbiw	r28, 0x23	; 35
    54ae:	a4 96       	adiw	r28, 0x24	; 36
    54b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    54b2:	a4 97       	sbiw	r28, 0x24	; 36
    54b4:	a5 96       	adiw	r28, 0x25	; 37
    54b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54b8:	a5 97       	sbiw	r28, 0x25	; 37
    54ba:	20 93 a9 01 	sts	0x01A9, r18
    54be:	30 93 aa 01 	sts	0x01AA, r19
    54c2:	40 93 ab 01 	sts	0x01AB, r20
    54c6:	50 93 ac 01 	sts	0x01AC, r21
    54ca:	60 93 ad 01 	sts	0x01AD, r22
    54ce:	70 93 ae 01 	sts	0x01AE, r23
    54d2:	80 93 af 01 	sts	0x01AF, r24
    54d6:	90 93 b0 01 	sts	0x01B0, r25
    54da:	10 c0       	rjmp	.+32     	; 0x54fc <T2_GetStatus+0x92c>

      //if the time is up
      else
      {
         //check if the global pointer to function holds a valid function address
         if (G_fptr2 != NULLPTR)
    54dc:	80 91 9f 01 	lds	r24, 0x019F
    54e0:	90 91 a0 01 	lds	r25, 0x01A0
    54e4:	00 97       	sbiw	r24, 0x00	; 0
    54e6:	29 f0       	breq	.+10     	; 0x54f2 <T2_GetStatus+0x922>
         {
            //if so, call the function
            G_fptr2();
    54e8:	e0 91 9f 01 	lds	r30, 0x019F
    54ec:	f0 91 a0 01 	lds	r31, 0x01A0
    54f0:	09 95       	icall
         }
         //stop the timer
         T2_Stop();
    54f2:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <T2_Stop>
         //return a E_OK state
         return E_OK;
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	89 83       	std	Y+1, r24	; 0x01
    54fa:	01 c0       	rjmp	.+2      	; 0x54fe <T2_GetStatus+0x92e>

      }
      // if all failed, return an error state
   return E_ERROR;
    54fc:	19 82       	std	Y+1, r1	; 0x01
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    5500:	c9 58       	subi	r28, 0x89	; 137
    5502:	df 4f       	sbci	r29, 0xFF	; 255
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	cf 91       	pop	r28
    5510:	df 91       	pop	r29
    5512:	08 95       	ret

00005514 <__vector_5>:

/******************** ISR FUNCTIONS ****************************************/

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER2_OVF_vect)
{
    5514:	1f 92       	push	r1
    5516:	0f 92       	push	r0
    5518:	0f b6       	in	r0, 0x3f	; 63
    551a:	0f 92       	push	r0
    551c:	11 24       	eor	r1, r1
    551e:	2f 93       	push	r18
    5520:	3f 93       	push	r19
    5522:	4f 93       	push	r20
    5524:	5f 93       	push	r21
    5526:	6f 93       	push	r22
    5528:	7f 93       	push	r23
    552a:	8f 93       	push	r24
    552c:	9f 93       	push	r25
    552e:	af 93       	push	r26
    5530:	bf 93       	push	r27
    5532:	ef 93       	push	r30
    5534:	ff 93       	push	r31
    5536:	df 93       	push	r29
    5538:	cf 93       	push	r28
    553a:	cd b7       	in	r28, 0x3d	; 61
    553c:	de b7       	in	r29, 0x3e	; 62
    553e:	c6 57       	subi	r28, 0x76	; 118
    5540:	d0 40       	sbci	r29, 0x00	; 0
    5542:	de bf       	out	0x3e, r29	; 62
    5544:	cd bf       	out	0x3d, r28	; 61
   //if the current overflow value is less than the total overflows value
   if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    5546:	80 91 a9 01 	lds	r24, 0x01A9
    554a:	89 a7       	std	Y+41, r24	; 0x29
    554c:	90 91 aa 01 	lds	r25, 0x01AA
    5550:	9a a7       	std	Y+42, r25	; 0x2a
    5552:	80 91 ab 01 	lds	r24, 0x01AB
    5556:	8b a7       	std	Y+43, r24	; 0x2b
    5558:	90 91 ac 01 	lds	r25, 0x01AC
    555c:	9c a7       	std	Y+44, r25	; 0x2c
    555e:	80 91 ad 01 	lds	r24, 0x01AD
    5562:	8d a7       	std	Y+45, r24	; 0x2d
    5564:	90 91 ae 01 	lds	r25, 0x01AE
    5568:	9e a7       	std	Y+46, r25	; 0x2e
    556a:	80 91 af 01 	lds	r24, 0x01AF
    556e:	8f a7       	std	Y+47, r24	; 0x2f
    5570:	90 91 b0 01 	lds	r25, 0x01B0
    5574:	98 ab       	std	Y+48, r25	; 0x30
    5576:	80 91 a1 01 	lds	r24, 0x01A1
    557a:	89 a3       	std	Y+33, r24	; 0x21
    557c:	90 91 a2 01 	lds	r25, 0x01A2
    5580:	9a a3       	std	Y+34, r25	; 0x22
    5582:	80 91 a3 01 	lds	r24, 0x01A3
    5586:	8b a3       	std	Y+35, r24	; 0x23
    5588:	90 91 a4 01 	lds	r25, 0x01A4
    558c:	9c a3       	std	Y+36, r25	; 0x24
    558e:	80 91 a5 01 	lds	r24, 0x01A5
    5592:	8d a3       	std	Y+37, r24	; 0x25
    5594:	90 91 a6 01 	lds	r25, 0x01A6
    5598:	9e a3       	std	Y+38, r25	; 0x26
    559a:	80 91 a7 01 	lds	r24, 0x01A7
    559e:	8f a3       	std	Y+39, r24	; 0x27
    55a0:	90 91 a8 01 	lds	r25, 0x01A8
    55a4:	98 a7       	std	Y+40, r25	; 0x28
    55a6:	88 a5       	ldd	r24, Y+40	; 0x28
    55a8:	98 a9       	ldd	r25, Y+48	; 0x30
    55aa:	98 17       	cp	r25, r24
    55ac:	08 f4       	brcc	.+2      	; 0x55b0 <__vector_5+0x9c>
    55ae:	40 c0       	rjmp	.+128    	; 0x5630 <__vector_5+0x11c>
    55b0:	88 a5       	ldd	r24, Y+40	; 0x28
    55b2:	98 a9       	ldd	r25, Y+48	; 0x30
    55b4:	89 17       	cp	r24, r25
    55b6:	09 f0       	breq	.+2      	; 0x55ba <__vector_5+0xa6>
    55b8:	c2 c1       	rjmp	.+900    	; 0x593e <__vector_5+0x42a>
    55ba:	8f a1       	ldd	r24, Y+39	; 0x27
    55bc:	9f a5       	ldd	r25, Y+47	; 0x2f
    55be:	98 17       	cp	r25, r24
    55c0:	b8 f1       	brcs	.+110    	; 0x5630 <__vector_5+0x11c>
    55c2:	8f a1       	ldd	r24, Y+39	; 0x27
    55c4:	9f a5       	ldd	r25, Y+47	; 0x2f
    55c6:	89 17       	cp	r24, r25
    55c8:	09 f0       	breq	.+2      	; 0x55cc <__vector_5+0xb8>
    55ca:	b9 c1       	rjmp	.+882    	; 0x593e <__vector_5+0x42a>
    55cc:	8e a1       	ldd	r24, Y+38	; 0x26
    55ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    55d0:	98 17       	cp	r25, r24
    55d2:	70 f1       	brcs	.+92     	; 0x5630 <__vector_5+0x11c>
    55d4:	8e a1       	ldd	r24, Y+38	; 0x26
    55d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    55d8:	89 17       	cp	r24, r25
    55da:	09 f0       	breq	.+2      	; 0x55de <__vector_5+0xca>
    55dc:	b0 c1       	rjmp	.+864    	; 0x593e <__vector_5+0x42a>
    55de:	8d a1       	ldd	r24, Y+37	; 0x25
    55e0:	9d a5       	ldd	r25, Y+45	; 0x2d
    55e2:	98 17       	cp	r25, r24
    55e4:	28 f1       	brcs	.+74     	; 0x5630 <__vector_5+0x11c>
    55e6:	8d a1       	ldd	r24, Y+37	; 0x25
    55e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    55ea:	89 17       	cp	r24, r25
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <__vector_5+0xdc>
    55ee:	a7 c1       	rjmp	.+846    	; 0x593e <__vector_5+0x42a>
    55f0:	8c a1       	ldd	r24, Y+36	; 0x24
    55f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    55f4:	98 17       	cp	r25, r24
    55f6:	e0 f0       	brcs	.+56     	; 0x5630 <__vector_5+0x11c>
    55f8:	8c a1       	ldd	r24, Y+36	; 0x24
    55fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    55fc:	89 17       	cp	r24, r25
    55fe:	09 f0       	breq	.+2      	; 0x5602 <__vector_5+0xee>
    5600:	9e c1       	rjmp	.+828    	; 0x593e <__vector_5+0x42a>
    5602:	8b a1       	ldd	r24, Y+35	; 0x23
    5604:	9b a5       	ldd	r25, Y+43	; 0x2b
    5606:	98 17       	cp	r25, r24
    5608:	98 f0       	brcs	.+38     	; 0x5630 <__vector_5+0x11c>
    560a:	8b a1       	ldd	r24, Y+35	; 0x23
    560c:	9b a5       	ldd	r25, Y+43	; 0x2b
    560e:	89 17       	cp	r24, r25
    5610:	09 f0       	breq	.+2      	; 0x5614 <__vector_5+0x100>
    5612:	95 c1       	rjmp	.+810    	; 0x593e <__vector_5+0x42a>
    5614:	8a a1       	ldd	r24, Y+34	; 0x22
    5616:	9a a5       	ldd	r25, Y+42	; 0x2a
    5618:	98 17       	cp	r25, r24
    561a:	50 f0       	brcs	.+20     	; 0x5630 <__vector_5+0x11c>
    561c:	8a a1       	ldd	r24, Y+34	; 0x22
    561e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5620:	89 17       	cp	r24, r25
    5622:	09 f0       	breq	.+2      	; 0x5626 <__vector_5+0x112>
    5624:	8c c1       	rjmp	.+792    	; 0x593e <__vector_5+0x42a>
    5626:	89 a1       	ldd	r24, Y+33	; 0x21
    5628:	99 a5       	ldd	r25, Y+41	; 0x29
    562a:	98 17       	cp	r25, r24
    562c:	08 f0       	brcs	.+2      	; 0x5630 <__vector_5+0x11c>
    562e:	87 c1       	rjmp	.+782    	; 0x593e <__vector_5+0x42a>
   {
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
    5630:	80 91 a9 01 	lds	r24, 0x01A9
    5634:	89 8f       	std	Y+25, r24	; 0x19
    5636:	90 91 aa 01 	lds	r25, 0x01AA
    563a:	9a 8f       	std	Y+26, r25	; 0x1a
    563c:	80 91 ab 01 	lds	r24, 0x01AB
    5640:	8b 8f       	std	Y+27, r24	; 0x1b
    5642:	90 91 ac 01 	lds	r25, 0x01AC
    5646:	9c 8f       	std	Y+28, r25	; 0x1c
    5648:	80 91 ad 01 	lds	r24, 0x01AD
    564c:	8d 8f       	std	Y+29, r24	; 0x1d
    564e:	90 91 ae 01 	lds	r25, 0x01AE
    5652:	9e 8f       	std	Y+30, r25	; 0x1e
    5654:	80 91 af 01 	lds	r24, 0x01AF
    5658:	8f 8f       	std	Y+31, r24	; 0x1f
    565a:	90 91 b0 01 	lds	r25, 0x01B0
    565e:	98 a3       	std	Y+32, r25	; 0x20
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	89 ab       	std	Y+49, r24	; 0x31
    5664:	1a aa       	std	Y+50, r1	; 0x32
    5666:	1b aa       	std	Y+51, r1	; 0x33
    5668:	1c aa       	std	Y+52, r1	; 0x34
    566a:	1d aa       	std	Y+53, r1	; 0x35
    566c:	1e aa       	std	Y+54, r1	; 0x36
    566e:	1f aa       	std	Y+55, r1	; 0x37
    5670:	18 ae       	std	Y+56, r1	; 0x38
    5672:	99 8d       	ldd	r25, Y+25	; 0x19
    5674:	89 a9       	ldd	r24, Y+49	; 0x31
    5676:	98 0f       	add	r25, r24
    5678:	99 af       	std	Y+57, r25	; 0x39
    567a:	91 e0       	ldi	r25, 0x01	; 1
    567c:	22 96       	adiw	r28, 0x02	; 2
    567e:	9f af       	std	Y+63, r25	; 0x3f
    5680:	22 97       	sbiw	r28, 0x02	; 2
    5682:	89 ad       	ldd	r24, Y+57	; 0x39
    5684:	99 8d       	ldd	r25, Y+25	; 0x19
    5686:	89 17       	cp	r24, r25
    5688:	18 f0       	brcs	.+6      	; 0x5690 <__vector_5+0x17c>
    568a:	22 96       	adiw	r28, 0x02	; 2
    568c:	1f ae       	std	Y+63, r1	; 0x3f
    568e:	22 97       	sbiw	r28, 0x02	; 2
    5690:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5692:	9a a9       	ldd	r25, Y+50	; 0x32
    5694:	89 0f       	add	r24, r25
    5696:	8a af       	std	Y+58, r24	; 0x3a
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	23 96       	adiw	r28, 0x03	; 3
    569c:	8f af       	std	Y+63, r24	; 0x3f
    569e:	23 97       	sbiw	r28, 0x03	; 3
    56a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    56a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    56a4:	98 17       	cp	r25, r24
    56a6:	18 f0       	brcs	.+6      	; 0x56ae <__vector_5+0x19a>
    56a8:	23 96       	adiw	r28, 0x03	; 3
    56aa:	1f ae       	std	Y+63, r1	; 0x3f
    56ac:	23 97       	sbiw	r28, 0x03	; 3
    56ae:	22 96       	adiw	r28, 0x02	; 2
    56b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    56b2:	22 97       	sbiw	r28, 0x02	; 2
    56b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    56b6:	98 0f       	add	r25, r24
    56b8:	24 96       	adiw	r28, 0x04	; 4
    56ba:	9f af       	std	Y+63, r25	; 0x3f
    56bc:	24 97       	sbiw	r28, 0x04	; 4
    56be:	91 e0       	ldi	r25, 0x01	; 1
    56c0:	25 96       	adiw	r28, 0x05	; 5
    56c2:	9f af       	std	Y+63, r25	; 0x3f
    56c4:	25 97       	sbiw	r28, 0x05	; 5
    56c6:	24 96       	adiw	r28, 0x04	; 4
    56c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    56ca:	24 97       	sbiw	r28, 0x04	; 4
    56cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    56ce:	89 17       	cp	r24, r25
    56d0:	18 f0       	brcs	.+6      	; 0x56d8 <__vector_5+0x1c4>
    56d2:	25 96       	adiw	r28, 0x05	; 5
    56d4:	1f ae       	std	Y+63, r1	; 0x3f
    56d6:	25 97       	sbiw	r28, 0x05	; 5
    56d8:	23 96       	adiw	r28, 0x03	; 3
    56da:	8f ad       	ldd	r24, Y+63	; 0x3f
    56dc:	23 97       	sbiw	r28, 0x03	; 3
    56de:	25 96       	adiw	r28, 0x05	; 5
    56e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    56e2:	25 97       	sbiw	r28, 0x05	; 5
    56e4:	89 2b       	or	r24, r25
    56e6:	23 96       	adiw	r28, 0x03	; 3
    56e8:	8f af       	std	Y+63, r24	; 0x3f
    56ea:	23 97       	sbiw	r28, 0x03	; 3
    56ec:	24 96       	adiw	r28, 0x04	; 4
    56ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    56f0:	24 97       	sbiw	r28, 0x04	; 4
    56f2:	8a af       	std	Y+58, r24	; 0x3a
    56f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    56f6:	8b a9       	ldd	r24, Y+51	; 0x33
    56f8:	98 0f       	add	r25, r24
    56fa:	9b af       	std	Y+59, r25	; 0x3b
    56fc:	91 e0       	ldi	r25, 0x01	; 1
    56fe:	26 96       	adiw	r28, 0x06	; 6
    5700:	9f af       	std	Y+63, r25	; 0x3f
    5702:	26 97       	sbiw	r28, 0x06	; 6
    5704:	8b ad       	ldd	r24, Y+59	; 0x3b
    5706:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5708:	89 17       	cp	r24, r25
    570a:	18 f0       	brcs	.+6      	; 0x5712 <__vector_5+0x1fe>
    570c:	26 96       	adiw	r28, 0x06	; 6
    570e:	1f ae       	std	Y+63, r1	; 0x3f
    5710:	26 97       	sbiw	r28, 0x06	; 6
    5712:	23 96       	adiw	r28, 0x03	; 3
    5714:	8f ad       	ldd	r24, Y+63	; 0x3f
    5716:	23 97       	sbiw	r28, 0x03	; 3
    5718:	9b ad       	ldd	r25, Y+59	; 0x3b
    571a:	89 0f       	add	r24, r25
    571c:	27 96       	adiw	r28, 0x07	; 7
    571e:	8f af       	std	Y+63, r24	; 0x3f
    5720:	27 97       	sbiw	r28, 0x07	; 7
    5722:	81 e0       	ldi	r24, 0x01	; 1
    5724:	28 96       	adiw	r28, 0x08	; 8
    5726:	8f af       	std	Y+63, r24	; 0x3f
    5728:	28 97       	sbiw	r28, 0x08	; 8
    572a:	27 96       	adiw	r28, 0x07	; 7
    572c:	9f ad       	ldd	r25, Y+63	; 0x3f
    572e:	27 97       	sbiw	r28, 0x07	; 7
    5730:	8b ad       	ldd	r24, Y+59	; 0x3b
    5732:	98 17       	cp	r25, r24
    5734:	18 f0       	brcs	.+6      	; 0x573c <__vector_5+0x228>
    5736:	28 96       	adiw	r28, 0x08	; 8
    5738:	1f ae       	std	Y+63, r1	; 0x3f
    573a:	28 97       	sbiw	r28, 0x08	; 8
    573c:	26 96       	adiw	r28, 0x06	; 6
    573e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5740:	26 97       	sbiw	r28, 0x06	; 6
    5742:	28 96       	adiw	r28, 0x08	; 8
    5744:	8f ad       	ldd	r24, Y+63	; 0x3f
    5746:	28 97       	sbiw	r28, 0x08	; 8
    5748:	98 2b       	or	r25, r24
    574a:	26 96       	adiw	r28, 0x06	; 6
    574c:	9f af       	std	Y+63, r25	; 0x3f
    574e:	26 97       	sbiw	r28, 0x06	; 6
    5750:	27 96       	adiw	r28, 0x07	; 7
    5752:	9f ad       	ldd	r25, Y+63	; 0x3f
    5754:	27 97       	sbiw	r28, 0x07	; 7
    5756:	9b af       	std	Y+59, r25	; 0x3b
    5758:	8c 8d       	ldd	r24, Y+28	; 0x1c
    575a:	9c a9       	ldd	r25, Y+52	; 0x34
    575c:	89 0f       	add	r24, r25
    575e:	8c af       	std	Y+60, r24	; 0x3c
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	29 96       	adiw	r28, 0x09	; 9
    5764:	8f af       	std	Y+63, r24	; 0x3f
    5766:	29 97       	sbiw	r28, 0x09	; 9
    5768:	9c ad       	ldd	r25, Y+60	; 0x3c
    576a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    576c:	98 17       	cp	r25, r24
    576e:	18 f0       	brcs	.+6      	; 0x5776 <__vector_5+0x262>
    5770:	29 96       	adiw	r28, 0x09	; 9
    5772:	1f ae       	std	Y+63, r1	; 0x3f
    5774:	29 97       	sbiw	r28, 0x09	; 9
    5776:	26 96       	adiw	r28, 0x06	; 6
    5778:	9f ad       	ldd	r25, Y+63	; 0x3f
    577a:	26 97       	sbiw	r28, 0x06	; 6
    577c:	8c ad       	ldd	r24, Y+60	; 0x3c
    577e:	98 0f       	add	r25, r24
    5780:	2a 96       	adiw	r28, 0x0a	; 10
    5782:	9f af       	std	Y+63, r25	; 0x3f
    5784:	2a 97       	sbiw	r28, 0x0a	; 10
    5786:	91 e0       	ldi	r25, 0x01	; 1
    5788:	2b 96       	adiw	r28, 0x0b	; 11
    578a:	9f af       	std	Y+63, r25	; 0x3f
    578c:	2b 97       	sbiw	r28, 0x0b	; 11
    578e:	2a 96       	adiw	r28, 0x0a	; 10
    5790:	8f ad       	ldd	r24, Y+63	; 0x3f
    5792:	2a 97       	sbiw	r28, 0x0a	; 10
    5794:	9c ad       	ldd	r25, Y+60	; 0x3c
    5796:	89 17       	cp	r24, r25
    5798:	18 f0       	brcs	.+6      	; 0x57a0 <__vector_5+0x28c>
    579a:	2b 96       	adiw	r28, 0x0b	; 11
    579c:	1f ae       	std	Y+63, r1	; 0x3f
    579e:	2b 97       	sbiw	r28, 0x0b	; 11
    57a0:	29 96       	adiw	r28, 0x09	; 9
    57a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    57a4:	29 97       	sbiw	r28, 0x09	; 9
    57a6:	2b 96       	adiw	r28, 0x0b	; 11
    57a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    57aa:	2b 97       	sbiw	r28, 0x0b	; 11
    57ac:	89 2b       	or	r24, r25
    57ae:	29 96       	adiw	r28, 0x09	; 9
    57b0:	8f af       	std	Y+63, r24	; 0x3f
    57b2:	29 97       	sbiw	r28, 0x09	; 9
    57b4:	2a 96       	adiw	r28, 0x0a	; 10
    57b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    57b8:	2a 97       	sbiw	r28, 0x0a	; 10
    57ba:	8c af       	std	Y+60, r24	; 0x3c
    57bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    57be:	8d a9       	ldd	r24, Y+53	; 0x35
    57c0:	98 0f       	add	r25, r24
    57c2:	9d af       	std	Y+61, r25	; 0x3d
    57c4:	91 e0       	ldi	r25, 0x01	; 1
    57c6:	2c 96       	adiw	r28, 0x0c	; 12
    57c8:	9f af       	std	Y+63, r25	; 0x3f
    57ca:	2c 97       	sbiw	r28, 0x0c	; 12
    57cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    57ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    57d0:	89 17       	cp	r24, r25
    57d2:	18 f0       	brcs	.+6      	; 0x57da <__vector_5+0x2c6>
    57d4:	2c 96       	adiw	r28, 0x0c	; 12
    57d6:	1f ae       	std	Y+63, r1	; 0x3f
    57d8:	2c 97       	sbiw	r28, 0x0c	; 12
    57da:	29 96       	adiw	r28, 0x09	; 9
    57dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    57de:	29 97       	sbiw	r28, 0x09	; 9
    57e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    57e2:	89 0f       	add	r24, r25
    57e4:	2d 96       	adiw	r28, 0x0d	; 13
    57e6:	8f af       	std	Y+63, r24	; 0x3f
    57e8:	2d 97       	sbiw	r28, 0x0d	; 13
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	2e 96       	adiw	r28, 0x0e	; 14
    57ee:	8f af       	std	Y+63, r24	; 0x3f
    57f0:	2e 97       	sbiw	r28, 0x0e	; 14
    57f2:	2d 96       	adiw	r28, 0x0d	; 13
    57f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    57f6:	2d 97       	sbiw	r28, 0x0d	; 13
    57f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    57fa:	98 17       	cp	r25, r24
    57fc:	18 f0       	brcs	.+6      	; 0x5804 <__vector_5+0x2f0>
    57fe:	2e 96       	adiw	r28, 0x0e	; 14
    5800:	1f ae       	std	Y+63, r1	; 0x3f
    5802:	2e 97       	sbiw	r28, 0x0e	; 14
    5804:	2c 96       	adiw	r28, 0x0c	; 12
    5806:	9f ad       	ldd	r25, Y+63	; 0x3f
    5808:	2c 97       	sbiw	r28, 0x0c	; 12
    580a:	2e 96       	adiw	r28, 0x0e	; 14
    580c:	8f ad       	ldd	r24, Y+63	; 0x3f
    580e:	2e 97       	sbiw	r28, 0x0e	; 14
    5810:	98 2b       	or	r25, r24
    5812:	2c 96       	adiw	r28, 0x0c	; 12
    5814:	9f af       	std	Y+63, r25	; 0x3f
    5816:	2c 97       	sbiw	r28, 0x0c	; 12
    5818:	2d 96       	adiw	r28, 0x0d	; 13
    581a:	9f ad       	ldd	r25, Y+63	; 0x3f
    581c:	2d 97       	sbiw	r28, 0x0d	; 13
    581e:	9d af       	std	Y+61, r25	; 0x3d
    5820:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5822:	9e a9       	ldd	r25, Y+54	; 0x36
    5824:	89 0f       	add	r24, r25
    5826:	8e af       	std	Y+62, r24	; 0x3e
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	2f 96       	adiw	r28, 0x0f	; 15
    582c:	8f af       	std	Y+63, r24	; 0x3f
    582e:	2f 97       	sbiw	r28, 0x0f	; 15
    5830:	9e ad       	ldd	r25, Y+62	; 0x3e
    5832:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5834:	98 17       	cp	r25, r24
    5836:	18 f0       	brcs	.+6      	; 0x583e <__vector_5+0x32a>
    5838:	2f 96       	adiw	r28, 0x0f	; 15
    583a:	1f ae       	std	Y+63, r1	; 0x3f
    583c:	2f 97       	sbiw	r28, 0x0f	; 15
    583e:	2c 96       	adiw	r28, 0x0c	; 12
    5840:	9f ad       	ldd	r25, Y+63	; 0x3f
    5842:	2c 97       	sbiw	r28, 0x0c	; 12
    5844:	8e ad       	ldd	r24, Y+62	; 0x3e
    5846:	98 0f       	add	r25, r24
    5848:	60 96       	adiw	r28, 0x10	; 16
    584a:	9f af       	std	Y+63, r25	; 0x3f
    584c:	60 97       	sbiw	r28, 0x10	; 16
    584e:	91 e0       	ldi	r25, 0x01	; 1
    5850:	61 96       	adiw	r28, 0x11	; 17
    5852:	9f af       	std	Y+63, r25	; 0x3f
    5854:	61 97       	sbiw	r28, 0x11	; 17
    5856:	60 96       	adiw	r28, 0x10	; 16
    5858:	8f ad       	ldd	r24, Y+63	; 0x3f
    585a:	60 97       	sbiw	r28, 0x10	; 16
    585c:	9e ad       	ldd	r25, Y+62	; 0x3e
    585e:	89 17       	cp	r24, r25
    5860:	18 f0       	brcs	.+6      	; 0x5868 <__vector_5+0x354>
    5862:	61 96       	adiw	r28, 0x11	; 17
    5864:	1f ae       	std	Y+63, r1	; 0x3f
    5866:	61 97       	sbiw	r28, 0x11	; 17
    5868:	2f 96       	adiw	r28, 0x0f	; 15
    586a:	8f ad       	ldd	r24, Y+63	; 0x3f
    586c:	2f 97       	sbiw	r28, 0x0f	; 15
    586e:	61 96       	adiw	r28, 0x11	; 17
    5870:	9f ad       	ldd	r25, Y+63	; 0x3f
    5872:	61 97       	sbiw	r28, 0x11	; 17
    5874:	89 2b       	or	r24, r25
    5876:	2f 96       	adiw	r28, 0x0f	; 15
    5878:	8f af       	std	Y+63, r24	; 0x3f
    587a:	2f 97       	sbiw	r28, 0x0f	; 15
    587c:	60 96       	adiw	r28, 0x10	; 16
    587e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5880:	60 97       	sbiw	r28, 0x10	; 16
    5882:	8e af       	std	Y+62, r24	; 0x3e
    5884:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5886:	8f a9       	ldd	r24, Y+55	; 0x37
    5888:	98 0f       	add	r25, r24
    588a:	9f af       	std	Y+63, r25	; 0x3f
    588c:	91 e0       	ldi	r25, 0x01	; 1
    588e:	62 96       	adiw	r28, 0x12	; 18
    5890:	9f af       	std	Y+63, r25	; 0x3f
    5892:	62 97       	sbiw	r28, 0x12	; 18
    5894:	8f ad       	ldd	r24, Y+63	; 0x3f
    5896:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5898:	89 17       	cp	r24, r25
    589a:	18 f0       	brcs	.+6      	; 0x58a2 <__vector_5+0x38e>
    589c:	62 96       	adiw	r28, 0x12	; 18
    589e:	1f ae       	std	Y+63, r1	; 0x3f
    58a0:	62 97       	sbiw	r28, 0x12	; 18
    58a2:	2f 96       	adiw	r28, 0x0f	; 15
    58a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    58a6:	2f 97       	sbiw	r28, 0x0f	; 15
    58a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    58aa:	89 0f       	add	r24, r25
    58ac:	63 96       	adiw	r28, 0x13	; 19
    58ae:	8f af       	std	Y+63, r24	; 0x3f
    58b0:	63 97       	sbiw	r28, 0x13	; 19
    58b2:	81 e0       	ldi	r24, 0x01	; 1
    58b4:	64 96       	adiw	r28, 0x14	; 20
    58b6:	8f af       	std	Y+63, r24	; 0x3f
    58b8:	64 97       	sbiw	r28, 0x14	; 20
    58ba:	63 96       	adiw	r28, 0x13	; 19
    58bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    58be:	63 97       	sbiw	r28, 0x13	; 19
    58c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    58c2:	98 17       	cp	r25, r24
    58c4:	18 f0       	brcs	.+6      	; 0x58cc <__vector_5+0x3b8>
    58c6:	64 96       	adiw	r28, 0x14	; 20
    58c8:	1f ae       	std	Y+63, r1	; 0x3f
    58ca:	64 97       	sbiw	r28, 0x14	; 20
    58cc:	62 96       	adiw	r28, 0x12	; 18
    58ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    58d0:	62 97       	sbiw	r28, 0x12	; 18
    58d2:	64 96       	adiw	r28, 0x14	; 20
    58d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    58d6:	64 97       	sbiw	r28, 0x14	; 20
    58d8:	98 2b       	or	r25, r24
    58da:	62 96       	adiw	r28, 0x12	; 18
    58dc:	9f af       	std	Y+63, r25	; 0x3f
    58de:	62 97       	sbiw	r28, 0x12	; 18
    58e0:	63 96       	adiw	r28, 0x13	; 19
    58e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    58e4:	63 97       	sbiw	r28, 0x13	; 19
    58e6:	9f af       	std	Y+63, r25	; 0x3f
    58e8:	88 a1       	ldd	r24, Y+32	; 0x20
    58ea:	98 ad       	ldd	r25, Y+56	; 0x38
    58ec:	89 0f       	add	r24, r25
    58ee:	21 96       	adiw	r28, 0x01	; 1
    58f0:	8f af       	std	Y+63, r24	; 0x3f
    58f2:	21 97       	sbiw	r28, 0x01	; 1
    58f4:	62 96       	adiw	r28, 0x12	; 18
    58f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    58f8:	62 97       	sbiw	r28, 0x12	; 18
    58fa:	21 96       	adiw	r28, 0x01	; 1
    58fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    58fe:	21 97       	sbiw	r28, 0x01	; 1
    5900:	89 0f       	add	r24, r25
    5902:	21 96       	adiw	r28, 0x01	; 1
    5904:	8f af       	std	Y+63, r24	; 0x3f
    5906:	21 97       	sbiw	r28, 0x01	; 1
    5908:	29 ad       	ldd	r18, Y+57	; 0x39
    590a:	3a ad       	ldd	r19, Y+58	; 0x3a
    590c:	4b ad       	ldd	r20, Y+59	; 0x3b
    590e:	5c ad       	ldd	r21, Y+60	; 0x3c
    5910:	6d ad       	ldd	r22, Y+61	; 0x3d
    5912:	7e ad       	ldd	r23, Y+62	; 0x3e
    5914:	8f ad       	ldd	r24, Y+63	; 0x3f
    5916:	21 96       	adiw	r28, 0x01	; 1
    5918:	9f ad       	ldd	r25, Y+63	; 0x3f
    591a:	21 97       	sbiw	r28, 0x01	; 1
    591c:	20 93 a9 01 	sts	0x01A9, r18
    5920:	30 93 aa 01 	sts	0x01AA, r19
    5924:	40 93 ab 01 	sts	0x01AB, r20
    5928:	50 93 ac 01 	sts	0x01AC, r21
    592c:	60 93 ad 01 	sts	0x01AD, r22
    5930:	70 93 ae 01 	sts	0x01AE, r23
    5934:	80 93 af 01 	sts	0x01AF, r24
    5938:	90 93 b0 01 	sts	0x01B0, r25
    593c:	6e c2       	rjmp	.+1244   	; 0x5e1a <__vector_5+0x906>
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    593e:	80 91 a9 01 	lds	r24, 0x01A9
    5942:	89 8b       	std	Y+17, r24	; 0x11
    5944:	90 91 aa 01 	lds	r25, 0x01AA
    5948:	9a 8b       	std	Y+18, r25	; 0x12
    594a:	80 91 ab 01 	lds	r24, 0x01AB
    594e:	8b 8b       	std	Y+19, r24	; 0x13
    5950:	90 91 ac 01 	lds	r25, 0x01AC
    5954:	9c 8b       	std	Y+20, r25	; 0x14
    5956:	80 91 ad 01 	lds	r24, 0x01AD
    595a:	8d 8b       	std	Y+21, r24	; 0x15
    595c:	90 91 ae 01 	lds	r25, 0x01AE
    5960:	9e 8b       	std	Y+22, r25	; 0x16
    5962:	80 91 af 01 	lds	r24, 0x01AF
    5966:	8f 8b       	std	Y+23, r24	; 0x17
    5968:	90 91 b0 01 	lds	r25, 0x01B0
    596c:	98 8f       	std	Y+24, r25	; 0x18
    596e:	80 91 a1 01 	lds	r24, 0x01A1
    5972:	89 87       	std	Y+9, r24	; 0x09
    5974:	90 91 a2 01 	lds	r25, 0x01A2
    5978:	9a 87       	std	Y+10, r25	; 0x0a
    597a:	80 91 a3 01 	lds	r24, 0x01A3
    597e:	8b 87       	std	Y+11, r24	; 0x0b
    5980:	90 91 a4 01 	lds	r25, 0x01A4
    5984:	9c 87       	std	Y+12, r25	; 0x0c
    5986:	80 91 a5 01 	lds	r24, 0x01A5
    598a:	8d 87       	std	Y+13, r24	; 0x0d
    598c:	90 91 a6 01 	lds	r25, 0x01A6
    5990:	9e 87       	std	Y+14, r25	; 0x0e
    5992:	80 91 a7 01 	lds	r24, 0x01A7
    5996:	8f 87       	std	Y+15, r24	; 0x0f
    5998:	90 91 a8 01 	lds	r25, 0x01A8
    599c:	98 8b       	std	Y+16, r25	; 0x10
    599e:	89 89       	ldd	r24, Y+17	; 0x11
    59a0:	99 85       	ldd	r25, Y+9	; 0x09
    59a2:	89 17       	cp	r24, r25
    59a4:	09 f0       	breq	.+2      	; 0x59a8 <__vector_5+0x494>
    59a6:	1e c2       	rjmp	.+1084   	; 0x5de4 <__vector_5+0x8d0>
    59a8:	8a 89       	ldd	r24, Y+18	; 0x12
    59aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ac:	89 17       	cp	r24, r25
    59ae:	09 f0       	breq	.+2      	; 0x59b2 <__vector_5+0x49e>
    59b0:	19 c2       	rjmp	.+1074   	; 0x5de4 <__vector_5+0x8d0>
    59b2:	8b 89       	ldd	r24, Y+19	; 0x13
    59b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    59b6:	89 17       	cp	r24, r25
    59b8:	09 f0       	breq	.+2      	; 0x59bc <__vector_5+0x4a8>
    59ba:	14 c2       	rjmp	.+1064   	; 0x5de4 <__vector_5+0x8d0>
    59bc:	8c 89       	ldd	r24, Y+20	; 0x14
    59be:	9c 85       	ldd	r25, Y+12	; 0x0c
    59c0:	89 17       	cp	r24, r25
    59c2:	09 f0       	breq	.+2      	; 0x59c6 <__vector_5+0x4b2>
    59c4:	0f c2       	rjmp	.+1054   	; 0x5de4 <__vector_5+0x8d0>
    59c6:	8d 89       	ldd	r24, Y+21	; 0x15
    59c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    59ca:	89 17       	cp	r24, r25
    59cc:	09 f0       	breq	.+2      	; 0x59d0 <__vector_5+0x4bc>
    59ce:	0a c2       	rjmp	.+1044   	; 0x5de4 <__vector_5+0x8d0>
    59d0:	8e 89       	ldd	r24, Y+22	; 0x16
    59d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    59d4:	89 17       	cp	r24, r25
    59d6:	09 f0       	breq	.+2      	; 0x59da <__vector_5+0x4c6>
    59d8:	05 c2       	rjmp	.+1034   	; 0x5de4 <__vector_5+0x8d0>
    59da:	8f 89       	ldd	r24, Y+23	; 0x17
    59dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    59de:	89 17       	cp	r24, r25
    59e0:	09 f0       	breq	.+2      	; 0x59e4 <__vector_5+0x4d0>
    59e2:	00 c2       	rjmp	.+1024   	; 0x5de4 <__vector_5+0x8d0>
    59e4:	88 8d       	ldd	r24, Y+24	; 0x18
    59e6:	98 89       	ldd	r25, Y+16	; 0x10
    59e8:	89 17       	cp	r24, r25
    59ea:	09 f0       	breq	.+2      	; 0x59ee <__vector_5+0x4da>
    59ec:	fb c1       	rjmp	.+1014   	; 0x5de4 <__vector_5+0x8d0>
   {
      //set the timer value to the remaining timing
      TCNT2_R=((T2_TICKS-1)-Gu32_T2LastOVTicks);
    59ee:	e4 e4       	ldi	r30, 0x44	; 68
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	80 91 b1 01 	lds	r24, 0x01B1
    59f6:	80 95       	com	r24
    59f8:	80 83       	st	Z, r24
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
    59fa:	80 91 a9 01 	lds	r24, 0x01A9
    59fe:	89 83       	std	Y+1, r24	; 0x01
    5a00:	90 91 aa 01 	lds	r25, 0x01AA
    5a04:	9a 83       	std	Y+2, r25	; 0x02
    5a06:	80 91 ab 01 	lds	r24, 0x01AB
    5a0a:	8b 83       	std	Y+3, r24	; 0x03
    5a0c:	90 91 ac 01 	lds	r25, 0x01AC
    5a10:	9c 83       	std	Y+4, r25	; 0x04
    5a12:	80 91 ad 01 	lds	r24, 0x01AD
    5a16:	8d 83       	std	Y+5, r24	; 0x05
    5a18:	90 91 ae 01 	lds	r25, 0x01AE
    5a1c:	9e 83       	std	Y+6, r25	; 0x06
    5a1e:	80 91 af 01 	lds	r24, 0x01AF
    5a22:	8f 83       	std	Y+7, r24	; 0x07
    5a24:	90 91 b0 01 	lds	r25, 0x01B0
    5a28:	98 87       	std	Y+8, r25	; 0x08
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	65 96       	adiw	r28, 0x15	; 21
    5a2e:	8f af       	std	Y+63, r24	; 0x3f
    5a30:	65 97       	sbiw	r28, 0x15	; 21
    5a32:	66 96       	adiw	r28, 0x16	; 22
    5a34:	1f ae       	std	Y+63, r1	; 0x3f
    5a36:	66 97       	sbiw	r28, 0x16	; 22
    5a38:	67 96       	adiw	r28, 0x17	; 23
    5a3a:	1f ae       	std	Y+63, r1	; 0x3f
    5a3c:	67 97       	sbiw	r28, 0x17	; 23
    5a3e:	68 96       	adiw	r28, 0x18	; 24
    5a40:	1f ae       	std	Y+63, r1	; 0x3f
    5a42:	68 97       	sbiw	r28, 0x18	; 24
    5a44:	69 96       	adiw	r28, 0x19	; 25
    5a46:	1f ae       	std	Y+63, r1	; 0x3f
    5a48:	69 97       	sbiw	r28, 0x19	; 25
    5a4a:	6a 96       	adiw	r28, 0x1a	; 26
    5a4c:	1f ae       	std	Y+63, r1	; 0x3f
    5a4e:	6a 97       	sbiw	r28, 0x1a	; 26
    5a50:	6b 96       	adiw	r28, 0x1b	; 27
    5a52:	1f ae       	std	Y+63, r1	; 0x3f
    5a54:	6b 97       	sbiw	r28, 0x1b	; 27
    5a56:	6c 96       	adiw	r28, 0x1c	; 28
    5a58:	1f ae       	std	Y+63, r1	; 0x3f
    5a5a:	6c 97       	sbiw	r28, 0x1c	; 28
    5a5c:	99 81       	ldd	r25, Y+1	; 0x01
    5a5e:	65 96       	adiw	r28, 0x15	; 21
    5a60:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a62:	65 97       	sbiw	r28, 0x15	; 21
    5a64:	98 0f       	add	r25, r24
    5a66:	6d 96       	adiw	r28, 0x1d	; 29
    5a68:	9f af       	std	Y+63, r25	; 0x3f
    5a6a:	6d 97       	sbiw	r28, 0x1d	; 29
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	a5 96       	adiw	r28, 0x25	; 37
    5a70:	9f af       	std	Y+63, r25	; 0x3f
    5a72:	a5 97       	sbiw	r28, 0x25	; 37
    5a74:	6d 96       	adiw	r28, 0x1d	; 29
    5a76:	8f ad       	ldd	r24, Y+63	; 0x3f
    5a78:	6d 97       	sbiw	r28, 0x1d	; 29
    5a7a:	99 81       	ldd	r25, Y+1	; 0x01
    5a7c:	89 17       	cp	r24, r25
    5a7e:	18 f0       	brcs	.+6      	; 0x5a86 <__vector_5+0x572>
    5a80:	a5 96       	adiw	r28, 0x25	; 37
    5a82:	1f ae       	std	Y+63, r1	; 0x3f
    5a84:	a5 97       	sbiw	r28, 0x25	; 37
    5a86:	8a 81       	ldd	r24, Y+2	; 0x02
    5a88:	66 96       	adiw	r28, 0x16	; 22
    5a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5a8c:	66 97       	sbiw	r28, 0x16	; 22
    5a8e:	89 0f       	add	r24, r25
    5a90:	6e 96       	adiw	r28, 0x1e	; 30
    5a92:	8f af       	std	Y+63, r24	; 0x3f
    5a94:	6e 97       	sbiw	r28, 0x1e	; 30
    5a96:	81 e0       	ldi	r24, 0x01	; 1
    5a98:	a6 96       	adiw	r28, 0x26	; 38
    5a9a:	8f af       	std	Y+63, r24	; 0x3f
    5a9c:	a6 97       	sbiw	r28, 0x26	; 38
    5a9e:	6e 96       	adiw	r28, 0x1e	; 30
    5aa0:	9f ad       	ldd	r25, Y+63	; 0x3f
    5aa2:	6e 97       	sbiw	r28, 0x1e	; 30
    5aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    5aa6:	98 17       	cp	r25, r24
    5aa8:	18 f0       	brcs	.+6      	; 0x5ab0 <__vector_5+0x59c>
    5aaa:	a6 96       	adiw	r28, 0x26	; 38
    5aac:	1f ae       	std	Y+63, r1	; 0x3f
    5aae:	a6 97       	sbiw	r28, 0x26	; 38
    5ab0:	a5 96       	adiw	r28, 0x25	; 37
    5ab2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ab4:	a5 97       	sbiw	r28, 0x25	; 37
    5ab6:	6e 96       	adiw	r28, 0x1e	; 30
    5ab8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5aba:	6e 97       	sbiw	r28, 0x1e	; 30
    5abc:	98 0f       	add	r25, r24
    5abe:	a7 96       	adiw	r28, 0x27	; 39
    5ac0:	9f af       	std	Y+63, r25	; 0x3f
    5ac2:	a7 97       	sbiw	r28, 0x27	; 39
    5ac4:	91 e0       	ldi	r25, 0x01	; 1
    5ac6:	a8 96       	adiw	r28, 0x28	; 40
    5ac8:	9f af       	std	Y+63, r25	; 0x3f
    5aca:	a8 97       	sbiw	r28, 0x28	; 40
    5acc:	a7 96       	adiw	r28, 0x27	; 39
    5ace:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ad0:	a7 97       	sbiw	r28, 0x27	; 39
    5ad2:	6e 96       	adiw	r28, 0x1e	; 30
    5ad4:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ad6:	6e 97       	sbiw	r28, 0x1e	; 30
    5ad8:	89 17       	cp	r24, r25
    5ada:	18 f0       	brcs	.+6      	; 0x5ae2 <__vector_5+0x5ce>
    5adc:	a8 96       	adiw	r28, 0x28	; 40
    5ade:	1f ae       	std	Y+63, r1	; 0x3f
    5ae0:	a8 97       	sbiw	r28, 0x28	; 40
    5ae2:	a6 96       	adiw	r28, 0x26	; 38
    5ae4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5ae6:	a6 97       	sbiw	r28, 0x26	; 38
    5ae8:	a8 96       	adiw	r28, 0x28	; 40
    5aea:	9f ad       	ldd	r25, Y+63	; 0x3f
    5aec:	a8 97       	sbiw	r28, 0x28	; 40
    5aee:	89 2b       	or	r24, r25
    5af0:	a6 96       	adiw	r28, 0x26	; 38
    5af2:	8f af       	std	Y+63, r24	; 0x3f
    5af4:	a6 97       	sbiw	r28, 0x26	; 38
    5af6:	a7 96       	adiw	r28, 0x27	; 39
    5af8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5afa:	a7 97       	sbiw	r28, 0x27	; 39
    5afc:	6e 96       	adiw	r28, 0x1e	; 30
    5afe:	8f af       	std	Y+63, r24	; 0x3f
    5b00:	6e 97       	sbiw	r28, 0x1e	; 30
    5b02:	9b 81       	ldd	r25, Y+3	; 0x03
    5b04:	67 96       	adiw	r28, 0x17	; 23
    5b06:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b08:	67 97       	sbiw	r28, 0x17	; 23
    5b0a:	98 0f       	add	r25, r24
    5b0c:	6f 96       	adiw	r28, 0x1f	; 31
    5b0e:	9f af       	std	Y+63, r25	; 0x3f
    5b10:	6f 97       	sbiw	r28, 0x1f	; 31
    5b12:	91 e0       	ldi	r25, 0x01	; 1
    5b14:	a9 96       	adiw	r28, 0x29	; 41
    5b16:	9f af       	std	Y+63, r25	; 0x3f
    5b18:	a9 97       	sbiw	r28, 0x29	; 41
    5b1a:	6f 96       	adiw	r28, 0x1f	; 31
    5b1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b1e:	6f 97       	sbiw	r28, 0x1f	; 31
    5b20:	9b 81       	ldd	r25, Y+3	; 0x03
    5b22:	89 17       	cp	r24, r25
    5b24:	18 f0       	brcs	.+6      	; 0x5b2c <__vector_5+0x618>
    5b26:	a9 96       	adiw	r28, 0x29	; 41
    5b28:	1f ae       	std	Y+63, r1	; 0x3f
    5b2a:	a9 97       	sbiw	r28, 0x29	; 41
    5b2c:	a6 96       	adiw	r28, 0x26	; 38
    5b2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b30:	a6 97       	sbiw	r28, 0x26	; 38
    5b32:	6f 96       	adiw	r28, 0x1f	; 31
    5b34:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b36:	6f 97       	sbiw	r28, 0x1f	; 31
    5b38:	89 0f       	add	r24, r25
    5b3a:	aa 96       	adiw	r28, 0x2a	; 42
    5b3c:	8f af       	std	Y+63, r24	; 0x3f
    5b3e:	aa 97       	sbiw	r28, 0x2a	; 42
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	ab 96       	adiw	r28, 0x2b	; 43
    5b44:	8f af       	std	Y+63, r24	; 0x3f
    5b46:	ab 97       	sbiw	r28, 0x2b	; 43
    5b48:	aa 96       	adiw	r28, 0x2a	; 42
    5b4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b4c:	aa 97       	sbiw	r28, 0x2a	; 42
    5b4e:	6f 96       	adiw	r28, 0x1f	; 31
    5b50:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b52:	6f 97       	sbiw	r28, 0x1f	; 31
    5b54:	98 17       	cp	r25, r24
    5b56:	18 f0       	brcs	.+6      	; 0x5b5e <__vector_5+0x64a>
    5b58:	ab 96       	adiw	r28, 0x2b	; 43
    5b5a:	1f ae       	std	Y+63, r1	; 0x3f
    5b5c:	ab 97       	sbiw	r28, 0x2b	; 43
    5b5e:	a9 96       	adiw	r28, 0x29	; 41
    5b60:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b62:	a9 97       	sbiw	r28, 0x29	; 41
    5b64:	ab 96       	adiw	r28, 0x2b	; 43
    5b66:	8f ad       	ldd	r24, Y+63	; 0x3f
    5b68:	ab 97       	sbiw	r28, 0x2b	; 43
    5b6a:	98 2b       	or	r25, r24
    5b6c:	a9 96       	adiw	r28, 0x29	; 41
    5b6e:	9f af       	std	Y+63, r25	; 0x3f
    5b70:	a9 97       	sbiw	r28, 0x29	; 41
    5b72:	aa 96       	adiw	r28, 0x2a	; 42
    5b74:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b76:	aa 97       	sbiw	r28, 0x2a	; 42
    5b78:	6f 96       	adiw	r28, 0x1f	; 31
    5b7a:	9f af       	std	Y+63, r25	; 0x3f
    5b7c:	6f 97       	sbiw	r28, 0x1f	; 31
    5b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    5b80:	68 96       	adiw	r28, 0x18	; 24
    5b82:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b84:	68 97       	sbiw	r28, 0x18	; 24
    5b86:	89 0f       	add	r24, r25
    5b88:	a0 96       	adiw	r28, 0x20	; 32
    5b8a:	8f af       	std	Y+63, r24	; 0x3f
    5b8c:	a0 97       	sbiw	r28, 0x20	; 32
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	ac 96       	adiw	r28, 0x2c	; 44
    5b92:	8f af       	std	Y+63, r24	; 0x3f
    5b94:	ac 97       	sbiw	r28, 0x2c	; 44
    5b96:	a0 96       	adiw	r28, 0x20	; 32
    5b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b9a:	a0 97       	sbiw	r28, 0x20	; 32
    5b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    5b9e:	98 17       	cp	r25, r24
    5ba0:	18 f0       	brcs	.+6      	; 0x5ba8 <__vector_5+0x694>
    5ba2:	ac 96       	adiw	r28, 0x2c	; 44
    5ba4:	1f ae       	std	Y+63, r1	; 0x3f
    5ba6:	ac 97       	sbiw	r28, 0x2c	; 44
    5ba8:	a9 96       	adiw	r28, 0x29	; 41
    5baa:	9f ad       	ldd	r25, Y+63	; 0x3f
    5bac:	a9 97       	sbiw	r28, 0x29	; 41
    5bae:	a0 96       	adiw	r28, 0x20	; 32
    5bb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5bb2:	a0 97       	sbiw	r28, 0x20	; 32
    5bb4:	98 0f       	add	r25, r24
    5bb6:	ad 96       	adiw	r28, 0x2d	; 45
    5bb8:	9f af       	std	Y+63, r25	; 0x3f
    5bba:	ad 97       	sbiw	r28, 0x2d	; 45
    5bbc:	91 e0       	ldi	r25, 0x01	; 1
    5bbe:	ae 96       	adiw	r28, 0x2e	; 46
    5bc0:	9f af       	std	Y+63, r25	; 0x3f
    5bc2:	ae 97       	sbiw	r28, 0x2e	; 46
    5bc4:	ad 96       	adiw	r28, 0x2d	; 45
    5bc6:	8f ad       	ldd	r24, Y+63	; 0x3f
    5bc8:	ad 97       	sbiw	r28, 0x2d	; 45
    5bca:	a0 96       	adiw	r28, 0x20	; 32
    5bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    5bce:	a0 97       	sbiw	r28, 0x20	; 32
    5bd0:	89 17       	cp	r24, r25
    5bd2:	18 f0       	brcs	.+6      	; 0x5bda <__vector_5+0x6c6>
    5bd4:	ae 96       	adiw	r28, 0x2e	; 46
    5bd6:	1f ae       	std	Y+63, r1	; 0x3f
    5bd8:	ae 97       	sbiw	r28, 0x2e	; 46
    5bda:	ac 96       	adiw	r28, 0x2c	; 44
    5bdc:	8f ad       	ldd	r24, Y+63	; 0x3f
    5bde:	ac 97       	sbiw	r28, 0x2c	; 44
    5be0:	ae 96       	adiw	r28, 0x2e	; 46
    5be2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5be4:	ae 97       	sbiw	r28, 0x2e	; 46
    5be6:	89 2b       	or	r24, r25
    5be8:	ac 96       	adiw	r28, 0x2c	; 44
    5bea:	8f af       	std	Y+63, r24	; 0x3f
    5bec:	ac 97       	sbiw	r28, 0x2c	; 44
    5bee:	ad 96       	adiw	r28, 0x2d	; 45
    5bf0:	8f ad       	ldd	r24, Y+63	; 0x3f
    5bf2:	ad 97       	sbiw	r28, 0x2d	; 45
    5bf4:	a0 96       	adiw	r28, 0x20	; 32
    5bf6:	8f af       	std	Y+63, r24	; 0x3f
    5bf8:	a0 97       	sbiw	r28, 0x20	; 32
    5bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    5bfc:	69 96       	adiw	r28, 0x19	; 25
    5bfe:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c00:	69 97       	sbiw	r28, 0x19	; 25
    5c02:	98 0f       	add	r25, r24
    5c04:	a1 96       	adiw	r28, 0x21	; 33
    5c06:	9f af       	std	Y+63, r25	; 0x3f
    5c08:	a1 97       	sbiw	r28, 0x21	; 33
    5c0a:	91 e0       	ldi	r25, 0x01	; 1
    5c0c:	af 96       	adiw	r28, 0x2f	; 47
    5c0e:	9f af       	std	Y+63, r25	; 0x3f
    5c10:	af 97       	sbiw	r28, 0x2f	; 47
    5c12:	a1 96       	adiw	r28, 0x21	; 33
    5c14:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c16:	a1 97       	sbiw	r28, 0x21	; 33
    5c18:	9d 81       	ldd	r25, Y+5	; 0x05
    5c1a:	89 17       	cp	r24, r25
    5c1c:	18 f0       	brcs	.+6      	; 0x5c24 <__vector_5+0x710>
    5c1e:	af 96       	adiw	r28, 0x2f	; 47
    5c20:	1f ae       	std	Y+63, r1	; 0x3f
    5c22:	af 97       	sbiw	r28, 0x2f	; 47
    5c24:	ac 96       	adiw	r28, 0x2c	; 44
    5c26:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c28:	ac 97       	sbiw	r28, 0x2c	; 44
    5c2a:	a1 96       	adiw	r28, 0x21	; 33
    5c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c2e:	a1 97       	sbiw	r28, 0x21	; 33
    5c30:	89 0f       	add	r24, r25
    5c32:	e0 96       	adiw	r28, 0x30	; 48
    5c34:	8f af       	std	Y+63, r24	; 0x3f
    5c36:	e0 97       	sbiw	r28, 0x30	; 48
    5c38:	81 e0       	ldi	r24, 0x01	; 1
    5c3a:	e1 96       	adiw	r28, 0x31	; 49
    5c3c:	8f af       	std	Y+63, r24	; 0x3f
    5c3e:	e1 97       	sbiw	r28, 0x31	; 49
    5c40:	e0 96       	adiw	r28, 0x30	; 48
    5c42:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c44:	e0 97       	sbiw	r28, 0x30	; 48
    5c46:	a1 96       	adiw	r28, 0x21	; 33
    5c48:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c4a:	a1 97       	sbiw	r28, 0x21	; 33
    5c4c:	98 17       	cp	r25, r24
    5c4e:	18 f0       	brcs	.+6      	; 0x5c56 <__vector_5+0x742>
    5c50:	e1 96       	adiw	r28, 0x31	; 49
    5c52:	1f ae       	std	Y+63, r1	; 0x3f
    5c54:	e1 97       	sbiw	r28, 0x31	; 49
    5c56:	af 96       	adiw	r28, 0x2f	; 47
    5c58:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c5a:	af 97       	sbiw	r28, 0x2f	; 47
    5c5c:	e1 96       	adiw	r28, 0x31	; 49
    5c5e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5c60:	e1 97       	sbiw	r28, 0x31	; 49
    5c62:	98 2b       	or	r25, r24
    5c64:	af 96       	adiw	r28, 0x2f	; 47
    5c66:	9f af       	std	Y+63, r25	; 0x3f
    5c68:	af 97       	sbiw	r28, 0x2f	; 47
    5c6a:	e0 96       	adiw	r28, 0x30	; 48
    5c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c6e:	e0 97       	sbiw	r28, 0x30	; 48
    5c70:	a1 96       	adiw	r28, 0x21	; 33
    5c72:	9f af       	std	Y+63, r25	; 0x3f
    5c74:	a1 97       	sbiw	r28, 0x21	; 33
    5c76:	8e 81       	ldd	r24, Y+6	; 0x06
    5c78:	6a 96       	adiw	r28, 0x1a	; 26
    5c7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c7c:	6a 97       	sbiw	r28, 0x1a	; 26
    5c7e:	89 0f       	add	r24, r25
    5c80:	a2 96       	adiw	r28, 0x22	; 34
    5c82:	8f af       	std	Y+63, r24	; 0x3f
    5c84:	a2 97       	sbiw	r28, 0x22	; 34
    5c86:	81 e0       	ldi	r24, 0x01	; 1
    5c88:	e2 96       	adiw	r28, 0x32	; 50
    5c8a:	8f af       	std	Y+63, r24	; 0x3f
    5c8c:	e2 97       	sbiw	r28, 0x32	; 50
    5c8e:	a2 96       	adiw	r28, 0x22	; 34
    5c90:	9f ad       	ldd	r25, Y+63	; 0x3f
    5c92:	a2 97       	sbiw	r28, 0x22	; 34
    5c94:	8e 81       	ldd	r24, Y+6	; 0x06
    5c96:	98 17       	cp	r25, r24
    5c98:	18 f0       	brcs	.+6      	; 0x5ca0 <__vector_5+0x78c>
    5c9a:	e2 96       	adiw	r28, 0x32	; 50
    5c9c:	1f ae       	std	Y+63, r1	; 0x3f
    5c9e:	e2 97       	sbiw	r28, 0x32	; 50
    5ca0:	af 96       	adiw	r28, 0x2f	; 47
    5ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
    5ca4:	af 97       	sbiw	r28, 0x2f	; 47
    5ca6:	a2 96       	adiw	r28, 0x22	; 34
    5ca8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5caa:	a2 97       	sbiw	r28, 0x22	; 34
    5cac:	98 0f       	add	r25, r24
    5cae:	e3 96       	adiw	r28, 0x33	; 51
    5cb0:	9f af       	std	Y+63, r25	; 0x3f
    5cb2:	e3 97       	sbiw	r28, 0x33	; 51
    5cb4:	91 e0       	ldi	r25, 0x01	; 1
    5cb6:	e4 96       	adiw	r28, 0x34	; 52
    5cb8:	9f af       	std	Y+63, r25	; 0x3f
    5cba:	e4 97       	sbiw	r28, 0x34	; 52
    5cbc:	e3 96       	adiw	r28, 0x33	; 51
    5cbe:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cc0:	e3 97       	sbiw	r28, 0x33	; 51
    5cc2:	a2 96       	adiw	r28, 0x22	; 34
    5cc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cc6:	a2 97       	sbiw	r28, 0x22	; 34
    5cc8:	89 17       	cp	r24, r25
    5cca:	18 f0       	brcs	.+6      	; 0x5cd2 <__vector_5+0x7be>
    5ccc:	e4 96       	adiw	r28, 0x34	; 52
    5cce:	1f ae       	std	Y+63, r1	; 0x3f
    5cd0:	e4 97       	sbiw	r28, 0x34	; 52
    5cd2:	e2 96       	adiw	r28, 0x32	; 50
    5cd4:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cd6:	e2 97       	sbiw	r28, 0x32	; 50
    5cd8:	e4 96       	adiw	r28, 0x34	; 52
    5cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    5cdc:	e4 97       	sbiw	r28, 0x34	; 52
    5cde:	89 2b       	or	r24, r25
    5ce0:	e2 96       	adiw	r28, 0x32	; 50
    5ce2:	8f af       	std	Y+63, r24	; 0x3f
    5ce4:	e2 97       	sbiw	r28, 0x32	; 50
    5ce6:	e3 96       	adiw	r28, 0x33	; 51
    5ce8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cea:	e3 97       	sbiw	r28, 0x33	; 51
    5cec:	a2 96       	adiw	r28, 0x22	; 34
    5cee:	8f af       	std	Y+63, r24	; 0x3f
    5cf0:	a2 97       	sbiw	r28, 0x22	; 34
    5cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    5cf4:	6b 96       	adiw	r28, 0x1b	; 27
    5cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    5cf8:	6b 97       	sbiw	r28, 0x1b	; 27
    5cfa:	98 0f       	add	r25, r24
    5cfc:	a3 96       	adiw	r28, 0x23	; 35
    5cfe:	9f af       	std	Y+63, r25	; 0x3f
    5d00:	a3 97       	sbiw	r28, 0x23	; 35
    5d02:	91 e0       	ldi	r25, 0x01	; 1
    5d04:	e5 96       	adiw	r28, 0x35	; 53
    5d06:	9f af       	std	Y+63, r25	; 0x3f
    5d08:	e5 97       	sbiw	r28, 0x35	; 53
    5d0a:	a3 96       	adiw	r28, 0x23	; 35
    5d0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d0e:	a3 97       	sbiw	r28, 0x23	; 35
    5d10:	9f 81       	ldd	r25, Y+7	; 0x07
    5d12:	89 17       	cp	r24, r25
    5d14:	18 f0       	brcs	.+6      	; 0x5d1c <__vector_5+0x808>
    5d16:	e5 96       	adiw	r28, 0x35	; 53
    5d18:	1f ae       	std	Y+63, r1	; 0x3f
    5d1a:	e5 97       	sbiw	r28, 0x35	; 53
    5d1c:	e2 96       	adiw	r28, 0x32	; 50
    5d1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d20:	e2 97       	sbiw	r28, 0x32	; 50
    5d22:	a3 96       	adiw	r28, 0x23	; 35
    5d24:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d26:	a3 97       	sbiw	r28, 0x23	; 35
    5d28:	89 0f       	add	r24, r25
    5d2a:	e6 96       	adiw	r28, 0x36	; 54
    5d2c:	8f af       	std	Y+63, r24	; 0x3f
    5d2e:	e6 97       	sbiw	r28, 0x36	; 54
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	e7 96       	adiw	r28, 0x37	; 55
    5d34:	8f af       	std	Y+63, r24	; 0x3f
    5d36:	e7 97       	sbiw	r28, 0x37	; 55
    5d38:	e6 96       	adiw	r28, 0x36	; 54
    5d3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d3c:	e6 97       	sbiw	r28, 0x36	; 54
    5d3e:	a3 96       	adiw	r28, 0x23	; 35
    5d40:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d42:	a3 97       	sbiw	r28, 0x23	; 35
    5d44:	98 17       	cp	r25, r24
    5d46:	18 f0       	brcs	.+6      	; 0x5d4e <__vector_5+0x83a>
    5d48:	e7 96       	adiw	r28, 0x37	; 55
    5d4a:	1f ae       	std	Y+63, r1	; 0x3f
    5d4c:	e7 97       	sbiw	r28, 0x37	; 55
    5d4e:	e5 96       	adiw	r28, 0x35	; 53
    5d50:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d52:	e5 97       	sbiw	r28, 0x35	; 53
    5d54:	e7 96       	adiw	r28, 0x37	; 55
    5d56:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d58:	e7 97       	sbiw	r28, 0x37	; 55
    5d5a:	98 2b       	or	r25, r24
    5d5c:	e5 96       	adiw	r28, 0x35	; 53
    5d5e:	9f af       	std	Y+63, r25	; 0x3f
    5d60:	e5 97       	sbiw	r28, 0x35	; 53
    5d62:	e6 96       	adiw	r28, 0x36	; 54
    5d64:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d66:	e6 97       	sbiw	r28, 0x36	; 54
    5d68:	a3 96       	adiw	r28, 0x23	; 35
    5d6a:	9f af       	std	Y+63, r25	; 0x3f
    5d6c:	a3 97       	sbiw	r28, 0x23	; 35
    5d6e:	88 85       	ldd	r24, Y+8	; 0x08
    5d70:	6c 96       	adiw	r28, 0x1c	; 28
    5d72:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d74:	6c 97       	sbiw	r28, 0x1c	; 28
    5d76:	89 0f       	add	r24, r25
    5d78:	a4 96       	adiw	r28, 0x24	; 36
    5d7a:	8f af       	std	Y+63, r24	; 0x3f
    5d7c:	a4 97       	sbiw	r28, 0x24	; 36
    5d7e:	e5 96       	adiw	r28, 0x35	; 53
    5d80:	8f ad       	ldd	r24, Y+63	; 0x3f
    5d82:	e5 97       	sbiw	r28, 0x35	; 53
    5d84:	a4 96       	adiw	r28, 0x24	; 36
    5d86:	9f ad       	ldd	r25, Y+63	; 0x3f
    5d88:	a4 97       	sbiw	r28, 0x24	; 36
    5d8a:	89 0f       	add	r24, r25
    5d8c:	a4 96       	adiw	r28, 0x24	; 36
    5d8e:	8f af       	std	Y+63, r24	; 0x3f
    5d90:	a4 97       	sbiw	r28, 0x24	; 36
    5d92:	6d 96       	adiw	r28, 0x1d	; 29
    5d94:	2f ad       	ldd	r18, Y+63	; 0x3f
    5d96:	6d 97       	sbiw	r28, 0x1d	; 29
    5d98:	6e 96       	adiw	r28, 0x1e	; 30
    5d9a:	3f ad       	ldd	r19, Y+63	; 0x3f
    5d9c:	6e 97       	sbiw	r28, 0x1e	; 30
    5d9e:	6f 96       	adiw	r28, 0x1f	; 31
    5da0:	4f ad       	ldd	r20, Y+63	; 0x3f
    5da2:	6f 97       	sbiw	r28, 0x1f	; 31
    5da4:	a0 96       	adiw	r28, 0x20	; 32
    5da6:	5f ad       	ldd	r21, Y+63	; 0x3f
    5da8:	a0 97       	sbiw	r28, 0x20	; 32
    5daa:	a1 96       	adiw	r28, 0x21	; 33
    5dac:	6f ad       	ldd	r22, Y+63	; 0x3f
    5dae:	a1 97       	sbiw	r28, 0x21	; 33
    5db0:	a2 96       	adiw	r28, 0x22	; 34
    5db2:	7f ad       	ldd	r23, Y+63	; 0x3f
    5db4:	a2 97       	sbiw	r28, 0x22	; 34
    5db6:	a3 96       	adiw	r28, 0x23	; 35
    5db8:	8f ad       	ldd	r24, Y+63	; 0x3f
    5dba:	a3 97       	sbiw	r28, 0x23	; 35
    5dbc:	a4 96       	adiw	r28, 0x24	; 36
    5dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dc0:	a4 97       	sbiw	r28, 0x24	; 36
    5dc2:	20 93 a9 01 	sts	0x01A9, r18
    5dc6:	30 93 aa 01 	sts	0x01AA, r19
    5dca:	40 93 ab 01 	sts	0x01AB, r20
    5dce:	50 93 ac 01 	sts	0x01AC, r21
    5dd2:	60 93 ad 01 	sts	0x01AD, r22
    5dd6:	70 93 ae 01 	sts	0x01AE, r23
    5dda:	80 93 af 01 	sts	0x01AF, r24
    5dde:	90 93 b0 01 	sts	0x01B0, r25
    5de2:	1b c0       	rjmp	.+54     	; 0x5e1a <__vector_5+0x906>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T2CurrentOVCount=0;
    5de4:	10 92 a9 01 	sts	0x01A9, r1
    5de8:	10 92 aa 01 	sts	0x01AA, r1
    5dec:	10 92 ab 01 	sts	0x01AB, r1
    5df0:	10 92 ac 01 	sts	0x01AC, r1
    5df4:	10 92 ad 01 	sts	0x01AD, r1
    5df8:	10 92 ae 01 	sts	0x01AE, r1
    5dfc:	10 92 af 01 	sts	0x01AF, r1
    5e00:	10 92 b0 01 	sts	0x01B0, r1
      //check if the global pointer to function holds a valid function address
      if (G_fptr2 != NULLPTR)
    5e04:	80 91 9f 01 	lds	r24, 0x019F
    5e08:	90 91 a0 01 	lds	r25, 0x01A0
    5e0c:	00 97       	sbiw	r24, 0x00	; 0
    5e0e:	29 f0       	breq	.+10     	; 0x5e1a <__vector_5+0x906>
      {
         //call the function
         G_fptr2();
    5e10:	e0 91 9f 01 	lds	r30, 0x019F
    5e14:	f0 91 a0 01 	lds	r31, 0x01A0
    5e18:	09 95       	icall
      }
   }
}
    5e1a:	ca 58       	subi	r28, 0x8A	; 138
    5e1c:	df 4f       	sbci	r29, 0xFF	; 255
    5e1e:	de bf       	out	0x3e, r29	; 62
    5e20:	cd bf       	out	0x3d, r28	; 61
    5e22:	cf 91       	pop	r28
    5e24:	df 91       	pop	r29
    5e26:	ff 91       	pop	r31
    5e28:	ef 91       	pop	r30
    5e2a:	bf 91       	pop	r27
    5e2c:	af 91       	pop	r26
    5e2e:	9f 91       	pop	r25
    5e30:	8f 91       	pop	r24
    5e32:	7f 91       	pop	r23
    5e34:	6f 91       	pop	r22
    5e36:	5f 91       	pop	r21
    5e38:	4f 91       	pop	r20
    5e3a:	3f 91       	pop	r19
    5e3c:	2f 91       	pop	r18
    5e3e:	0f 90       	pop	r0
    5e40:	0f be       	out	0x3f, r0	; 63
    5e42:	0f 90       	pop	r0
    5e44:	1f 90       	pop	r1
    5e46:	18 95       	reti

00005e48 <PWM_Init>:
* Parameters	: enuPWMMode, enuPWMCompareOutputMode, enuPWMClock
* Return Value	: enuErrorStatus_t
* Description  : Initialize the PWM module according to the configuration
*************************************************************************************************/
enuErrorStatus_t PWM_Init(enuPWMMode_t enuPWMMode, enuPWMCompareOutputMode_t enuPWMCompareOutputMode, enuPWMClock_t enuPWMClock)
{
    5e48:	df 93       	push	r29
    5e4a:	cf 93       	push	r28
    5e4c:	cd b7       	in	r28, 0x3d	; 61
    5e4e:	de b7       	in	r29, 0x3e	; 62
    5e50:	2c 97       	sbiw	r28, 0x0c	; 12
    5e52:	0f b6       	in	r0, 0x3f	; 63
    5e54:	f8 94       	cli
    5e56:	de bf       	out	0x3e, r29	; 62
    5e58:	0f be       	out	0x3f, r0	; 63
    5e5a:	cd bf       	out	0x3d, r28	; 61
    5e5c:	8a 83       	std	Y+2, r24	; 0x02
    5e5e:	6b 83       	std	Y+3, r22	; 0x03
    5e60:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;
	
	if(((enuPWMCompareOutputMode == NORMAL_OPERATION)	|| (enuPWMCompareOutputMode == INVERTED_PWM) || (enuPWMCompareOutputMode == NON_INVERTED_PWM))	&&
    5e62:	8b 81       	ldd	r24, Y+3	; 0x03
    5e64:	88 23       	and	r24, r24
    5e66:	39 f0       	breq	.+14     	; 0x5e76 <PWM_Init+0x2e>
    5e68:	8b 81       	ldd	r24, Y+3	; 0x03
    5e6a:	83 30       	cpi	r24, 0x03	; 3
    5e6c:	21 f0       	breq	.+8      	; 0x5e76 <PWM_Init+0x2e>
    5e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5e70:	82 30       	cpi	r24, 0x02	; 2
    5e72:	09 f0       	breq	.+2      	; 0x5e76 <PWM_Init+0x2e>
    5e74:	8f c0       	rjmp	.+286    	; 0x5f94 <PWM_Init+0x14c>
    5e76:	8c 81       	ldd	r24, Y+4	; 0x04
    5e78:	88 30       	cpi	r24, 0x08	; 8
    5e7a:	08 f0       	brcs	.+2      	; 0x5e7e <PWM_Init+0x36>
    5e7c:	8b c0       	rjmp	.+278    	; 0x5f94 <PWM_Init+0x14c>
		(enuPWMClock > PWM_CLOCK_MIN_VALUE)					&& (enuPWMClock < PWM_CLOCK_MAX_VALUE)) 
	{
		/* Initializing OCR1A as output pin */
		DIO_PinInit(PD4, OUTPUT, NO_CONNECTION);
    5e7e:	8c e1       	ldi	r24, 0x1C	; 28
    5e80:	61 e0       	ldi	r22, 0x01	; 1
    5e82:	40 e0       	ldi	r20, 0x00	; 0
    5e84:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
		/* Initializing OCR1B as output pin */
		DIO_PinInit(PD5, OUTPUT, NO_CONNECTION);
    5e88:	8d e1       	ldi	r24, 0x1D	; 29
    5e8a:	61 e0       	ldi	r22, 0x01	; 1
    5e8c:	40 e0       	ldi	r20, 0x00	; 0
    5e8e:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
		/* Selecting the PWM module mode */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1_WGM10_WGM11_START_BIT, enuPWMMode, PWM_TC1_WGM10_WGM11_MASK);
    5e92:	af e4       	ldi	r26, 0x4F	; 79
    5e94:	b0 e0       	ldi	r27, 0x00	; 0
    5e96:	ef e4       	ldi	r30, 0x4F	; 79
    5e98:	f0 e0       	ldi	r31, 0x00	; 0
    5e9a:	80 81       	ld	r24, Z
    5e9c:	98 2f       	mov	r25, r24
    5e9e:	9c 7f       	andi	r25, 0xFC	; 252
    5ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ea2:	89 2b       	or	r24, r25
    5ea4:	8c 93       	st	X, r24
		ASSIGN_BITS(TCCR1B_R, PWM_TC1_WGM12_WGM13_START_BIT, enuPWMMode, PWM_TC1_WGM12_WGM13_MASK);
    5ea6:	ae e4       	ldi	r26, 0x4E	; 78
    5ea8:	b0 e0       	ldi	r27, 0x00	; 0
    5eaa:	ee e4       	ldi	r30, 0x4E	; 78
    5eac:	f0 e0       	ldi	r31, 0x00	; 0
    5eae:	80 81       	ld	r24, Z
    5eb0:	28 2f       	mov	r18, r24
    5eb2:	2f 79       	andi	r18, 0x9F	; 159
    5eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb6:	88 2f       	mov	r24, r24
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	88 0f       	add	r24, r24
    5ebc:	99 1f       	adc	r25, r25
    5ebe:	88 0f       	add	r24, r24
    5ec0:	99 1f       	adc	r25, r25
    5ec2:	88 0f       	add	r24, r24
    5ec4:	99 1f       	adc	r25, r25
    5ec6:	82 2b       	or	r24, r18
    5ec8:	8c 93       	st	X, r24
		/* Selecting the behavior of the compare match mode output for channel A (Inverted or Non-inverted PWM) */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1A_COMPARE_OUTPUT_MODE_START_BIT, enuPWMCompareOutputMode, PWM_TC1A_COMPARE_OUTPUT_MODE_MASK);
    5eca:	af e4       	ldi	r26, 0x4F	; 79
    5ecc:	b0 e0       	ldi	r27, 0x00	; 0
    5ece:	ef e4       	ldi	r30, 0x4F	; 79
    5ed0:	f0 e0       	ldi	r31, 0x00	; 0
    5ed2:	80 81       	ld	r24, Z
    5ed4:	28 2f       	mov	r18, r24
    5ed6:	2f 73       	andi	r18, 0x3F	; 63
    5ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    5eda:	88 2f       	mov	r24, r24
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	00 24       	eor	r0, r0
    5ee0:	96 95       	lsr	r25
    5ee2:	87 95       	ror	r24
    5ee4:	07 94       	ror	r0
    5ee6:	96 95       	lsr	r25
    5ee8:	87 95       	ror	r24
    5eea:	07 94       	ror	r0
    5eec:	98 2f       	mov	r25, r24
    5eee:	80 2d       	mov	r24, r0
    5ef0:	82 2b       	or	r24, r18
    5ef2:	8c 93       	st	X, r24
		/* Selecting the behavior of the compare match mode output for channel B (Inverted or Non-inverted PWM) */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1B_COMPARE_OUTPUT_MODE_START_BIT, enuPWMCompareOutputMode, PWM_TC1B_COMPARE_OUTPUT_MODE_MASK);
    5ef4:	af e4       	ldi	r26, 0x4F	; 79
    5ef6:	b0 e0       	ldi	r27, 0x00	; 0
    5ef8:	ef e4       	ldi	r30, 0x4F	; 79
    5efa:	f0 e0       	ldi	r31, 0x00	; 0
    5efc:	80 81       	ld	r24, Z
    5efe:	28 2f       	mov	r18, r24
    5f00:	2f 7c       	andi	r18, 0xCF	; 207
    5f02:	8b 81       	ldd	r24, Y+3	; 0x03
    5f04:	88 2f       	mov	r24, r24
    5f06:	90 e0       	ldi	r25, 0x00	; 0
    5f08:	82 95       	swap	r24
    5f0a:	92 95       	swap	r25
    5f0c:	90 7f       	andi	r25, 0xF0	; 240
    5f0e:	98 27       	eor	r25, r24
    5f10:	80 7f       	andi	r24, 0xF0	; 240
    5f12:	98 27       	eor	r25, r24
    5f14:	82 2b       	or	r24, r18
    5f16:	8c 93       	st	X, r24
		/* Selecting the pre-configured clock prescaler value */
		ASSIGN_BITS(TCCR1B_R, PWM_CLOCK_SELECT_START_BIT, enuPWMClock, PWM_CLOCK_SELECT_MASK);
    5f18:	ae e4       	ldi	r26, 0x4E	; 78
    5f1a:	b0 e0       	ldi	r27, 0x00	; 0
    5f1c:	ee e4       	ldi	r30, 0x4E	; 78
    5f1e:	f0 e0       	ldi	r31, 0x00	; 0
    5f20:	80 81       	ld	r24, Z
    5f22:	98 2f       	mov	r25, r24
    5f24:	98 7f       	andi	r25, 0xF8	; 248
    5f26:	8c 81       	ldd	r24, Y+4	; 0x04
    5f28:	89 2b       	or	r24, r25
    5f2a:	8c 93       	st	X, r24
		/* Stopping the PWM signal at the beginning of initialization phase */
		if(enuPWMCompareOutputMode == INVERTED_PWM)
    5f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f2e:	83 30       	cpi	r24, 0x03	; 3
    5f30:	89 f4       	brne	.+34     	; 0x5f54 <PWM_Init+0x10c>
		{
			CLEAR_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    5f32:	ea e4       	ldi	r30, 0x4A	; 74
    5f34:	f0 e0       	ldi	r31, 0x00	; 0
    5f36:	80 81       	ld	r24, Z
    5f38:	91 81       	ldd	r25, Z+1	; 0x01
    5f3a:	ea e4       	ldi	r30, 0x4A	; 74
    5f3c:	f0 e0       	ldi	r31, 0x00	; 0
    5f3e:	11 82       	std	Z+1, r1	; 0x01
    5f40:	10 82       	st	Z, r1
			CLEAR_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    5f42:	e8 e4       	ldi	r30, 0x48	; 72
    5f44:	f0 e0       	ldi	r31, 0x00	; 0
    5f46:	80 81       	ld	r24, Z
    5f48:	91 81       	ldd	r25, Z+1	; 0x01
    5f4a:	e8 e4       	ldi	r30, 0x48	; 72
    5f4c:	f0 e0       	ldi	r31, 0x00	; 0
    5f4e:	11 82       	std	Z+1, r1	; 0x01
    5f50:	10 82       	st	Z, r1
    5f52:	17 c0       	rjmp	.+46     	; 0x5f82 <PWM_Init+0x13a>
		}
		else if(enuPWMCompareOutputMode == NON_INVERTED_PWM)
    5f54:	8b 81       	ldd	r24, Y+3	; 0x03
    5f56:	82 30       	cpi	r24, 0x02	; 2
    5f58:	a1 f4       	brne	.+40     	; 0x5f82 <PWM_Init+0x13a>
		{
			SET_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    5f5a:	ea e4       	ldi	r30, 0x4A	; 74
    5f5c:	f0 e0       	ldi	r31, 0x00	; 0
    5f5e:	80 81       	ld	r24, Z
    5f60:	91 81       	ldd	r25, Z+1	; 0x01
    5f62:	ea e4       	ldi	r30, 0x4A	; 74
    5f64:	f0 e0       	ldi	r31, 0x00	; 0
    5f66:	8f ef       	ldi	r24, 0xFF	; 255
    5f68:	9f ef       	ldi	r25, 0xFF	; 255
    5f6a:	91 83       	std	Z+1, r25	; 0x01
    5f6c:	80 83       	st	Z, r24
			SET_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    5f6e:	e8 e4       	ldi	r30, 0x48	; 72
    5f70:	f0 e0       	ldi	r31, 0x00	; 0
    5f72:	80 81       	ld	r24, Z
    5f74:	91 81       	ldd	r25, Z+1	; 0x01
    5f76:	e8 e4       	ldi	r30, 0x48	; 72
    5f78:	f0 e0       	ldi	r31, 0x00	; 0
    5f7a:	8f ef       	ldi	r24, 0xFF	; 255
    5f7c:	9f ef       	ldi	r25, 0xFF	; 255
    5f7e:	91 83       	std	Z+1, r25	; 0x01
    5f80:	80 83       	st	Z, r24
		}
		else
		{
		}
		/* Saving the value of the compare output mode value into a temporary variable */
		enuPWMCompareOutputModeState = enuPWMCompareOutputMode;
    5f82:	8b 81       	ldd	r24, Y+3	; 0x03
    5f84:	80 93 b5 01 	sts	0x01B5, r24
		enuPWMState = PWM_INIT_DONE;
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	80 93 b4 01 	sts	0x01B4, r24
		enuRetVar = E_OK;
    5f8e:	81 e0       	ldi	r24, 0x01	; 1
    5f90:	89 83       	std	Y+1, r24	; 0x01
    5f92:	01 c0       	rjmp	.+2      	; 0x5f96 <PWM_Init+0x14e>
	}
	else
	{
		enuRetVar = E_ERROR;
    5f94:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    5f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f98:	2c 96       	adiw	r28, 0x0c	; 12
    5f9a:	0f b6       	in	r0, 0x3f	; 63
    5f9c:	f8 94       	cli
    5f9e:	de bf       	out	0x3e, r29	; 62
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	cd bf       	out	0x3d, r28	; 61
    5fa4:	cf 91       	pop	r28
    5fa6:	df 91       	pop	r29
    5fa8:	08 95       	ret

00005faa <PWM_Start>:
* Parameters	: u8DutyCycle
* Return Value	: enuErrorStatus_t
* Description  : Start the PWM signal with the specified duty cycle
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8DutyCycle)
{
    5faa:	df 93       	push	r29
    5fac:	cf 93       	push	r28
    5fae:	00 d0       	rcall	.+0      	; 0x5fb0 <PWM_Start+0x6>
    5fb0:	00 d0       	rcall	.+0      	; 0x5fb2 <PWM_Start+0x8>
    5fb2:	cd b7       	in	r28, 0x3d	; 61
    5fb4:	de b7       	in	r29, 0x3e	; 62
    5fb6:	8c 83       	std	Y+4, r24	; 0x04
	enuErrorStatus_t enuRetVar = E_OK;
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16PWMRegisterValue;
	
	if((enuPWMState == PWM_INIT_DONE) && (u8DutyCycle >= PWM_DUTY_CYCLE_MIN_VALUE) && (u8DutyCycle <= PWM_DUTY_CYCLE_MAX_VALUE))
    5fbc:	80 91 b4 01 	lds	r24, 0x01B4
    5fc0:	81 30       	cpi	r24, 0x01	; 1
    5fc2:	a1 f5       	brne	.+104    	; 0x602c <PWM_Start+0x82>
    5fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    5fc6:	85 36       	cpi	r24, 0x65	; 101
    5fc8:	88 f5       	brcc	.+98     	; 0x602c <PWM_Start+0x82>
	{
		ICR1_R = PWM_FREQUENCY_10K;
    5fca:	e6 e4       	ldi	r30, 0x46	; 70
    5fcc:	f0 e0       	ldi	r31, 0x00	; 0
    5fce:	80 e1       	ldi	r24, 0x10	; 16
    5fd0:	97 e2       	ldi	r25, 0x27	; 39
    5fd2:	91 83       	std	Z+1, r25	; 0x01
    5fd4:	80 83       	st	Z, r24
		/* Calculating the PWM register value required according to the equation */
		u16PWMRegisterValue = PWM_CALCULATE_REGISTER_VALUE(ICR1_R, u8DutyCycle);
    5fd6:	e6 e4       	ldi	r30, 0x46	; 70
    5fd8:	f0 e0       	ldi	r31, 0x00	; 0
    5fda:	80 81       	ld	r24, Z
    5fdc:	91 81       	ldd	r25, Z+1	; 0x01
    5fde:	cc 01       	movw	r24, r24
    5fe0:	a0 e0       	ldi	r26, 0x00	; 0
    5fe2:	b0 e0       	ldi	r27, 0x00	; 0
    5fe4:	2c 81       	ldd	r18, Y+4	; 0x04
    5fe6:	22 2f       	mov	r18, r18
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	40 e0       	ldi	r20, 0x00	; 0
    5fec:	50 e0       	ldi	r21, 0x00	; 0
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	24 e6       	ldi	r18, 0x64	; 100
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	40 e0       	ldi	r20, 0x00	; 0
    6000:	50 e0       	ldi	r21, 0x00	; 0
    6002:	bc 01       	movw	r22, r24
    6004:	cd 01       	movw	r24, r26
    6006:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
    600a:	da 01       	movw	r26, r20
    600c:	c9 01       	movw	r24, r18
    600e:	9a 83       	std	Y+2, r25	; 0x02
    6010:	89 83       	std	Y+1, r24	; 0x01
		/* Loading the PWM register value into OCR1 registers */
		OCR1A_R = u16PWMRegisterValue;
    6012:	ea e4       	ldi	r30, 0x4A	; 74
    6014:	f0 e0       	ldi	r31, 0x00	; 0
    6016:	89 81       	ldd	r24, Y+1	; 0x01
    6018:	9a 81       	ldd	r25, Y+2	; 0x02
    601a:	91 83       	std	Z+1, r25	; 0x01
    601c:	80 83       	st	Z, r24
		OCR1B_R = u16PWMRegisterValue;
    601e:	e8 e4       	ldi	r30, 0x48	; 72
    6020:	f0 e0       	ldi	r31, 0x00	; 0
    6022:	89 81       	ldd	r24, Y+1	; 0x01
    6024:	9a 81       	ldd	r25, Y+2	; 0x02
    6026:	91 83       	std	Z+1, r25	; 0x01
    6028:	80 83       	st	Z, r24
    602a:	01 c0       	rjmp	.+2      	; 0x602e <PWM_Start+0x84>
	}
	else
	{
		enuRetVar = E_ERROR;
    602c:	1b 82       	std	Y+3, r1	; 0x03
	}
	return enuRetVar;	
    602e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6030:	0f 90       	pop	r0
    6032:	0f 90       	pop	r0
    6034:	0f 90       	pop	r0
    6036:	0f 90       	pop	r0
    6038:	cf 91       	pop	r28
    603a:	df 91       	pop	r29
    603c:	08 95       	ret

0000603e <PWM_Stop>:
* Parameters	: void
* Return Value	: enuErrorStatus_t
* Description  : Stop the PWM signal immediately
*************************************************************************************************/
enuErrorStatus_t PWM_Stop(void)
{
    603e:	df 93       	push	r29
    6040:	cf 93       	push	r28
    6042:	cd b7       	in	r28, 0x3d	; 61
    6044:	de b7       	in	r29, 0x3e	; 62
    6046:	29 97       	sbiw	r28, 0x09	; 9
    6048:	0f b6       	in	r0, 0x3f	; 63
    604a:	f8 94       	cli
    604c:	de bf       	out	0x3e, r29	; 62
    604e:	0f be       	out	0x3f, r0	; 63
    6050:	cd bf       	out	0x3d, r28	; 61
	enuErrorStatus_t enuRetVar = E_OK;
    6052:	81 e0       	ldi	r24, 0x01	; 1
    6054:	89 83       	std	Y+1, r24	; 0x01
	
	if(enuPWMState == PWM_INIT_DONE)
    6056:	80 91 b4 01 	lds	r24, 0x01B4
    605a:	81 30       	cpi	r24, 0x01	; 1
    605c:	81 f5       	brne	.+96     	; 0x60be <PWM_Stop+0x80>
	{
		/* Stopping the PWM signal at the beginning of initialization phase */
		if(enuPWMCompareOutputModeState == INVERTED_PWM)
    605e:	80 91 b5 01 	lds	r24, 0x01B5
    6062:	83 30       	cpi	r24, 0x03	; 3
    6064:	89 f4       	brne	.+34     	; 0x6088 <PWM_Stop+0x4a>
		{
			CLEAR_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    6066:	ea e4       	ldi	r30, 0x4A	; 74
    6068:	f0 e0       	ldi	r31, 0x00	; 0
    606a:	80 81       	ld	r24, Z
    606c:	91 81       	ldd	r25, Z+1	; 0x01
    606e:	ea e4       	ldi	r30, 0x4A	; 74
    6070:	f0 e0       	ldi	r31, 0x00	; 0
    6072:	11 82       	std	Z+1, r1	; 0x01
    6074:	10 82       	st	Z, r1
			CLEAR_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    6076:	e8 e4       	ldi	r30, 0x48	; 72
    6078:	f0 e0       	ldi	r31, 0x00	; 0
    607a:	80 81       	ld	r24, Z
    607c:	91 81       	ldd	r25, Z+1	; 0x01
    607e:	e8 e4       	ldi	r30, 0x48	; 72
    6080:	f0 e0       	ldi	r31, 0x00	; 0
    6082:	11 82       	std	Z+1, r1	; 0x01
    6084:	10 82       	st	Z, r1
    6086:	18 c0       	rjmp	.+48     	; 0x60b8 <PWM_Stop+0x7a>
		}
		else if(enuPWMCompareOutputModeState == NON_INVERTED_PWM)
    6088:	80 91 b5 01 	lds	r24, 0x01B5
    608c:	82 30       	cpi	r24, 0x02	; 2
    608e:	a1 f4       	brne	.+40     	; 0x60b8 <PWM_Stop+0x7a>
		{
			SET_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    6090:	ea e4       	ldi	r30, 0x4A	; 74
    6092:	f0 e0       	ldi	r31, 0x00	; 0
    6094:	80 81       	ld	r24, Z
    6096:	91 81       	ldd	r25, Z+1	; 0x01
    6098:	ea e4       	ldi	r30, 0x4A	; 74
    609a:	f0 e0       	ldi	r31, 0x00	; 0
    609c:	8f ef       	ldi	r24, 0xFF	; 255
    609e:	9f ef       	ldi	r25, 0xFF	; 255
    60a0:	91 83       	std	Z+1, r25	; 0x01
    60a2:	80 83       	st	Z, r24
			SET_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
    60a4:	e8 e4       	ldi	r30, 0x48	; 72
    60a6:	f0 e0       	ldi	r31, 0x00	; 0
    60a8:	80 81       	ld	r24, Z
    60aa:	91 81       	ldd	r25, Z+1	; 0x01
    60ac:	e8 e4       	ldi	r30, 0x48	; 72
    60ae:	f0 e0       	ldi	r31, 0x00	; 0
    60b0:	8f ef       	ldi	r24, 0xFF	; 255
    60b2:	9f ef       	ldi	r25, 0xFF	; 255
    60b4:	91 83       	std	Z+1, r25	; 0x01
    60b6:	80 83       	st	Z, r24
		}
		else
		{
		}
		enuRetVar = E_OK;
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	89 83       	std	Y+1, r24	; 0x01
    60bc:	01 c0       	rjmp	.+2      	; 0x60c0 <PWM_Stop+0x82>
	}
	else
	{
		enuRetVar = E_ERROR;
    60be:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    60c2:	29 96       	adiw	r28, 0x09	; 9
    60c4:	0f b6       	in	r0, 0x3f	; 63
    60c6:	f8 94       	cli
    60c8:	de bf       	out	0x3e, r29	; 62
    60ca:	0f be       	out	0x3f, r0	; 63
    60cc:	cd bf       	out	0x3d, r28	; 61
    60ce:	cf 91       	pop	r28
    60d0:	df 91       	pop	r29
    60d2:	08 95       	ret

000060d4 <EXTINT_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize External Interrupt
************************************************************************************************/
enuErrorStatus_t EXTINT_Init( enuEXTINTNum enuInterruptNum)
{
    60d4:	df 93       	push	r29
    60d6:	cf 93       	push	r28
    60d8:	00 d0       	rcall	.+0      	; 0x60da <EXTINT_Init+0x6>
    60da:	00 d0       	rcall	.+0      	; 0x60dc <EXTINT_Init+0x8>
    60dc:	cd b7       	in	r28, 0x3d	; 61
    60de:	de b7       	in	r29, 0x3e	; 62
    60e0:	8a 83       	std	Y+2, r24	; 0x02
	enuErrorStatus_t enuStatus = E_ERROR;
    60e2:	19 82       	std	Y+1, r1	; 0x01

	//Enable peripheral interrupt enable
	switch(enuInterruptNum)
    60e4:	8a 81       	ldd	r24, Y+2	; 0x02
    60e6:	28 2f       	mov	r18, r24
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	3c 83       	std	Y+4, r19	; 0x04
    60ec:	2b 83       	std	Y+3, r18	; 0x03
    60ee:	8b 81       	ldd	r24, Y+3	; 0x03
    60f0:	9c 81       	ldd	r25, Y+4	; 0x04
    60f2:	81 30       	cpi	r24, 0x01	; 1
    60f4:	91 05       	cpc	r25, r1
    60f6:	89 f0       	breq	.+34     	; 0x611a <EXTINT_Init+0x46>
    60f8:	2b 81       	ldd	r18, Y+3	; 0x03
    60fa:	3c 81       	ldd	r19, Y+4	; 0x04
    60fc:	22 30       	cpi	r18, 0x02	; 2
    60fe:	31 05       	cpc	r19, r1
    6100:	a1 f0       	breq	.+40     	; 0x612a <EXTINT_Init+0x56>
    6102:	8b 81       	ldd	r24, Y+3	; 0x03
    6104:	9c 81       	ldd	r25, Y+4	; 0x04
    6106:	00 97       	sbiw	r24, 0x00	; 0
    6108:	b9 f4       	brne	.+46     	; 0x6138 <EXTINT_Init+0x64>
	{
	case EXTINT_INT0:
		SET_BIT(GICR_R, INT0_B);
    610a:	ab e5       	ldi	r26, 0x5B	; 91
    610c:	b0 e0       	ldi	r27, 0x00	; 0
    610e:	eb e5       	ldi	r30, 0x5B	; 91
    6110:	f0 e0       	ldi	r31, 0x00	; 0
    6112:	80 81       	ld	r24, Z
    6114:	80 64       	ori	r24, 0x40	; 64
    6116:	8c 93       	st	X, r24
    6118:	0f c0       	rjmp	.+30     	; 0x6138 <EXTINT_Init+0x64>
		break;
	case EXTINT_INT1:
		SET_BIT(GICR_R, INT1_B);
    611a:	ab e5       	ldi	r26, 0x5B	; 91
    611c:	b0 e0       	ldi	r27, 0x00	; 0
    611e:	eb e5       	ldi	r30, 0x5B	; 91
    6120:	f0 e0       	ldi	r31, 0x00	; 0
    6122:	80 81       	ld	r24, Z
    6124:	80 68       	ori	r24, 0x80	; 128
    6126:	8c 93       	st	X, r24
    6128:	07 c0       	rjmp	.+14     	; 0x6138 <EXTINT_Init+0x64>
		break;
	case EXTINT_INT2:
		SET_BIT(GICR_R, INT2_B);
    612a:	ab e5       	ldi	r26, 0x5B	; 91
    612c:	b0 e0       	ldi	r27, 0x00	; 0
    612e:	eb e5       	ldi	r30, 0x5B	; 91
    6130:	f0 e0       	ldi	r31, 0x00	; 0
    6132:	80 81       	ld	r24, Z
    6134:	80 62       	ori	r24, 0x20	; 32
    6136:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
    //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
    6138:	af e5       	ldi	r26, 0x5F	; 95
    613a:	b0 e0       	ldi	r27, 0x00	; 0
    613c:	ef e5       	ldi	r30, 0x5F	; 95
    613e:	f0 e0       	ldi	r31, 0x00	; 0
    6140:	80 81       	ld	r24, Z
    6142:	80 68       	ori	r24, 0x80	; 128
    6144:	8c 93       	st	X, r24

	enuStatus = E_OK;
    6146:	81 e0       	ldi	r24, 0x01	; 1
    6148:	89 83       	std	Y+1, r24	; 0x01

	return enuStatus;
    614a:	89 81       	ldd	r24, Y+1	; 0x01
}
    614c:	0f 90       	pop	r0
    614e:	0f 90       	pop	r0
    6150:	0f 90       	pop	r0
    6152:	0f 90       	pop	r0
    6154:	cf 91       	pop	r28
    6156:	df 91       	pop	r29
    6158:	08 95       	ret

0000615a <EXTINT_SetSenseMode>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuErrorStatus_t EXTINT_SetSenseMode(enuEXTINTSenseControl enuSenseMode, enuEXTINTNum enuInterruptNum)
{
    615a:	df 93       	push	r29
    615c:	cf 93       	push	r28
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
    6162:	29 97       	sbiw	r28, 0x09	; 9
    6164:	0f b6       	in	r0, 0x3f	; 63
    6166:	f8 94       	cli
    6168:	de bf       	out	0x3e, r29	; 62
    616a:	0f be       	out	0x3f, r0	; 63
    616c:	cd bf       	out	0x3d, r28	; 61
    616e:	8a 83       	std	Y+2, r24	; 0x02
    6170:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuStatus = E_ERROR;
    6172:	19 82       	std	Y+1, r1	; 0x01

    if (enuInterruptNum==EXTINT_INT0)
    6174:	8b 81       	ldd	r24, Y+3	; 0x03
    6176:	88 23       	and	r24, r24
    6178:	09 f0       	breq	.+2      	; 0x617c <EXTINT_SetSenseMode+0x22>
    617a:	5c c0       	rjmp	.+184    	; 0x6234 <EXTINT_SetSenseMode+0xda>
    {
		switch(enuSenseMode)
    617c:	8a 81       	ldd	r24, Y+2	; 0x02
    617e:	28 2f       	mov	r18, r24
    6180:	30 e0       	ldi	r19, 0x00	; 0
    6182:	39 87       	std	Y+9, r19	; 0x09
    6184:	28 87       	std	Y+8, r18	; 0x08
    6186:	88 85       	ldd	r24, Y+8	; 0x08
    6188:	99 85       	ldd	r25, Y+9	; 0x09
    618a:	81 30       	cpi	r24, 0x01	; 1
    618c:	91 05       	cpc	r25, r1
    618e:	09 f4       	brne	.+2      	; 0x6192 <EXTINT_SetSenseMode+0x38>
    6190:	42 c0       	rjmp	.+132    	; 0x6216 <EXTINT_SetSenseMode+0xbc>
    6192:	28 85       	ldd	r18, Y+8	; 0x08
    6194:	39 85       	ldd	r19, Y+9	; 0x09
    6196:	22 30       	cpi	r18, 0x02	; 2
    6198:	31 05       	cpc	r19, r1
    619a:	2c f4       	brge	.+10     	; 0x61a6 <EXTINT_SetSenseMode+0x4c>
    619c:	88 85       	ldd	r24, Y+8	; 0x08
    619e:	99 85       	ldd	r25, Y+9	; 0x09
    61a0:	00 97       	sbiw	r24, 0x00	; 0
    61a2:	61 f0       	breq	.+24     	; 0x61bc <EXTINT_SetSenseMode+0x62>
    61a4:	c8 c0       	rjmp	.+400    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
    61a6:	28 85       	ldd	r18, Y+8	; 0x08
    61a8:	39 85       	ldd	r19, Y+9	; 0x09
    61aa:	22 30       	cpi	r18, 0x02	; 2
    61ac:	31 05       	cpc	r19, r1
    61ae:	21 f1       	breq	.+72     	; 0x61f8 <EXTINT_SetSenseMode+0x9e>
    61b0:	88 85       	ldd	r24, Y+8	; 0x08
    61b2:	99 85       	ldd	r25, Y+9	; 0x09
    61b4:	83 30       	cpi	r24, 0x03	; 3
    61b6:	91 05       	cpc	r25, r1
    61b8:	81 f0       	breq	.+32     	; 0x61da <EXTINT_SetSenseMode+0x80>
    61ba:	bd c0       	rjmp	.+378    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    61bc:	a5 e5       	ldi	r26, 0x55	; 85
    61be:	b0 e0       	ldi	r27, 0x00	; 0
    61c0:	e5 e5       	ldi	r30, 0x55	; 85
    61c2:	f0 e0       	ldi	r31, 0x00	; 0
    61c4:	80 81       	ld	r24, Z
    61c6:	8e 7f       	andi	r24, 0xFE	; 254
    61c8:	8c 93       	st	X, r24
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    61ca:	a5 e5       	ldi	r26, 0x55	; 85
    61cc:	b0 e0       	ldi	r27, 0x00	; 0
    61ce:	e5 e5       	ldi	r30, 0x55	; 85
    61d0:	f0 e0       	ldi	r31, 0x00	; 0
    61d2:	80 81       	ld	r24, Z
    61d4:	8d 7f       	andi	r24, 0xFD	; 253
    61d6:	8c 93       	st	X, r24
    61d8:	ae c0       	rjmp	.+348    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_RAISING_MODE :
		 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    61da:	a5 e5       	ldi	r26, 0x55	; 85
    61dc:	b0 e0       	ldi	r27, 0x00	; 0
    61de:	e5 e5       	ldi	r30, 0x55	; 85
    61e0:	f0 e0       	ldi	r31, 0x00	; 0
    61e2:	80 81       	ld	r24, Z
    61e4:	81 60       	ori	r24, 0x01	; 1
    61e6:	8c 93       	st	X, r24
		 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    61e8:	a5 e5       	ldi	r26, 0x55	; 85
    61ea:	b0 e0       	ldi	r27, 0x00	; 0
    61ec:	e5 e5       	ldi	r30, 0x55	; 85
    61ee:	f0 e0       	ldi	r31, 0x00	; 0
    61f0:	80 81       	ld	r24, Z
    61f2:	82 60       	ori	r24, 0x02	; 2
    61f4:	8c 93       	st	X, r24
    61f6:	9f c0       	rjmp	.+318    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    61f8:	a5 e5       	ldi	r26, 0x55	; 85
    61fa:	b0 e0       	ldi	r27, 0x00	; 0
    61fc:	e5 e5       	ldi	r30, 0x55	; 85
    61fe:	f0 e0       	ldi	r31, 0x00	; 0
    6200:	80 81       	ld	r24, Z
    6202:	8e 7f       	andi	r24, 0xFE	; 254
    6204:	8c 93       	st	X, r24
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    6206:	a5 e5       	ldi	r26, 0x55	; 85
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	e5 e5       	ldi	r30, 0x55	; 85
    620c:	f0 e0       	ldi	r31, 0x00	; 0
    620e:	80 81       	ld	r24, Z
    6210:	82 60       	ori	r24, 0x02	; 2
    6212:	8c 93       	st	X, r24
    6214:	90 c0       	rjmp	.+288    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
    6216:	a5 e5       	ldi	r26, 0x55	; 85
    6218:	b0 e0       	ldi	r27, 0x00	; 0
    621a:	e5 e5       	ldi	r30, 0x55	; 85
    621c:	f0 e0       	ldi	r31, 0x00	; 0
    621e:	80 81       	ld	r24, Z
    6220:	81 60       	ori	r24, 0x01	; 1
    6222:	8c 93       	st	X, r24
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
    6224:	a5 e5       	ldi	r26, 0x55	; 85
    6226:	b0 e0       	ldi	r27, 0x00	; 0
    6228:	e5 e5       	ldi	r30, 0x55	; 85
    622a:	f0 e0       	ldi	r31, 0x00	; 0
    622c:	80 81       	ld	r24, Z
    622e:	8d 7f       	andi	r24, 0xFD	; 253
    6230:	8c 93       	st	X, r24
    6232:	81 c0       	rjmp	.+258    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT1)
    6234:	8b 81       	ldd	r24, Y+3	; 0x03
    6236:	81 30       	cpi	r24, 0x01	; 1
    6238:	09 f0       	breq	.+2      	; 0x623c <EXTINT_SetSenseMode+0xe2>
    623a:	5c c0       	rjmp	.+184    	; 0x62f4 <EXTINT_SetSenseMode+0x19a>
    {
		switch(enuSenseMode)
    623c:	8a 81       	ldd	r24, Y+2	; 0x02
    623e:	28 2f       	mov	r18, r24
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	3f 83       	std	Y+7, r19	; 0x07
    6244:	2e 83       	std	Y+6, r18	; 0x06
    6246:	8e 81       	ldd	r24, Y+6	; 0x06
    6248:	9f 81       	ldd	r25, Y+7	; 0x07
    624a:	81 30       	cpi	r24, 0x01	; 1
    624c:	91 05       	cpc	r25, r1
    624e:	09 f4       	brne	.+2      	; 0x6252 <EXTINT_SetSenseMode+0xf8>
    6250:	42 c0       	rjmp	.+132    	; 0x62d6 <EXTINT_SetSenseMode+0x17c>
    6252:	2e 81       	ldd	r18, Y+6	; 0x06
    6254:	3f 81       	ldd	r19, Y+7	; 0x07
    6256:	22 30       	cpi	r18, 0x02	; 2
    6258:	31 05       	cpc	r19, r1
    625a:	2c f4       	brge	.+10     	; 0x6266 <EXTINT_SetSenseMode+0x10c>
    625c:	8e 81       	ldd	r24, Y+6	; 0x06
    625e:	9f 81       	ldd	r25, Y+7	; 0x07
    6260:	00 97       	sbiw	r24, 0x00	; 0
    6262:	61 f0       	breq	.+24     	; 0x627c <EXTINT_SetSenseMode+0x122>
    6264:	68 c0       	rjmp	.+208    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
    6266:	2e 81       	ldd	r18, Y+6	; 0x06
    6268:	3f 81       	ldd	r19, Y+7	; 0x07
    626a:	22 30       	cpi	r18, 0x02	; 2
    626c:	31 05       	cpc	r19, r1
    626e:	21 f1       	breq	.+72     	; 0x62b8 <EXTINT_SetSenseMode+0x15e>
    6270:	8e 81       	ldd	r24, Y+6	; 0x06
    6272:	9f 81       	ldd	r25, Y+7	; 0x07
    6274:	83 30       	cpi	r24, 0x03	; 3
    6276:	91 05       	cpc	r25, r1
    6278:	81 f0       	breq	.+32     	; 0x629a <EXTINT_SetSenseMode+0x140>
    627a:	5d c0       	rjmp	.+186    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    627c:	a5 e5       	ldi	r26, 0x55	; 85
    627e:	b0 e0       	ldi	r27, 0x00	; 0
    6280:	e5 e5       	ldi	r30, 0x55	; 85
    6282:	f0 e0       	ldi	r31, 0x00	; 0
    6284:	80 81       	ld	r24, Z
    6286:	8b 7f       	andi	r24, 0xFB	; 251
    6288:	8c 93       	st	X, r24
	      CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    628a:	a5 e5       	ldi	r26, 0x55	; 85
    628c:	b0 e0       	ldi	r27, 0x00	; 0
    628e:	e5 e5       	ldi	r30, 0x55	; 85
    6290:	f0 e0       	ldi	r31, 0x00	; 0
    6292:	80 81       	ld	r24, Z
    6294:	87 7f       	andi	r24, 0xF7	; 247
    6296:	8c 93       	st	X, r24
    6298:	4e c0       	rjmp	.+156    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_RAISING_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    629a:	a5 e5       	ldi	r26, 0x55	; 85
    629c:	b0 e0       	ldi	r27, 0x00	; 0
    629e:	e5 e5       	ldi	r30, 0x55	; 85
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	80 81       	ld	r24, Z
    62a4:	84 60       	ori	r24, 0x04	; 4
    62a6:	8c 93       	st	X, r24
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    62a8:	a5 e5       	ldi	r26, 0x55	; 85
    62aa:	b0 e0       	ldi	r27, 0x00	; 0
    62ac:	e5 e5       	ldi	r30, 0x55	; 85
    62ae:	f0 e0       	ldi	r31, 0x00	; 0
    62b0:	80 81       	ld	r24, Z
    62b2:	88 60       	ori	r24, 0x08	; 8
    62b4:	8c 93       	st	X, r24
    62b6:	3f c0       	rjmp	.+126    	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    62b8:	a5 e5       	ldi	r26, 0x55	; 85
    62ba:	b0 e0       	ldi	r27, 0x00	; 0
    62bc:	e5 e5       	ldi	r30, 0x55	; 85
    62be:	f0 e0       	ldi	r31, 0x00	; 0
    62c0:	80 81       	ld	r24, Z
    62c2:	8b 7f       	andi	r24, 0xFB	; 251
    62c4:	8c 93       	st	X, r24
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    62c6:	a5 e5       	ldi	r26, 0x55	; 85
    62c8:	b0 e0       	ldi	r27, 0x00	; 0
    62ca:	e5 e5       	ldi	r30, 0x55	; 85
    62cc:	f0 e0       	ldi	r31, 0x00	; 0
    62ce:	80 81       	ld	r24, Z
    62d0:	88 60       	ori	r24, 0x08	; 8
    62d2:	8c 93       	st	X, r24
    62d4:	30 c0       	rjmp	.+96     	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
    62d6:	a5 e5       	ldi	r26, 0x55	; 85
    62d8:	b0 e0       	ldi	r27, 0x00	; 0
    62da:	e5 e5       	ldi	r30, 0x55	; 85
    62dc:	f0 e0       	ldi	r31, 0x00	; 0
    62de:	80 81       	ld	r24, Z
    62e0:	84 60       	ori	r24, 0x04	; 4
    62e2:	8c 93       	st	X, r24
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
    62e4:	a5 e5       	ldi	r26, 0x55	; 85
    62e6:	b0 e0       	ldi	r27, 0x00	; 0
    62e8:	e5 e5       	ldi	r30, 0x55	; 85
    62ea:	f0 e0       	ldi	r31, 0x00	; 0
    62ec:	80 81       	ld	r24, Z
    62ee:	87 7f       	andi	r24, 0xF7	; 247
    62f0:	8c 93       	st	X, r24
    62f2:	21 c0       	rjmp	.+66     	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		  break;
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT2)
    62f4:	8b 81       	ldd	r24, Y+3	; 0x03
    62f6:	82 30       	cpi	r24, 0x02	; 2
    62f8:	f1 f4       	brne	.+60     	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
    {
		switch(enuSenseMode)
    62fa:	8a 81       	ldd	r24, Y+2	; 0x02
    62fc:	28 2f       	mov	r18, r24
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	3d 83       	std	Y+5, r19	; 0x05
    6302:	2c 83       	std	Y+4, r18	; 0x04
    6304:	8c 81       	ldd	r24, Y+4	; 0x04
    6306:	9d 81       	ldd	r25, Y+5	; 0x05
    6308:	82 30       	cpi	r24, 0x02	; 2
    630a:	91 05       	cpc	r25, r1
    630c:	69 f0       	breq	.+26     	; 0x6328 <EXTINT_SetSenseMode+0x1ce>
    630e:	2c 81       	ldd	r18, Y+4	; 0x04
    6310:	3d 81       	ldd	r19, Y+5	; 0x05
    6312:	23 30       	cpi	r18, 0x03	; 3
    6314:	31 05       	cpc	r19, r1
    6316:	79 f4       	brne	.+30     	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
		{
		case EXT_RAISING_MODE :
			SET_BIT(MCUCSR_R,ISC2_B);
    6318:	a4 e5       	ldi	r26, 0x54	; 84
    631a:	b0 e0       	ldi	r27, 0x00	; 0
    631c:	e4 e5       	ldi	r30, 0x54	; 84
    631e:	f0 e0       	ldi	r31, 0x00	; 0
    6320:	80 81       	ld	r24, Z
    6322:	80 64       	ori	r24, 0x40	; 64
    6324:	8c 93       	st	X, r24
    6326:	07 c0       	rjmp	.+14     	; 0x6336 <EXTINT_SetSenseMode+0x1dc>
			break;
		case EXT_FAILLING_MODE :
			CLEAR_BIT(MCUCSR_R,ISC2_B);
    6328:	a4 e5       	ldi	r26, 0x54	; 84
    632a:	b0 e0       	ldi	r27, 0x00	; 0
    632c:	e4 e5       	ldi	r30, 0x54	; 84
    632e:	f0 e0       	ldi	r31, 0x00	; 0
    6330:	80 81       	ld	r24, Z
    6332:	8f 7b       	andi	r24, 0xBF	; 191
    6334:	8c 93       	st	X, r24
		default:
			break;
		}
    }

	enuStatus = E_OK;
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	89 83       	std	Y+1, r24	; 0x01

	return enuStatus;
    633a:	89 81       	ldd	r24, Y+1	; 0x01
}
    633c:	29 96       	adiw	r28, 0x09	; 9
    633e:	0f b6       	in	r0, 0x3f	; 63
    6340:	f8 94       	cli
    6342:	de bf       	out	0x3e, r29	; 62
    6344:	0f be       	out	0x3f, r0	; 63
    6346:	cd bf       	out	0x3d, r28	; 61
    6348:	cf 91       	pop	r28
    634a:	df 91       	pop	r29
    634c:	08 95       	ret

0000634e <EXTINT_SetCallBack>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuErrorStatus_t EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
    634e:	df 93       	push	r29
    6350:	cf 93       	push	r28
    6352:	00 d0       	rcall	.+0      	; 0x6354 <EXTINT_SetCallBack+0x6>
    6354:	0f 92       	push	r0
    6356:	cd b7       	in	r28, 0x3d	; 61
    6358:	de b7       	in	r29, 0x3e	; 62
    635a:	9a 83       	std	Y+2, r25	; 0x02
    635c:	89 83       	std	Y+1, r24	; 0x01
    635e:	6b 83       	std	Y+3, r22	; 0x03
	if(enuInterruptNum==EXTINT_INT0)
    6360:	8b 81       	ldd	r24, Y+3	; 0x03
    6362:	88 23       	and	r24, r24
    6364:	39 f4       	brne	.+14     	; 0x6374 <EXTINT_SetCallBack+0x26>
		pEXTINT0CallBack = pCallBack;
    6366:	89 81       	ldd	r24, Y+1	; 0x01
    6368:	9a 81       	ldd	r25, Y+2	; 0x02
    636a:	90 93 f9 01 	sts	0x01F9, r25
    636e:	80 93 f8 01 	sts	0x01F8, r24
    6372:	13 c0       	rjmp	.+38     	; 0x639a <EXTINT_SetCallBack+0x4c>
	else if(enuInterruptNum==EXTINT_INT1)
    6374:	8b 81       	ldd	r24, Y+3	; 0x03
    6376:	81 30       	cpi	r24, 0x01	; 1
    6378:	39 f4       	brne	.+14     	; 0x6388 <EXTINT_SetCallBack+0x3a>
		pEXTINT1CallBack = pCallBack;
    637a:	89 81       	ldd	r24, Y+1	; 0x01
    637c:	9a 81       	ldd	r25, Y+2	; 0x02
    637e:	90 93 f5 01 	sts	0x01F5, r25
    6382:	80 93 f4 01 	sts	0x01F4, r24
    6386:	09 c0       	rjmp	.+18     	; 0x639a <EXTINT_SetCallBack+0x4c>
	else if(enuInterruptNum==EXTINT_INT2)
    6388:	8b 81       	ldd	r24, Y+3	; 0x03
    638a:	82 30       	cpi	r24, 0x02	; 2
    638c:	31 f4       	brne	.+12     	; 0x639a <EXTINT_SetCallBack+0x4c>
		pEXTINT2CallBack = pCallBack;
    638e:	89 81       	ldd	r24, Y+1	; 0x01
    6390:	9a 81       	ldd	r25, Y+2	; 0x02
    6392:	90 93 f7 01 	sts	0x01F7, r25
    6396:	80 93 f6 01 	sts	0x01F6, r24

	return E_OK;
    639a:	81 e0       	ldi	r24, 0x01	; 1
}
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	0f 90       	pop	r0
    63a2:	cf 91       	pop	r28
    63a4:	df 91       	pop	r29
    63a6:	08 95       	ret

000063a8 <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
    63a8:	1f 92       	push	r1
    63aa:	0f 92       	push	r0
    63ac:	0f b6       	in	r0, 0x3f	; 63
    63ae:	0f 92       	push	r0
    63b0:	11 24       	eor	r1, r1
    63b2:	2f 93       	push	r18
    63b4:	3f 93       	push	r19
    63b6:	4f 93       	push	r20
    63b8:	5f 93       	push	r21
    63ba:	6f 93       	push	r22
    63bc:	7f 93       	push	r23
    63be:	8f 93       	push	r24
    63c0:	9f 93       	push	r25
    63c2:	af 93       	push	r26
    63c4:	bf 93       	push	r27
    63c6:	ef 93       	push	r30
    63c8:	ff 93       	push	r31
    63ca:	df 93       	push	r29
    63cc:	cf 93       	push	r28
    63ce:	cd b7       	in	r28, 0x3d	; 61
    63d0:	de b7       	in	r29, 0x3e	; 62
	pEXTINT0CallBack();
    63d2:	e0 91 f8 01 	lds	r30, 0x01F8
    63d6:	f0 91 f9 01 	lds	r31, 0x01F9
    63da:	09 95       	icall
}
    63dc:	cf 91       	pop	r28
    63de:	df 91       	pop	r29
    63e0:	ff 91       	pop	r31
    63e2:	ef 91       	pop	r30
    63e4:	bf 91       	pop	r27
    63e6:	af 91       	pop	r26
    63e8:	9f 91       	pop	r25
    63ea:	8f 91       	pop	r24
    63ec:	7f 91       	pop	r23
    63ee:	6f 91       	pop	r22
    63f0:	5f 91       	pop	r21
    63f2:	4f 91       	pop	r20
    63f4:	3f 91       	pop	r19
    63f6:	2f 91       	pop	r18
    63f8:	0f 90       	pop	r0
    63fa:	0f be       	out	0x3f, r0	; 63
    63fc:	0f 90       	pop	r0
    63fe:	1f 90       	pop	r1
    6400:	18 95       	reti

00006402 <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
    6402:	1f 92       	push	r1
    6404:	0f 92       	push	r0
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	0f 92       	push	r0
    640a:	11 24       	eor	r1, r1
    640c:	2f 93       	push	r18
    640e:	3f 93       	push	r19
    6410:	4f 93       	push	r20
    6412:	5f 93       	push	r21
    6414:	6f 93       	push	r22
    6416:	7f 93       	push	r23
    6418:	8f 93       	push	r24
    641a:	9f 93       	push	r25
    641c:	af 93       	push	r26
    641e:	bf 93       	push	r27
    6420:	ef 93       	push	r30
    6422:	ff 93       	push	r31
    6424:	df 93       	push	r29
    6426:	cf 93       	push	r28
    6428:	cd b7       	in	r28, 0x3d	; 61
    642a:	de b7       	in	r29, 0x3e	; 62
	pEXTINT1CallBack();
    642c:	e0 91 f4 01 	lds	r30, 0x01F4
    6430:	f0 91 f5 01 	lds	r31, 0x01F5
    6434:	09 95       	icall
}
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	ff 91       	pop	r31
    643c:	ef 91       	pop	r30
    643e:	bf 91       	pop	r27
    6440:	af 91       	pop	r26
    6442:	9f 91       	pop	r25
    6444:	8f 91       	pop	r24
    6446:	7f 91       	pop	r23
    6448:	6f 91       	pop	r22
    644a:	5f 91       	pop	r21
    644c:	4f 91       	pop	r20
    644e:	3f 91       	pop	r19
    6450:	2f 91       	pop	r18
    6452:	0f 90       	pop	r0
    6454:	0f be       	out	0x3f, r0	; 63
    6456:	0f 90       	pop	r0
    6458:	1f 90       	pop	r1
    645a:	18 95       	reti

0000645c <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
    645c:	1f 92       	push	r1
    645e:	0f 92       	push	r0
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	0f 92       	push	r0
    6464:	11 24       	eor	r1, r1
    6466:	2f 93       	push	r18
    6468:	3f 93       	push	r19
    646a:	4f 93       	push	r20
    646c:	5f 93       	push	r21
    646e:	6f 93       	push	r22
    6470:	7f 93       	push	r23
    6472:	8f 93       	push	r24
    6474:	9f 93       	push	r25
    6476:	af 93       	push	r26
    6478:	bf 93       	push	r27
    647a:	ef 93       	push	r30
    647c:	ff 93       	push	r31
    647e:	df 93       	push	r29
    6480:	cf 93       	push	r28
    6482:	cd b7       	in	r28, 0x3d	; 61
    6484:	de b7       	in	r29, 0x3e	; 62
	pEXTINT2CallBack();
    6486:	e0 91 f6 01 	lds	r30, 0x01F6
    648a:	f0 91 f7 01 	lds	r31, 0x01F7
    648e:	09 95       	icall
}
    6490:	cf 91       	pop	r28
    6492:	df 91       	pop	r29
    6494:	ff 91       	pop	r31
    6496:	ef 91       	pop	r30
    6498:	bf 91       	pop	r27
    649a:	af 91       	pop	r26
    649c:	9f 91       	pop	r25
    649e:	8f 91       	pop	r24
    64a0:	7f 91       	pop	r23
    64a2:	6f 91       	pop	r22
    64a4:	5f 91       	pop	r21
    64a6:	4f 91       	pop	r20
    64a8:	3f 91       	pop	r19
    64aa:	2f 91       	pop	r18
    64ac:	0f 90       	pop	r0
    64ae:	0f be       	out	0x3f, r0	; 63
    64b0:	0f 90       	pop	r0
    64b2:	1f 90       	pop	r1
    64b4:	18 95       	reti

000064b6 <DIO_PinInit>:
* Parameters	: enuDIOPinNo, enuDIOPinDirection, enuDIOPinPullupResistorEnable
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO pin according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_PinInit(enuDIOPinNo_t enuDIOPinNo, enuDIOPinDirection_t enuDIOPinDirection, enuDIOPinPullupResistorEnable_t enuDIOPinPullupResistorEnable)
{
    64b6:	df 93       	push	r29
    64b8:	cf 93       	push	r28
    64ba:	00 d0       	rcall	.+0      	; 0x64bc <DIO_PinInit+0x6>
    64bc:	00 d0       	rcall	.+0      	; 0x64be <DIO_PinInit+0x8>
    64be:	cd b7       	in	r28, 0x3d	; 61
    64c0:	de b7       	in	r29, 0x3e	; 62
    64c2:	8a 83       	std	Y+2, r24	; 0x02
    64c4:	6b 83       	std	Y+3, r22	; 0x03
    64c6:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;

	if((enuDIOPinNo > DIO_PIN_NO_MIN_VALUE)											&& (enuDIOPinNo < DIO_PIN_NO_MAX_VALUE)												&&
    64c8:	8a 81       	ldd	r24, Y+2	; 0x02
    64ca:	80 32       	cpi	r24, 0x20	; 32
    64cc:	08 f0       	brcs	.+2      	; 0x64d0 <DIO_PinInit+0x1a>
    64ce:	8d c0       	rjmp	.+282    	; 0x65ea <DIO_PinInit+0x134>
    64d0:	8b 81       	ldd	r24, Y+3	; 0x03
    64d2:	82 30       	cpi	r24, 0x02	; 2
    64d4:	08 f0       	brcs	.+2      	; 0x64d8 <DIO_PinInit+0x22>
    64d6:	89 c0       	rjmp	.+274    	; 0x65ea <DIO_PinInit+0x134>
    64d8:	8c 81       	ldd	r24, Y+4	; 0x04
    64da:	82 30       	cpi	r24, 0x02	; 2
    64dc:	08 f0       	brcs	.+2      	; 0x64e0 <DIO_PinInit+0x2a>
    64de:	85 c0       	rjmp	.+266    	; 0x65ea <DIO_PinInit+0x134>
		(enuDIOPinDirection > DIO_PIN_DIRECTION_MIN_VALUE)							&& (enuDIOPinDirection < DIO_PIN_DIRECTION_MAX_VALUE)								&&
		(enuDIOPinPullupResistorEnable > DIO_PIN_PULLUP_RESISTOR_ENABLE_MIN_VALUE) 	&& (enuDIOPinPullupResistorEnable < DIO_PIN_PULLUP_RESISTOR_ENABLE_MAX_VALUE))
	{
		/* Setting the direction of data [Input / Output] */
		ASSIGN_BIT(DDRx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), enuDIOPinDirection);
    64e0:	8a 81       	ldd	r24, Y+2	; 0x02
    64e2:	86 95       	lsr	r24
    64e4:	86 95       	lsr	r24
    64e6:	86 95       	lsr	r24
    64e8:	88 2f       	mov	r24, r24
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	fc 01       	movw	r30, r24
    64ee:	e0 58       	subi	r30, 0x80	; 128
    64f0:	fe 4f       	sbci	r31, 0xFE	; 254
    64f2:	80 81       	ld	r24, Z
    64f4:	88 2f       	mov	r24, r24
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	01 97       	sbiw	r24, 0x01	; 1
    64fa:	dc 01       	movw	r26, r24
    64fc:	8a 81       	ldd	r24, Y+2	; 0x02
    64fe:	86 95       	lsr	r24
    6500:	86 95       	lsr	r24
    6502:	86 95       	lsr	r24
    6504:	88 2f       	mov	r24, r24
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	fc 01       	movw	r30, r24
    650a:	e0 58       	subi	r30, 0x80	; 128
    650c:	fe 4f       	sbci	r31, 0xFE	; 254
    650e:	80 81       	ld	r24, Z
    6510:	88 2f       	mov	r24, r24
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	01 97       	sbiw	r24, 0x01	; 1
    6516:	fc 01       	movw	r30, r24
    6518:	80 81       	ld	r24, Z
    651a:	48 2f       	mov	r20, r24
    651c:	8a 81       	ldd	r24, Y+2	; 0x02
    651e:	88 2f       	mov	r24, r24
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	9c 01       	movw	r18, r24
    6524:	27 70       	andi	r18, 0x07	; 7
    6526:	30 70       	andi	r19, 0x00	; 0
    6528:	81 e0       	ldi	r24, 0x01	; 1
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	02 c0       	rjmp	.+4      	; 0x6532 <DIO_PinInit+0x7c>
    652e:	88 0f       	add	r24, r24
    6530:	99 1f       	adc	r25, r25
    6532:	2a 95       	dec	r18
    6534:	e2 f7       	brpl	.-8      	; 0x652e <DIO_PinInit+0x78>
    6536:	80 95       	com	r24
    6538:	48 23       	and	r20, r24
    653a:	8b 81       	ldd	r24, Y+3	; 0x03
    653c:	28 2f       	mov	r18, r24
    653e:	30 e0       	ldi	r19, 0x00	; 0
    6540:	8a 81       	ldd	r24, Y+2	; 0x02
    6542:	88 2f       	mov	r24, r24
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	87 70       	andi	r24, 0x07	; 7
    6548:	90 70       	andi	r25, 0x00	; 0
    654a:	b9 01       	movw	r22, r18
    654c:	02 c0       	rjmp	.+4      	; 0x6552 <DIO_PinInit+0x9c>
    654e:	66 0f       	add	r22, r22
    6550:	77 1f       	adc	r23, r23
    6552:	8a 95       	dec	r24
    6554:	e2 f7       	brpl	.-8      	; 0x654e <DIO_PinInit+0x98>
    6556:	cb 01       	movw	r24, r22
    6558:	84 2b       	or	r24, r20
    655a:	8c 93       	st	X, r24
		/* Selecting whether a pull-up resistor is connected to the selected pin or not */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), enuDIOPinPullupResistorEnable);
    655c:	8a 81       	ldd	r24, Y+2	; 0x02
    655e:	86 95       	lsr	r24
    6560:	86 95       	lsr	r24
    6562:	86 95       	lsr	r24
    6564:	88 2f       	mov	r24, r24
    6566:	90 e0       	ldi	r25, 0x00	; 0
    6568:	fc 01       	movw	r30, r24
    656a:	e0 58       	subi	r30, 0x80	; 128
    656c:	fe 4f       	sbci	r31, 0xFE	; 254
    656e:	80 81       	ld	r24, Z
    6570:	88 2f       	mov	r24, r24
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	dc 01       	movw	r26, r24
    6576:	8a 81       	ldd	r24, Y+2	; 0x02
    6578:	86 95       	lsr	r24
    657a:	86 95       	lsr	r24
    657c:	86 95       	lsr	r24
    657e:	88 2f       	mov	r24, r24
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	fc 01       	movw	r30, r24
    6584:	e0 58       	subi	r30, 0x80	; 128
    6586:	fe 4f       	sbci	r31, 0xFE	; 254
    6588:	80 81       	ld	r24, Z
    658a:	88 2f       	mov	r24, r24
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	fc 01       	movw	r30, r24
    6590:	80 81       	ld	r24, Z
    6592:	48 2f       	mov	r20, r24
    6594:	8a 81       	ldd	r24, Y+2	; 0x02
    6596:	88 2f       	mov	r24, r24
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	9c 01       	movw	r18, r24
    659c:	27 70       	andi	r18, 0x07	; 7
    659e:	30 70       	andi	r19, 0x00	; 0
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	02 c0       	rjmp	.+4      	; 0x65aa <DIO_PinInit+0xf4>
    65a6:	88 0f       	add	r24, r24
    65a8:	99 1f       	adc	r25, r25
    65aa:	2a 95       	dec	r18
    65ac:	e2 f7       	brpl	.-8      	; 0x65a6 <DIO_PinInit+0xf0>
    65ae:	80 95       	com	r24
    65b0:	48 23       	and	r20, r24
    65b2:	8c 81       	ldd	r24, Y+4	; 0x04
    65b4:	28 2f       	mov	r18, r24
    65b6:	30 e0       	ldi	r19, 0x00	; 0
    65b8:	8a 81       	ldd	r24, Y+2	; 0x02
    65ba:	88 2f       	mov	r24, r24
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	87 70       	andi	r24, 0x07	; 7
    65c0:	90 70       	andi	r25, 0x00	; 0
    65c2:	b9 01       	movw	r22, r18
    65c4:	02 c0       	rjmp	.+4      	; 0x65ca <DIO_PinInit+0x114>
    65c6:	66 0f       	add	r22, r22
    65c8:	77 1f       	adc	r23, r23
    65ca:	8a 95       	dec	r24
    65cc:	e2 f7       	brpl	.-8      	; 0x65c6 <DIO_PinInit+0x110>
    65ce:	cb 01       	movw	r24, r22
    65d0:	84 2b       	or	r24, r20
    65d2:	8c 93       	st	X, r24
		aenuDIOPinState[enuDIOPinNo] = DIO_INIT_DONE;
    65d4:	8a 81       	ldd	r24, Y+2	; 0x02
    65d6:	88 2f       	mov	r24, r24
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	fc 01       	movw	r30, r24
    65dc:	ea 54       	subi	r30, 0x4A	; 74
    65de:	fe 4f       	sbci	r31, 0xFE	; 254
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    65e4:	81 e0       	ldi	r24, 0x01	; 1
    65e6:	89 83       	std	Y+1, r24	; 0x01
    65e8:	01 c0       	rjmp	.+2      	; 0x65ec <DIO_PinInit+0x136>
	}
	else
	{
		enuRetVar = E_ERROR;
    65ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    65ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    65ee:	0f 90       	pop	r0
    65f0:	0f 90       	pop	r0
    65f2:	0f 90       	pop	r0
    65f4:	0f 90       	pop	r0
    65f6:	cf 91       	pop	r28
    65f8:	df 91       	pop	r29
    65fa:	08 95       	ret

000065fc <DIO_PortInit>:
* Parameters	: enuDIOPortNo, u8DIOPortDirection, u8DIOPortPullupResistorEnable
* Return Value	: enuErrorStatus_t
* Description  : Initialize one DIO port according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_PortInit(enuDIOPortNo_t enuDIOPortNo, uint8_t u8DIOPortDirection, uint8_t u8DIOPortPullupResistorEnable)
{
    65fc:	df 93       	push	r29
    65fe:	cf 93       	push	r28
    6600:	00 d0       	rcall	.+0      	; 0x6602 <DIO_PortInit+0x6>
    6602:	00 d0       	rcall	.+0      	; 0x6604 <DIO_PortInit+0x8>
    6604:	cd b7       	in	r28, 0x3d	; 61
    6606:	de b7       	in	r29, 0x3e	; 62
    6608:	8a 83       	std	Y+2, r24	; 0x02
    660a:	6b 83       	std	Y+3, r22	; 0x03
    660c:	4c 83       	std	Y+4, r20	; 0x04
	enuErrorStatus_t enuRetVar;

	if((enuDIOPortNo > DIO_PORT_NO_MIN_VALUE)											&& (enuDIOPortNo < DIO_PORT_NO_MAX_VALUE)													&&
    660e:	8a 81       	ldd	r24, Y+2	; 0x02
    6610:	84 30       	cpi	r24, 0x04	; 4
    6612:	20 f5       	brcc	.+72     	; 0x665c <DIO_PortInit+0x60>
		(u8DIOPortDirection >= DIO_PORT_DIRECTION_MIN_VALUE)							&& (u8DIOPortDirection <= DIO_PORT_DIRECTION_MAX_VALUE)								&&
		(u8DIOPortPullupResistorEnable >= DIO_PORT_PULLUP_RESISTOR_ENABLE_MIN_VALUE)	&& (u8DIOPortPullupResistorEnable <= DIO_PORT_PULLUP_RESISTOR_ENABLE_MAX_VALUE))
	{
		/* Setting the direction of data [Input / Output] */
		DDRx_R(enuDIOPortNo) = u8DIOPortDirection;
    6614:	8a 81       	ldd	r24, Y+2	; 0x02
    6616:	88 2f       	mov	r24, r24
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	fc 01       	movw	r30, r24
    661c:	e0 58       	subi	r30, 0x80	; 128
    661e:	fe 4f       	sbci	r31, 0xFE	; 254
    6620:	80 81       	ld	r24, Z
    6622:	88 2f       	mov	r24, r24
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	01 97       	sbiw	r24, 0x01	; 1
    6628:	fc 01       	movw	r30, r24
    662a:	8b 81       	ldd	r24, Y+3	; 0x03
    662c:	80 83       	st	Z, r24
		/* Selecting whether a pull-up resistor is connected to the selected port or not */
		PORTx_R(enuDIOPortNo) = u8DIOPortPullupResistorEnable;
    662e:	8a 81       	ldd	r24, Y+2	; 0x02
    6630:	88 2f       	mov	r24, r24
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	fc 01       	movw	r30, r24
    6636:	e0 58       	subi	r30, 0x80	; 128
    6638:	fe 4f       	sbci	r31, 0xFE	; 254
    663a:	80 81       	ld	r24, Z
    663c:	88 2f       	mov	r24, r24
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	fc 01       	movw	r30, r24
    6642:	8c 81       	ldd	r24, Y+4	; 0x04
    6644:	80 83       	st	Z, r24
		aenuDIOPortState[enuDIOPortNo] = DIO_INIT_DONE;
    6646:	8a 81       	ldd	r24, Y+2	; 0x02
    6648:	88 2f       	mov	r24, r24
    664a:	90 e0       	ldi	r25, 0x00	; 0
    664c:	fc 01       	movw	r30, r24
    664e:	ea 52       	subi	r30, 0x2A	; 42
    6650:	fe 4f       	sbci	r31, 0xFE	; 254
    6652:	81 e0       	ldi	r24, 0x01	; 1
    6654:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    6656:	81 e0       	ldi	r24, 0x01	; 1
    6658:	89 83       	std	Y+1, r24	; 0x01
    665a:	01 c0       	rjmp	.+2      	; 0x665e <DIO_PortInit+0x62>
	}
	else
	{
		enuRetVar = E_ERROR;
    665c:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    665e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6660:	0f 90       	pop	r0
    6662:	0f 90       	pop	r0
    6664:	0f 90       	pop	r0
    6666:	0f 90       	pop	r0
    6668:	cf 91       	pop	r28
    666a:	df 91       	pop	r29
    666c:	08 95       	ret

0000666e <DIO_PinWrite>:
* Parameters	: enuDIOPinNo, u8PinData
* Return Value	: enuErrorStatus_t
* Description  : Write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinWrite(enuDIOPinNo_t enuDIOPinNo, uint8_t u8PinData)
{
    666e:	df 93       	push	r29
    6670:	cf 93       	push	r28
    6672:	00 d0       	rcall	.+0      	; 0x6674 <DIO_PinWrite+0x6>
    6674:	0f 92       	push	r0
    6676:	cd b7       	in	r28, 0x3d	; 61
    6678:	de b7       	in	r29, 0x3e	; 62
    667a:	8a 83       	std	Y+2, r24	; 0x02
    667c:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    667e:	8a 81       	ldd	r24, Y+2	; 0x02
    6680:	88 2f       	mov	r24, r24
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	fc 01       	movw	r30, r24
    6686:	ea 54       	subi	r30, 0x4A	; 74
    6688:	fe 4f       	sbci	r31, 0xFE	; 254
    668a:	80 81       	ld	r24, Z
    668c:	81 30       	cpi	r24, 0x01	; 1
    668e:	09 f0       	breq	.+2      	; 0x6692 <DIO_PinWrite+0x24>
    6690:	3f c0       	rjmp	.+126    	; 0x6710 <DIO_PinWrite+0xa2>
	{
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), u8PinData);
    6692:	8a 81       	ldd	r24, Y+2	; 0x02
    6694:	86 95       	lsr	r24
    6696:	86 95       	lsr	r24
    6698:	86 95       	lsr	r24
    669a:	88 2f       	mov	r24, r24
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	fc 01       	movw	r30, r24
    66a0:	e0 58       	subi	r30, 0x80	; 128
    66a2:	fe 4f       	sbci	r31, 0xFE	; 254
    66a4:	80 81       	ld	r24, Z
    66a6:	88 2f       	mov	r24, r24
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	dc 01       	movw	r26, r24
    66ac:	8a 81       	ldd	r24, Y+2	; 0x02
    66ae:	86 95       	lsr	r24
    66b0:	86 95       	lsr	r24
    66b2:	86 95       	lsr	r24
    66b4:	88 2f       	mov	r24, r24
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	fc 01       	movw	r30, r24
    66ba:	e0 58       	subi	r30, 0x80	; 128
    66bc:	fe 4f       	sbci	r31, 0xFE	; 254
    66be:	80 81       	ld	r24, Z
    66c0:	88 2f       	mov	r24, r24
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	fc 01       	movw	r30, r24
    66c6:	80 81       	ld	r24, Z
    66c8:	48 2f       	mov	r20, r24
    66ca:	8a 81       	ldd	r24, Y+2	; 0x02
    66cc:	88 2f       	mov	r24, r24
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	9c 01       	movw	r18, r24
    66d2:	27 70       	andi	r18, 0x07	; 7
    66d4:	30 70       	andi	r19, 0x00	; 0
    66d6:	81 e0       	ldi	r24, 0x01	; 1
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	02 c0       	rjmp	.+4      	; 0x66e0 <DIO_PinWrite+0x72>
    66dc:	88 0f       	add	r24, r24
    66de:	99 1f       	adc	r25, r25
    66e0:	2a 95       	dec	r18
    66e2:	e2 f7       	brpl	.-8      	; 0x66dc <DIO_PinWrite+0x6e>
    66e4:	80 95       	com	r24
    66e6:	48 23       	and	r20, r24
    66e8:	8b 81       	ldd	r24, Y+3	; 0x03
    66ea:	28 2f       	mov	r18, r24
    66ec:	30 e0       	ldi	r19, 0x00	; 0
    66ee:	8a 81       	ldd	r24, Y+2	; 0x02
    66f0:	88 2f       	mov	r24, r24
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	87 70       	andi	r24, 0x07	; 7
    66f6:	90 70       	andi	r25, 0x00	; 0
    66f8:	b9 01       	movw	r22, r18
    66fa:	02 c0       	rjmp	.+4      	; 0x6700 <DIO_PinWrite+0x92>
    66fc:	66 0f       	add	r22, r22
    66fe:	77 1f       	adc	r23, r23
    6700:	8a 95       	dec	r24
    6702:	e2 f7       	brpl	.-8      	; 0x66fc <DIO_PinWrite+0x8e>
    6704:	cb 01       	movw	r24, r22
    6706:	84 2b       	or	r24, r20
    6708:	8c 93       	st	X, r24
		enuRetVar = E_OK;
    670a:	81 e0       	ldi	r24, 0x01	; 1
    670c:	89 83       	std	Y+1, r24	; 0x01
    670e:	01 c0       	rjmp	.+2      	; 0x6712 <DIO_PinWrite+0xa4>
	}
	else
	{
		enuRetVar = E_ERROR;
    6710:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    6712:	89 81       	ldd	r24, Y+1	; 0x01
}
    6714:	0f 90       	pop	r0
    6716:	0f 90       	pop	r0
    6718:	0f 90       	pop	r0
    671a:	cf 91       	pop	r28
    671c:	df 91       	pop	r29
    671e:	08 95       	ret

00006720 <DIO_PortWrite>:
* Parameters	: enuDIOPortNo, u8PortData
* Return Value	: enuErrorStatus_t
* Description  : Write a digital value into the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortWrite(enuDIOPortNo_t enuDIOPortNo, uint8_t u8PortData)
{
    6720:	df 93       	push	r29
    6722:	cf 93       	push	r28
    6724:	00 d0       	rcall	.+0      	; 0x6726 <DIO_PortWrite+0x6>
    6726:	0f 92       	push	r0
    6728:	cd b7       	in	r28, 0x3d	; 61
    672a:	de b7       	in	r29, 0x3e	; 62
    672c:	8a 83       	std	Y+2, r24	; 0x02
    672e:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    6730:	8a 81       	ldd	r24, Y+2	; 0x02
    6732:	88 2f       	mov	r24, r24
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	fc 01       	movw	r30, r24
    6738:	ea 52       	subi	r30, 0x2A	; 42
    673a:	fe 4f       	sbci	r31, 0xFE	; 254
    673c:	80 81       	ld	r24, Z
    673e:	81 30       	cpi	r24, 0x01	; 1
    6740:	79 f4       	brne	.+30     	; 0x6760 <DIO_PortWrite+0x40>
	{
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = u8PortData;
    6742:	8a 81       	ldd	r24, Y+2	; 0x02
    6744:	88 2f       	mov	r24, r24
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	fc 01       	movw	r30, r24
    674a:	e0 58       	subi	r30, 0x80	; 128
    674c:	fe 4f       	sbci	r31, 0xFE	; 254
    674e:	80 81       	ld	r24, Z
    6750:	88 2f       	mov	r24, r24
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	fc 01       	movw	r30, r24
    6756:	8b 81       	ldd	r24, Y+3	; 0x03
    6758:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    675a:	81 e0       	ldi	r24, 0x01	; 1
    675c:	89 83       	std	Y+1, r24	; 0x01
    675e:	01 c0       	rjmp	.+2      	; 0x6762 <DIO_PortWrite+0x42>
	}
	else
	{
		enuRetVar = E_ERROR;
    6760:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    6762:	89 81       	ldd	r24, Y+1	; 0x01
}
    6764:	0f 90       	pop	r0
    6766:	0f 90       	pop	r0
    6768:	0f 90       	pop	r0
    676a:	cf 91       	pop	r28
    676c:	df 91       	pop	r29
    676e:	08 95       	ret

00006770 <DIO_PinRead>:
* Parameters	: enuDIOPinNo, pu8PinData
* Return Value	: enuErrorStatus_t
* Description  : Read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinRead(enuDIOPinNo_t enuDIOPinNo, uint8_t* pu8PinData)
{
    6770:	df 93       	push	r29
    6772:	cf 93       	push	r28
    6774:	00 d0       	rcall	.+0      	; 0x6776 <DIO_PinRead+0x6>
    6776:	00 d0       	rcall	.+0      	; 0x6778 <DIO_PinRead+0x8>
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	8a 83       	std	Y+2, r24	; 0x02
    677e:	7c 83       	std	Y+4, r23	; 0x04
    6780:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    6782:	8a 81       	ldd	r24, Y+2	; 0x02
    6784:	88 2f       	mov	r24, r24
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	fc 01       	movw	r30, r24
    678a:	ea 54       	subi	r30, 0x4A	; 74
    678c:	fe 4f       	sbci	r31, 0xFE	; 254
    678e:	80 81       	ld	r24, Z
    6790:	81 30       	cpi	r24, 0x01	; 1
    6792:	99 f5       	brne	.+102    	; 0x67fa <DIO_PinRead+0x8a>
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    6794:	8a 81       	ldd	r24, Y+2	; 0x02
    6796:	86 95       	lsr	r24
    6798:	86 95       	lsr	r24
    679a:	86 95       	lsr	r24
    679c:	88 2f       	mov	r24, r24
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	fc 01       	movw	r30, r24
    67a2:	e0 58       	subi	r30, 0x80	; 128
    67a4:	fe 4f       	sbci	r31, 0xFE	; 254
    67a6:	80 81       	ld	r24, Z
    67a8:	88 2f       	mov	r24, r24
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	02 97       	sbiw	r24, 0x02	; 2
    67ae:	fc 01       	movw	r30, r24
    67b0:	80 81       	ld	r24, Z
    67b2:	48 2f       	mov	r20, r24
    67b4:	50 e0       	ldi	r21, 0x00	; 0
    67b6:	8a 81       	ldd	r24, Y+2	; 0x02
    67b8:	88 2f       	mov	r24, r24
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	9c 01       	movw	r18, r24
    67be:	27 70       	andi	r18, 0x07	; 7
    67c0:	30 70       	andi	r19, 0x00	; 0
    67c2:	81 e0       	ldi	r24, 0x01	; 1
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <DIO_PinRead+0x5c>
    67c8:	88 0f       	add	r24, r24
    67ca:	99 1f       	adc	r25, r25
    67cc:	2a 95       	dec	r18
    67ce:	e2 f7       	brpl	.-8      	; 0x67c8 <DIO_PinRead+0x58>
    67d0:	9a 01       	movw	r18, r20
    67d2:	28 23       	and	r18, r24
    67d4:	39 23       	and	r19, r25
    67d6:	8a 81       	ldd	r24, Y+2	; 0x02
    67d8:	88 2f       	mov	r24, r24
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	87 70       	andi	r24, 0x07	; 7
    67de:	90 70       	andi	r25, 0x00	; 0
    67e0:	a9 01       	movw	r20, r18
    67e2:	02 c0       	rjmp	.+4      	; 0x67e8 <DIO_PinRead+0x78>
    67e4:	55 95       	asr	r21
    67e6:	47 95       	ror	r20
    67e8:	8a 95       	dec	r24
    67ea:	e2 f7       	brpl	.-8      	; 0x67e4 <DIO_PinRead+0x74>
    67ec:	ca 01       	movw	r24, r20
    67ee:	eb 81       	ldd	r30, Y+3	; 0x03
    67f0:	fc 81       	ldd	r31, Y+4	; 0x04
    67f2:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	89 83       	std	Y+1, r24	; 0x01
    67f8:	01 c0       	rjmp	.+2      	; 0x67fc <DIO_PinRead+0x8c>
	}
	else
	{
		enuRetVar = E_ERROR;
    67fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    67fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    67fe:	0f 90       	pop	r0
    6800:	0f 90       	pop	r0
    6802:	0f 90       	pop	r0
    6804:	0f 90       	pop	r0
    6806:	cf 91       	pop	r28
    6808:	df 91       	pop	r29
    680a:	08 95       	ret

0000680c <DIO_PortRead>:
* Parameters	: enuDIOPortNo, pu8PortData
* Return Value	: enuErrorStatus_t
* Description  : Read a digital value from the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortRead(enuDIOPortNo_t enuDIOPortNo, uint8_t* pu8PortData)
{
    680c:	df 93       	push	r29
    680e:	cf 93       	push	r28
    6810:	00 d0       	rcall	.+0      	; 0x6812 <DIO_PortRead+0x6>
    6812:	00 d0       	rcall	.+0      	; 0x6814 <DIO_PortRead+0x8>
    6814:	cd b7       	in	r28, 0x3d	; 61
    6816:	de b7       	in	r29, 0x3e	; 62
    6818:	8a 83       	std	Y+2, r24	; 0x02
    681a:	7c 83       	std	Y+4, r23	; 0x04
    681c:	6b 83       	std	Y+3, r22	; 0x03
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    681e:	8a 81       	ldd	r24, Y+2	; 0x02
    6820:	88 2f       	mov	r24, r24
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	fc 01       	movw	r30, r24
    6826:	ea 52       	subi	r30, 0x2A	; 42
    6828:	fe 4f       	sbci	r31, 0xFE	; 254
    682a:	80 81       	ld	r24, Z
    682c:	81 30       	cpi	r24, 0x01	; 1
    682e:	91 f4       	brne	.+36     	; 0x6854 <DIO_PortRead+0x48>
	{
		/* Reading the value from the corresponding port */
		*pu8PortData = PINx_R(enuDIOPortNo);
    6830:	8a 81       	ldd	r24, Y+2	; 0x02
    6832:	88 2f       	mov	r24, r24
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	fc 01       	movw	r30, r24
    6838:	e0 58       	subi	r30, 0x80	; 128
    683a:	fe 4f       	sbci	r31, 0xFE	; 254
    683c:	80 81       	ld	r24, Z
    683e:	88 2f       	mov	r24, r24
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	02 97       	sbiw	r24, 0x02	; 2
    6844:	fc 01       	movw	r30, r24
    6846:	80 81       	ld	r24, Z
    6848:	eb 81       	ldd	r30, Y+3	; 0x03
    684a:	fc 81       	ldd	r31, Y+4	; 0x04
    684c:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    684e:	81 e0       	ldi	r24, 0x01	; 1
    6850:	89 83       	std	Y+1, r24	; 0x01
    6852:	01 c0       	rjmp	.+2      	; 0x6856 <DIO_PortRead+0x4a>
	}
	else
	{
		enuRetVar = E_ERROR;
    6854:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;	
    6856:	89 81       	ldd	r24, Y+1	; 0x01
}
    6858:	0f 90       	pop	r0
    685a:	0f 90       	pop	r0
    685c:	0f 90       	pop	r0
    685e:	0f 90       	pop	r0
    6860:	cf 91       	pop	r28
    6862:	df 91       	pop	r29
    6864:	08 95       	ret

00006866 <DIO_PinToggle>:
* Parameters	: enuDIOPinNo
* Return Value	: enuErrorStatus_t
* Description  : Toggle the digital value of the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_PinToggle(enuDIOPinNo_t enuDIOPinNo)
{
    6866:	df 93       	push	r29
    6868:	cf 93       	push	r28
    686a:	00 d0       	rcall	.+0      	; 0x686c <DIO_PinToggle+0x6>
    686c:	0f 92       	push	r0
    686e:	cd b7       	in	r28, 0x3d	; 61
    6870:	de b7       	in	r29, 0x3e	; 62
    6872:	8b 83       	std	Y+3, r24	; 0x03
	enuErrorStatus_t enuRetVar;
	uint8_t u8PinData;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    6874:	8b 81       	ldd	r24, Y+3	; 0x03
    6876:	88 2f       	mov	r24, r24
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	fc 01       	movw	r30, r24
    687c:	ea 54       	subi	r30, 0x4A	; 74
    687e:	fe 4f       	sbci	r31, 0xFE	; 254
    6880:	80 81       	ld	r24, Z
    6882:	81 30       	cpi	r24, 0x01	; 1
    6884:	09 f0       	breq	.+2      	; 0x6888 <DIO_PinToggle+0x22>
    6886:	70 c0       	rjmp	.+224    	; 0x6968 <DIO_PinToggle+0x102>
	{
      
		/* Reading the value from the corresponding pin */
		u8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    6888:	8b 81       	ldd	r24, Y+3	; 0x03
    688a:	86 95       	lsr	r24
    688c:	86 95       	lsr	r24
    688e:	86 95       	lsr	r24
    6890:	88 2f       	mov	r24, r24
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	fc 01       	movw	r30, r24
    6896:	e0 58       	subi	r30, 0x80	; 128
    6898:	fe 4f       	sbci	r31, 0xFE	; 254
    689a:	80 81       	ld	r24, Z
    689c:	88 2f       	mov	r24, r24
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	02 97       	sbiw	r24, 0x02	; 2
    68a2:	fc 01       	movw	r30, r24
    68a4:	80 81       	ld	r24, Z
    68a6:	48 2f       	mov	r20, r24
    68a8:	50 e0       	ldi	r21, 0x00	; 0
    68aa:	8b 81       	ldd	r24, Y+3	; 0x03
    68ac:	88 2f       	mov	r24, r24
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	9c 01       	movw	r18, r24
    68b2:	27 70       	andi	r18, 0x07	; 7
    68b4:	30 70       	andi	r19, 0x00	; 0
    68b6:	81 e0       	ldi	r24, 0x01	; 1
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <DIO_PinToggle+0x5a>
    68bc:	88 0f       	add	r24, r24
    68be:	99 1f       	adc	r25, r25
    68c0:	2a 95       	dec	r18
    68c2:	e2 f7       	brpl	.-8      	; 0x68bc <DIO_PinToggle+0x56>
    68c4:	9a 01       	movw	r18, r20
    68c6:	28 23       	and	r18, r24
    68c8:	39 23       	and	r19, r25
    68ca:	8b 81       	ldd	r24, Y+3	; 0x03
    68cc:	88 2f       	mov	r24, r24
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	87 70       	andi	r24, 0x07	; 7
    68d2:	90 70       	andi	r25, 0x00	; 0
    68d4:	a9 01       	movw	r20, r18
    68d6:	02 c0       	rjmp	.+4      	; 0x68dc <DIO_PinToggle+0x76>
    68d8:	55 95       	asr	r21
    68da:	47 95       	ror	r20
    68dc:	8a 95       	dec	r24
    68de:	e2 f7       	brpl	.-8      	; 0x68d8 <DIO_PinToggle+0x72>
    68e0:	ca 01       	movw	r24, r20
    68e2:	89 83       	std	Y+1, r24	; 0x01
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), ~u8PinData);
    68e4:	8b 81       	ldd	r24, Y+3	; 0x03
    68e6:	86 95       	lsr	r24
    68e8:	86 95       	lsr	r24
    68ea:	86 95       	lsr	r24
    68ec:	88 2f       	mov	r24, r24
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	fc 01       	movw	r30, r24
    68f2:	e0 58       	subi	r30, 0x80	; 128
    68f4:	fe 4f       	sbci	r31, 0xFE	; 254
    68f6:	80 81       	ld	r24, Z
    68f8:	88 2f       	mov	r24, r24
    68fa:	90 e0       	ldi	r25, 0x00	; 0
    68fc:	dc 01       	movw	r26, r24
    68fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6900:	86 95       	lsr	r24
    6902:	86 95       	lsr	r24
    6904:	86 95       	lsr	r24
    6906:	88 2f       	mov	r24, r24
    6908:	90 e0       	ldi	r25, 0x00	; 0
    690a:	fc 01       	movw	r30, r24
    690c:	e0 58       	subi	r30, 0x80	; 128
    690e:	fe 4f       	sbci	r31, 0xFE	; 254
    6910:	80 81       	ld	r24, Z
    6912:	88 2f       	mov	r24, r24
    6914:	90 e0       	ldi	r25, 0x00	; 0
    6916:	fc 01       	movw	r30, r24
    6918:	80 81       	ld	r24, Z
    691a:	48 2f       	mov	r20, r24
    691c:	8b 81       	ldd	r24, Y+3	; 0x03
    691e:	88 2f       	mov	r24, r24
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	9c 01       	movw	r18, r24
    6924:	27 70       	andi	r18, 0x07	; 7
    6926:	30 70       	andi	r19, 0x00	; 0
    6928:	81 e0       	ldi	r24, 0x01	; 1
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	02 c0       	rjmp	.+4      	; 0x6932 <DIO_PinToggle+0xcc>
    692e:	88 0f       	add	r24, r24
    6930:	99 1f       	adc	r25, r25
    6932:	2a 95       	dec	r18
    6934:	e2 f7       	brpl	.-8      	; 0x692e <DIO_PinToggle+0xc8>
    6936:	80 95       	com	r24
    6938:	48 23       	and	r20, r24
    693a:	89 81       	ldd	r24, Y+1	; 0x01
    693c:	88 2f       	mov	r24, r24
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	9c 01       	movw	r18, r24
    6942:	20 95       	com	r18
    6944:	30 95       	com	r19
    6946:	8b 81       	ldd	r24, Y+3	; 0x03
    6948:	88 2f       	mov	r24, r24
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	87 70       	andi	r24, 0x07	; 7
    694e:	90 70       	andi	r25, 0x00	; 0
    6950:	b9 01       	movw	r22, r18
    6952:	02 c0       	rjmp	.+4      	; 0x6958 <DIO_PinToggle+0xf2>
    6954:	66 0f       	add	r22, r22
    6956:	77 1f       	adc	r23, r23
    6958:	8a 95       	dec	r24
    695a:	e2 f7       	brpl	.-8      	; 0x6954 <DIO_PinToggle+0xee>
    695c:	cb 01       	movw	r24, r22
    695e:	84 2b       	or	r24, r20
    6960:	8c 93       	st	X, r24
		enuRetVar = E_OK;
    6962:	81 e0       	ldi	r24, 0x01	; 1
    6964:	8a 83       	std	Y+2, r24	; 0x02
    6966:	01 c0       	rjmp	.+2      	; 0x696a <DIO_PinToggle+0x104>
	}
	else
	{
		enuRetVar = E_ERROR;
    6968:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;	
    696a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    696c:	0f 90       	pop	r0
    696e:	0f 90       	pop	r0
    6970:	0f 90       	pop	r0
    6972:	cf 91       	pop	r28
    6974:	df 91       	pop	r29
    6976:	08 95       	ret

00006978 <DIO_PortToggle>:
* Parameters	: enuDIOPortNo
* Return Value	: enuErrorStatus_t
* Description  : Toggle the digital value of the selected DIO port
*************************************************************************************************/
enuErrorStatus_t DIO_PortToggle(enuDIOPortNo_t enuDIOPortNo)
{
    6978:	df 93       	push	r29
    697a:	cf 93       	push	r28
    697c:	00 d0       	rcall	.+0      	; 0x697e <DIO_PortToggle+0x6>
    697e:	0f 92       	push	r0
    6980:	cd b7       	in	r28, 0x3d	; 61
    6982:	de b7       	in	r29, 0x3e	; 62
    6984:	8b 83       	std	Y+3, r24	; 0x03
	enuErrorStatus_t enuRetVar;
	uint8_t u8PortData;
	
	if(aenuDIOPortState[enuDIOPortNo] == DIO_INIT_DONE)
    6986:	8b 81       	ldd	r24, Y+3	; 0x03
    6988:	88 2f       	mov	r24, r24
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	fc 01       	movw	r30, r24
    698e:	ea 52       	subi	r30, 0x2A	; 42
    6990:	fe 4f       	sbci	r31, 0xFE	; 254
    6992:	80 81       	ld	r24, Z
    6994:	81 30       	cpi	r24, 0x01	; 1
    6996:	e9 f4       	brne	.+58     	; 0x69d2 <DIO_PortToggle+0x5a>
	{
		/* Reading the value from the corresponding port */
		u8PortData = PINx_R(enuDIOPortNo);
    6998:	8b 81       	ldd	r24, Y+3	; 0x03
    699a:	88 2f       	mov	r24, r24
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	fc 01       	movw	r30, r24
    69a0:	e0 58       	subi	r30, 0x80	; 128
    69a2:	fe 4f       	sbci	r31, 0xFE	; 254
    69a4:	80 81       	ld	r24, Z
    69a6:	88 2f       	mov	r24, r24
    69a8:	90 e0       	ldi	r25, 0x00	; 0
    69aa:	02 97       	sbiw	r24, 0x02	; 2
    69ac:	fc 01       	movw	r30, r24
    69ae:	80 81       	ld	r24, Z
    69b0:	89 83       	std	Y+1, r24	; 0x01
		/* Writing the value into the corresponding port */
		PORTx_R(enuDIOPortNo) = ~u8PortData;
    69b2:	8b 81       	ldd	r24, Y+3	; 0x03
    69b4:	88 2f       	mov	r24, r24
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	fc 01       	movw	r30, r24
    69ba:	e0 58       	subi	r30, 0x80	; 128
    69bc:	fe 4f       	sbci	r31, 0xFE	; 254
    69be:	80 81       	ld	r24, Z
    69c0:	88 2f       	mov	r24, r24
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	fc 01       	movw	r30, r24
    69c6:	89 81       	ldd	r24, Y+1	; 0x01
    69c8:	80 95       	com	r24
    69ca:	80 83       	st	Z, r24
		enuRetVar = E_OK;
    69cc:	81 e0       	ldi	r24, 0x01	; 1
    69ce:	8a 83       	std	Y+2, r24	; 0x02
    69d0:	01 c0       	rjmp	.+2      	; 0x69d4 <DIO_PortToggle+0x5c>
	}
	else
	{
		enuRetVar = E_ERROR;
    69d2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return enuRetVar;	
    69d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    69d6:	0f 90       	pop	r0
    69d8:	0f 90       	pop	r0
    69da:	0f 90       	pop	r0
    69dc:	cf 91       	pop	r28
    69de:	df 91       	pop	r29
    69e0:	08 95       	ret

000069e2 <Get_Readings>:
* Parameters (out): None
* Return value    : void
* Description     : A function to record ICU readings - Callback function
************************************************************************************/
static void Get_Readings(void)
{
    69e2:	df 93       	push	r29
    69e4:	cf 93       	push	r28
    69e6:	00 d0       	rcall	.+0      	; 0x69e8 <Get_Readings+0x6>
    69e8:	cd b7       	in	r28, 0x3d	; 61
    69ea:	de b7       	in	r29, 0x3e	; 62
   //create a state flag
   static enuReadingState_t u8Flag=GETTING_RISING_EDGE;
   //check on the flag condition
   switch (u8Flag)
    69ec:	80 91 e3 01 	lds	r24, 0x01E3
    69f0:	28 2f       	mov	r18, r24
    69f2:	30 e0       	ldi	r19, 0x00	; 0
    69f4:	3a 83       	std	Y+2, r19	; 0x02
    69f6:	29 83       	std	Y+1, r18	; 0x01
    69f8:	89 81       	ldd	r24, Y+1	; 0x01
    69fa:	9a 81       	ldd	r25, Y+2	; 0x02
    69fc:	00 97       	sbiw	r24, 0x00	; 0
    69fe:	31 f0       	breq	.+12     	; 0x6a0c <Get_Readings+0x2a>
    6a00:	29 81       	ldd	r18, Y+1	; 0x01
    6a02:	3a 81       	ldd	r19, Y+2	; 0x02
    6a04:	21 30       	cpi	r18, 0x01	; 1
    6a06:	31 05       	cpc	r19, r1
    6a08:	61 f0       	breq	.+24     	; 0x6a22 <Get_Readings+0x40>
    6a0a:	17 c0       	rjmp	.+46     	; 0x6a3a <Get_Readings+0x58>
   {
      //if the flag is set to detecting a rising edge
      case GETTING_RISING_EDGE:
      //get the rising edge timing
      SW_ICU_GetReading(&Reading1);
    6a0c:	8a ed       	ldi	r24, 0xDA	; 218
    6a0e:	91 e0       	ldi	r25, 0x01	; 1
    6a10:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <SW_ICU_GetReading>
      //switch SW ICU to detect a falling edge
      SW_ICU_SetEdge(SW_ICU_FALLING_EDGE);
    6a14:	82 e0       	ldi	r24, 0x02	; 2
    6a16:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_FALLING_EDGE;
    6a1a:	81 e0       	ldi	r24, 0x01	; 1
    6a1c:	80 93 e3 01 	sts	0x01E3, r24
    6a20:	0c c0       	rjmp	.+24     	; 0x6a3a <Get_Readings+0x58>
      break;
      
      //if the flag is set to detecting a rising edge
      case GETTING_FALLING_EDGE:
      SW_ICU_GetReading(&Reading2);
    6a22:	8e ed       	ldi	r24, 0xDE	; 222
    6a24:	91 e0       	ldi	r25, 0x01	; 1
    6a26:	0e 94 b1 37 	call	0x6f62	; 0x6f62 <SW_ICU_GetReading>
      SW_ICU_SetEdge(SW_ICU_RISING_EDGE);
    6a2a:	83 e0       	ldi	r24, 0x03	; 3
    6a2c:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_RISING_EDGE;
    6a30:	10 92 e3 01 	sts	0x01E3, r1
      //switch the Reading Flag state to indecate reading completion
      Reading_Flag=Reading_Complete;
    6a34:	81 e0       	ldi	r24, 0x01	; 1
    6a36:	80 93 e2 01 	sts	0x01E2, r24
      break;
   }
}
    6a3a:	0f 90       	pop	r0
    6a3c:	0f 90       	pop	r0
    6a3e:	cf 91       	pop	r28
    6a40:	df 91       	pop	r29
    6a42:	08 95       	ret

00006a44 <Ultrasonic_Init>:
* Parameters (out): None
* Return value    : enuErrorStatus_t ... 1=E_OK - 0=E_ERROR
* Description     : A function to initialize the Ultrasonic Module
************************************************************************************/ 
enuErrorStatus_t Ultrasonic_Init(void)
{
    6a44:	df 93       	push	r29
    6a46:	cf 93       	push	r28
    6a48:	cd b7       	in	r28, 0x3d	; 61
    6a4a:	de b7       	in	r29, 0x3e	; 62
   //initialize Trigger pin
   DIO_PinInit(US_CH0_TRIGGER,OUTPUT,NO_CONNECTION);
    6a4c:	80 e1       	ldi	r24, 0x10	; 16
    6a4e:	61 e0       	ldi	r22, 0x01	; 1
    6a50:	40 e0       	ldi	r20, 0x00	; 0
    6a52:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
   //initialize Echo pin
   DIO_PinInit(US_CH0_ECHO,INPUT,NO_CONNECTION);
    6a56:	8a e0       	ldi	r24, 0x0A	; 10
    6a58:	60 e0       	ldi	r22, 0x00	; 0
    6a5a:	40 e0       	ldi	r20, 0x00	; 0
    6a5c:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
   //initialize software ICU
   SW_ICU_Init();
    6a60:	0e 94 77 37 	call	0x6eee	; 0x6eee <SW_ICU_Init>
   //set callback function to be executed in case of ICU event
   SW_ICU_SetCallback(Get_Readings); 
    6a64:	81 ef       	ldi	r24, 0xF1	; 241
    6a66:	94 e3       	ldi	r25, 0x34	; 52
    6a68:	0e 94 02 38 	call	0x7004	; 0x7004 <SW_ICU_SetCallback>
   //return OK status
   return E_OK;
    6a6c:	81 e0       	ldi	r24, 0x01	; 1
}
    6a6e:	cf 91       	pop	r28
    6a70:	df 91       	pop	r29
    6a72:	08 95       	ret

00006a74 <Ultrasonic_Trigger>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to send a trigger pulse to the Ultrasonic Module
************************************************************************************/
 enuErrorStatus_t Ultrasonic_Trigger(enuUltrasonicChannel_t Channel)
 {
    6a74:	df 93       	push	r29
    6a76:	cf 93       	push	r28
    6a78:	cd b7       	in	r28, 0x3d	; 61
    6a7a:	de b7       	in	r29, 0x3e	; 62
    6a7c:	69 97       	sbiw	r28, 0x19	; 25
    6a7e:	0f b6       	in	r0, 0x3f	; 63
    6a80:	f8 94       	cli
    6a82:	de bf       	out	0x3e, r29	; 62
    6a84:	0f be       	out	0x3f, r0	; 63
    6a86:	cd bf       	out	0x3d, r28	; 61
    6a88:	89 8f       	std	Y+25, r24	; 0x19
      //reset the reading completion flag
      Reading_Flag=Reading_Not_Complete;
    6a8a:	10 92 e2 01 	sts	0x01E2, r1
      //set the ICU to detect a rising edge
      SW_ICU_SetEdge(SW_ICU_RISING_EDGE);
    6a8e:	83 e0       	ldi	r24, 0x03	; 3
    6a90:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SW_ICU_SetEdge>
      //generate the trigger pulse
      DIO_PinWrite(PC0,HIGH);
    6a94:	80 e1       	ldi	r24, 0x10	; 16
    6a96:	61 e0       	ldi	r22, 0x01	; 1
    6a98:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	a0 e2       	ldi	r26, 0x20	; 32
    6aa2:	b1 e4       	ldi	r27, 0x41	; 65
    6aa4:	8d 8b       	std	Y+21, r24	; 0x15
    6aa6:	9e 8b       	std	Y+22, r25	; 0x16
    6aa8:	af 8b       	std	Y+23, r26	; 0x17
    6aaa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6aac:	6d 89       	ldd	r22, Y+21	; 0x15
    6aae:	7e 89       	ldd	r23, Y+22	; 0x16
    6ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    6ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    6ab4:	2b ea       	ldi	r18, 0xAB	; 171
    6ab6:	3a ea       	ldi	r19, 0xAA	; 170
    6ab8:	4a e2       	ldi	r20, 0x2A	; 42
    6aba:	50 e4       	ldi	r21, 0x40	; 64
    6abc:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6ac0:	dc 01       	movw	r26, r24
    6ac2:	cb 01       	movw	r24, r22
    6ac4:	89 8b       	std	Y+17, r24	; 0x11
    6ac6:	9a 8b       	std	Y+18, r25	; 0x12
    6ac8:	ab 8b       	std	Y+19, r26	; 0x13
    6aca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6acc:	69 89       	ldd	r22, Y+17	; 0x11
    6ace:	7a 89       	ldd	r23, Y+18	; 0x12
    6ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    6ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    6ad4:	20 e0       	ldi	r18, 0x00	; 0
    6ad6:	30 e0       	ldi	r19, 0x00	; 0
    6ad8:	40 e8       	ldi	r20, 0x80	; 128
    6ada:	5f e3       	ldi	r21, 0x3F	; 63
    6adc:	0e 94 14 0c 	call	0x1828	; 0x1828 <__ltsf2>
    6ae0:	88 23       	and	r24, r24
    6ae2:	1c f4       	brge	.+6      	; 0x6aea <Ultrasonic_Trigger+0x76>
		__ticks = 1;
    6ae4:	81 e0       	ldi	r24, 0x01	; 1
    6ae6:	88 8b       	std	Y+16, r24	; 0x10
    6ae8:	91 c0       	rjmp	.+290    	; 0x6c0c <Ultrasonic_Trigger+0x198>
	else if (__tmp > 255)
    6aea:	69 89       	ldd	r22, Y+17	; 0x11
    6aec:	7a 89       	ldd	r23, Y+18	; 0x12
    6aee:	8b 89       	ldd	r24, Y+19	; 0x13
    6af0:	9c 89       	ldd	r25, Y+20	; 0x14
    6af2:	20 e0       	ldi	r18, 0x00	; 0
    6af4:	30 e0       	ldi	r19, 0x00	; 0
    6af6:	4f e7       	ldi	r20, 0x7F	; 127
    6af8:	53 e4       	ldi	r21, 0x43	; 67
    6afa:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__gtsf2>
    6afe:	18 16       	cp	r1, r24
    6b00:	0c f0       	brlt	.+2      	; 0x6b04 <Ultrasonic_Trigger+0x90>
    6b02:	7b c0       	rjmp	.+246    	; 0x6bfa <Ultrasonic_Trigger+0x186>
	{
		_delay_ms(__us / 1000.0);
    6b04:	6d 89       	ldd	r22, Y+21	; 0x15
    6b06:	7e 89       	ldd	r23, Y+22	; 0x16
    6b08:	8f 89       	ldd	r24, Y+23	; 0x17
    6b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    6b0c:	20 e0       	ldi	r18, 0x00	; 0
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	4a e7       	ldi	r20, 0x7A	; 122
    6b12:	54 e4       	ldi	r21, 0x44	; 68
    6b14:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divsf3>
    6b18:	dc 01       	movw	r26, r24
    6b1a:	cb 01       	movw	r24, r22
    6b1c:	8c 87       	std	Y+12, r24	; 0x0c
    6b1e:	9d 87       	std	Y+13, r25	; 0x0d
    6b20:	ae 87       	std	Y+14, r26	; 0x0e
    6b22:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b24:	6c 85       	ldd	r22, Y+12	; 0x0c
    6b26:	7d 85       	ldd	r23, Y+13	; 0x0d
    6b28:	8e 85       	ldd	r24, Y+14	; 0x0e
    6b2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    6b2c:	20 e0       	ldi	r18, 0x00	; 0
    6b2e:	30 e0       	ldi	r19, 0x00	; 0
    6b30:	4a ef       	ldi	r20, 0xFA	; 250
    6b32:	54 e4       	ldi	r21, 0x44	; 68
    6b34:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6b38:	dc 01       	movw	r26, r24
    6b3a:	cb 01       	movw	r24, r22
    6b3c:	88 87       	std	Y+8, r24	; 0x08
    6b3e:	99 87       	std	Y+9, r25	; 0x09
    6b40:	aa 87       	std	Y+10, r26	; 0x0a
    6b42:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6b44:	68 85       	ldd	r22, Y+8	; 0x08
    6b46:	79 85       	ldd	r23, Y+9	; 0x09
    6b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    6b4c:	20 e0       	ldi	r18, 0x00	; 0
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	40 e8       	ldi	r20, 0x80	; 128
    6b52:	5f e3       	ldi	r21, 0x3F	; 63
    6b54:	0e 94 14 0c 	call	0x1828	; 0x1828 <__ltsf2>
    6b58:	88 23       	and	r24, r24
    6b5a:	2c f4       	brge	.+10     	; 0x6b66 <Ultrasonic_Trigger+0xf2>
		__ticks = 1;
    6b5c:	81 e0       	ldi	r24, 0x01	; 1
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
    6b60:	9f 83       	std	Y+7, r25	; 0x07
    6b62:	8e 83       	std	Y+6, r24	; 0x06
    6b64:	3f c0       	rjmp	.+126    	; 0x6be4 <Ultrasonic_Trigger+0x170>
	else if (__tmp > 65535)
    6b66:	68 85       	ldd	r22, Y+8	; 0x08
    6b68:	79 85       	ldd	r23, Y+9	; 0x09
    6b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    6b6e:	20 e0       	ldi	r18, 0x00	; 0
    6b70:	3f ef       	ldi	r19, 0xFF	; 255
    6b72:	4f e7       	ldi	r20, 0x7F	; 127
    6b74:	57 e4       	ldi	r21, 0x47	; 71
    6b76:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__gtsf2>
    6b7a:	18 16       	cp	r1, r24
    6b7c:	4c f5       	brge	.+82     	; 0x6bd0 <Ultrasonic_Trigger+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6b80:	7d 85       	ldd	r23, Y+13	; 0x0d
    6b82:	8e 85       	ldd	r24, Y+14	; 0x0e
    6b84:	9f 85       	ldd	r25, Y+15	; 0x0f
    6b86:	20 e0       	ldi	r18, 0x00	; 0
    6b88:	30 e0       	ldi	r19, 0x00	; 0
    6b8a:	40 e2       	ldi	r20, 0x20	; 32
    6b8c:	51 e4       	ldi	r21, 0x41	; 65
    6b8e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6b92:	dc 01       	movw	r26, r24
    6b94:	cb 01       	movw	r24, r22
    6b96:	bc 01       	movw	r22, r24
    6b98:	cd 01       	movw	r24, r26
    6b9a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6b9e:	dc 01       	movw	r26, r24
    6ba0:	cb 01       	movw	r24, r22
    6ba2:	9f 83       	std	Y+7, r25	; 0x07
    6ba4:	8e 83       	std	Y+6, r24	; 0x06
    6ba6:	0f c0       	rjmp	.+30     	; 0x6bc6 <Ultrasonic_Trigger+0x152>
    6ba8:	88 ec       	ldi	r24, 0xC8	; 200
    6baa:	90 e0       	ldi	r25, 0x00	; 0
    6bac:	9d 83       	std	Y+5, r25	; 0x05
    6bae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    6bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    6bb4:	01 97       	sbiw	r24, 0x01	; 1
    6bb6:	f1 f7       	brne	.-4      	; 0x6bb4 <Ultrasonic_Trigger+0x140>
    6bb8:	9d 83       	std	Y+5, r25	; 0x05
    6bba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    6bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    6bc0:	01 97       	sbiw	r24, 0x01	; 1
    6bc2:	9f 83       	std	Y+7, r25	; 0x07
    6bc4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    6bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    6bca:	00 97       	sbiw	r24, 0x00	; 0
    6bcc:	69 f7       	brne	.-38     	; 0x6ba8 <Ultrasonic_Trigger+0x134>
    6bce:	24 c0       	rjmp	.+72     	; 0x6c18 <Ultrasonic_Trigger+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bd0:	68 85       	ldd	r22, Y+8	; 0x08
    6bd2:	79 85       	ldd	r23, Y+9	; 0x09
    6bd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    6bd6:	9b 85       	ldd	r25, Y+11	; 0x0b
    6bd8:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6bdc:	dc 01       	movw	r26, r24
    6bde:	cb 01       	movw	r24, r22
    6be0:	9f 83       	std	Y+7, r25	; 0x07
    6be2:	8e 83       	std	Y+6, r24	; 0x06
    6be4:	8e 81       	ldd	r24, Y+6	; 0x06
    6be6:	9f 81       	ldd	r25, Y+7	; 0x07
    6be8:	9b 83       	std	Y+3, r25	; 0x03
    6bea:	8a 83       	std	Y+2, r24	; 0x02
    6bec:	8a 81       	ldd	r24, Y+2	; 0x02
    6bee:	9b 81       	ldd	r25, Y+3	; 0x03
    6bf0:	01 97       	sbiw	r24, 0x01	; 1
    6bf2:	f1 f7       	brne	.-4      	; 0x6bf0 <Ultrasonic_Trigger+0x17c>
    6bf4:	9b 83       	std	Y+3, r25	; 0x03
    6bf6:	8a 83       	std	Y+2, r24	; 0x02
    6bf8:	0f c0       	rjmp	.+30     	; 0x6c18 <Ultrasonic_Trigger+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6bfa:	69 89       	ldd	r22, Y+17	; 0x11
    6bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    6bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    6c00:	9c 89       	ldd	r25, Y+20	; 0x14
    6c02:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6c06:	dc 01       	movw	r26, r24
    6c08:	cb 01       	movw	r24, r22
    6c0a:	88 8b       	std	Y+16, r24	; 0x10
    6c0c:	88 89       	ldd	r24, Y+16	; 0x10
    6c0e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6c10:	89 81       	ldd	r24, Y+1	; 0x01
    6c12:	8a 95       	dec	r24
    6c14:	f1 f7       	brne	.-4      	; 0x6c12 <Ultrasonic_Trigger+0x19e>
    6c16:	89 83       	std	Y+1, r24	; 0x01
      _delay_us(TRIGGER_DURATION_US);
      DIO_PinWrite(PC0,LOW);
    6c18:	80 e1       	ldi	r24, 0x10	; 16
    6c1a:	60 e0       	ldi	r22, 0x00	; 0
    6c1c:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
      //reset the ICU unit
      SW_ICU_Reset_Reading();
    6c20:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <SW_ICU_Reset_Reading>
      //return an OK status
      return E_OK;
    6c24:	81 e0       	ldi	r24, 0x01	; 1
 }
    6c26:	69 96       	adiw	r28, 0x19	; 25
    6c28:	0f b6       	in	r0, 0x3f	; 63
    6c2a:	f8 94       	cli
    6c2c:	de bf       	out	0x3e, r29	; 62
    6c2e:	0f be       	out	0x3f, r0	; 63
    6c30:	cd bf       	out	0x3d, r28	; 61
    6c32:	cf 91       	pop	r28
    6c34:	df 91       	pop	r29
    6c36:	08 95       	ret

00006c38 <Ultrasonic_GetDistance>:
 * Parameters (out): uint16_t *Distance
 * Return value    : enuErrorStatus_t
 * Description     : A function to check if ultrasonic reading is complete and return distance
 ************************************************************************************/
 enuErrorStatus_t Ultrasonic_GetDistance(uint16_t *Distance)
 {
    6c38:	ef 92       	push	r14
    6c3a:	ff 92       	push	r15
    6c3c:	0f 93       	push	r16
    6c3e:	1f 93       	push	r17
    6c40:	df 93       	push	r29
    6c42:	cf 93       	push	r28
    6c44:	00 d0       	rcall	.+0      	; 0x6c46 <Ultrasonic_GetDistance+0xe>
    6c46:	0f 92       	push	r0
    6c48:	cd b7       	in	r28, 0x3d	; 61
    6c4a:	de b7       	in	r29, 0x3e	; 62
    6c4c:	9a 83       	std	Y+2, r25	; 0x02
    6c4e:	89 83       	std	Y+1, r24	; 0x01
    //check for reading completion condition
   if (Reading_Flag)
    6c50:	80 91 e2 01 	lds	r24, 0x01E2
    6c54:	88 23       	and	r24, r24
    6c56:	49 f1       	breq	.+82     	; 0x6caa <Ultrasonic_GetDistance+0x72>
   {
      //when echo signal has been received, calculate the distance
      *Distance=((Reading2-Reading1))/US_CM_FACTOR;
    6c58:	20 91 de 01 	lds	r18, 0x01DE
    6c5c:	30 91 df 01 	lds	r19, 0x01DF
    6c60:	40 91 e0 01 	lds	r20, 0x01E0
    6c64:	50 91 e1 01 	lds	r21, 0x01E1
    6c68:	80 91 da 01 	lds	r24, 0x01DA
    6c6c:	90 91 db 01 	lds	r25, 0x01DB
    6c70:	a0 91 dc 01 	lds	r26, 0x01DC
    6c74:	b0 91 dd 01 	lds	r27, 0x01DD
    6c78:	79 01       	movw	r14, r18
    6c7a:	8a 01       	movw	r16, r20
    6c7c:	e8 1a       	sub	r14, r24
    6c7e:	f9 0a       	sbc	r15, r25
    6c80:	0a 0b       	sbc	r16, r26
    6c82:	1b 0b       	sbc	r17, r27
    6c84:	d8 01       	movw	r26, r16
    6c86:	c7 01       	movw	r24, r14
    6c88:	2a e3       	ldi	r18, 0x3A	; 58
    6c8a:	30 e0       	ldi	r19, 0x00	; 0
    6c8c:	40 e0       	ldi	r20, 0x00	; 0
    6c8e:	50 e0       	ldi	r21, 0x00	; 0
    6c90:	bc 01       	movw	r22, r24
    6c92:	cd 01       	movw	r24, r26
    6c94:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
    6c98:	da 01       	movw	r26, r20
    6c9a:	c9 01       	movw	r24, r18
    6c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    6c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    6ca0:	91 83       	std	Z+1, r25	; 0x01
    6ca2:	80 83       	st	Z, r24
      //return an OK status
      return E_OK;
    6ca4:	01 e0       	ldi	r16, 0x01	; 1
    6ca6:	0b 83       	std	Y+3, r16	; 0x03
    6ca8:	01 c0       	rjmp	.+2      	; 0x6cac <Ultrasonic_GetDistance+0x74>
   }
   //return a NOK status
   return E_ERROR;
    6caa:	1b 82       	std	Y+3, r1	; 0x03
    6cac:	8b 81       	ldd	r24, Y+3	; 0x03
 }
    6cae:	0f 90       	pop	r0
    6cb0:	0f 90       	pop	r0
    6cb2:	0f 90       	pop	r0
    6cb4:	cf 91       	pop	r28
    6cb6:	df 91       	pop	r29
    6cb8:	1f 91       	pop	r17
    6cba:	0f 91       	pop	r16
    6cbc:	ff 90       	pop	r15
    6cbe:	ef 90       	pop	r14
    6cc0:	08 95       	ret

00006cc2 <Ultrasonic_GetReading_Polling>:
 * Parameters (out): uint16_t *Distance
 * Return value    : enuErrorStatus_t
 * Description     : A function to get ultrasonic reading using polling
 ************************************************************************************/
enuErrorStatus_t Ultrasonic_GetReading_Polling(enuUltrasonicChannel_t Channel,uint32_t *Distance)
{
    6cc2:	ef 92       	push	r14
    6cc4:	ff 92       	push	r15
    6cc6:	0f 93       	push	r16
    6cc8:	1f 93       	push	r17
    6cca:	df 93       	push	r29
    6ccc:	cf 93       	push	r28
    6cce:	cd b7       	in	r28, 0x3d	; 61
    6cd0:	de b7       	in	r29, 0x3e	; 62
    6cd2:	6b 97       	sbiw	r28, 0x1b	; 27
    6cd4:	0f b6       	in	r0, 0x3f	; 63
    6cd6:	f8 94       	cli
    6cd8:	de bf       	out	0x3e, r29	; 62
    6cda:	0f be       	out	0x3f, r0	; 63
    6cdc:	cd bf       	out	0x3d, r28	; 61
    6cde:	89 8f       	std	Y+25, r24	; 0x19
    6ce0:	7b 8f       	std	Y+27, r23	; 0x1b
    6ce2:	6a 8f       	std	Y+26, r22	; 0x1a
   //reset the reading completion flag
   Reading_Flag=Reading_Not_Complete;
    6ce4:	10 92 e2 01 	sts	0x01E2, r1
   //set the ICU to detect a rising edge
   SW_ICU_SetEdge(SW_ICU_RISING_EDGE);
    6ce8:	83 e0       	ldi	r24, 0x03	; 3
    6cea:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SW_ICU_SetEdge>
   //generate the trigger pulse
   DIO_PinWrite(PC0,HIGH);
    6cee:	80 e1       	ldi	r24, 0x10	; 16
    6cf0:	61 e0       	ldi	r22, 0x01	; 1
    6cf2:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
    6cf6:	80 e0       	ldi	r24, 0x00	; 0
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	a0 e2       	ldi	r26, 0x20	; 32
    6cfc:	b1 e4       	ldi	r27, 0x41	; 65
    6cfe:	8d 8b       	std	Y+21, r24	; 0x15
    6d00:	9e 8b       	std	Y+22, r25	; 0x16
    6d02:	af 8b       	std	Y+23, r26	; 0x17
    6d04:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6d06:	6d 89       	ldd	r22, Y+21	; 0x15
    6d08:	7e 89       	ldd	r23, Y+22	; 0x16
    6d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    6d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    6d0e:	2b ea       	ldi	r18, 0xAB	; 171
    6d10:	3a ea       	ldi	r19, 0xAA	; 170
    6d12:	4a e2       	ldi	r20, 0x2A	; 42
    6d14:	50 e4       	ldi	r21, 0x40	; 64
    6d16:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6d1a:	dc 01       	movw	r26, r24
    6d1c:	cb 01       	movw	r24, r22
    6d1e:	89 8b       	std	Y+17, r24	; 0x11
    6d20:	9a 8b       	std	Y+18, r25	; 0x12
    6d22:	ab 8b       	std	Y+19, r26	; 0x13
    6d24:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6d26:	69 89       	ldd	r22, Y+17	; 0x11
    6d28:	7a 89       	ldd	r23, Y+18	; 0x12
    6d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    6d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    6d2e:	20 e0       	ldi	r18, 0x00	; 0
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	40 e8       	ldi	r20, 0x80	; 128
    6d34:	5f e3       	ldi	r21, 0x3F	; 63
    6d36:	0e 94 14 0c 	call	0x1828	; 0x1828 <__ltsf2>
    6d3a:	88 23       	and	r24, r24
    6d3c:	1c f4       	brge	.+6      	; 0x6d44 <Ultrasonic_GetReading_Polling+0x82>
		__ticks = 1;
    6d3e:	81 e0       	ldi	r24, 0x01	; 1
    6d40:	88 8b       	std	Y+16, r24	; 0x10
    6d42:	91 c0       	rjmp	.+290    	; 0x6e66 <Ultrasonic_GetReading_Polling+0x1a4>
	else if (__tmp > 255)
    6d44:	69 89       	ldd	r22, Y+17	; 0x11
    6d46:	7a 89       	ldd	r23, Y+18	; 0x12
    6d48:	8b 89       	ldd	r24, Y+19	; 0x13
    6d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    6d4c:	20 e0       	ldi	r18, 0x00	; 0
    6d4e:	30 e0       	ldi	r19, 0x00	; 0
    6d50:	4f e7       	ldi	r20, 0x7F	; 127
    6d52:	53 e4       	ldi	r21, 0x43	; 67
    6d54:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__gtsf2>
    6d58:	18 16       	cp	r1, r24
    6d5a:	0c f0       	brlt	.+2      	; 0x6d5e <Ultrasonic_GetReading_Polling+0x9c>
    6d5c:	7b c0       	rjmp	.+246    	; 0x6e54 <Ultrasonic_GetReading_Polling+0x192>
	{
		_delay_ms(__us / 1000.0);
    6d5e:	6d 89       	ldd	r22, Y+21	; 0x15
    6d60:	7e 89       	ldd	r23, Y+22	; 0x16
    6d62:	8f 89       	ldd	r24, Y+23	; 0x17
    6d64:	98 8d       	ldd	r25, Y+24	; 0x18
    6d66:	20 e0       	ldi	r18, 0x00	; 0
    6d68:	30 e0       	ldi	r19, 0x00	; 0
    6d6a:	4a e7       	ldi	r20, 0x7A	; 122
    6d6c:	54 e4       	ldi	r21, 0x44	; 68
    6d6e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__divsf3>
    6d72:	dc 01       	movw	r26, r24
    6d74:	cb 01       	movw	r24, r22
    6d76:	8c 87       	std	Y+12, r24	; 0x0c
    6d78:	9d 87       	std	Y+13, r25	; 0x0d
    6d7a:	ae 87       	std	Y+14, r26	; 0x0e
    6d7c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6d80:	7d 85       	ldd	r23, Y+13	; 0x0d
    6d82:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d84:	9f 85       	ldd	r25, Y+15	; 0x0f
    6d86:	20 e0       	ldi	r18, 0x00	; 0
    6d88:	30 e0       	ldi	r19, 0x00	; 0
    6d8a:	4a ef       	ldi	r20, 0xFA	; 250
    6d8c:	54 e4       	ldi	r21, 0x44	; 68
    6d8e:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6d92:	dc 01       	movw	r26, r24
    6d94:	cb 01       	movw	r24, r22
    6d96:	88 87       	std	Y+8, r24	; 0x08
    6d98:	99 87       	std	Y+9, r25	; 0x09
    6d9a:	aa 87       	std	Y+10, r26	; 0x0a
    6d9c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    6d9e:	68 85       	ldd	r22, Y+8	; 0x08
    6da0:	79 85       	ldd	r23, Y+9	; 0x09
    6da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    6da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    6da6:	20 e0       	ldi	r18, 0x00	; 0
    6da8:	30 e0       	ldi	r19, 0x00	; 0
    6daa:	40 e8       	ldi	r20, 0x80	; 128
    6dac:	5f e3       	ldi	r21, 0x3F	; 63
    6dae:	0e 94 14 0c 	call	0x1828	; 0x1828 <__ltsf2>
    6db2:	88 23       	and	r24, r24
    6db4:	2c f4       	brge	.+10     	; 0x6dc0 <Ultrasonic_GetReading_Polling+0xfe>
		__ticks = 1;
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	9f 83       	std	Y+7, r25	; 0x07
    6dbc:	8e 83       	std	Y+6, r24	; 0x06
    6dbe:	3f c0       	rjmp	.+126    	; 0x6e3e <Ultrasonic_GetReading_Polling+0x17c>
	else if (__tmp > 65535)
    6dc0:	68 85       	ldd	r22, Y+8	; 0x08
    6dc2:	79 85       	ldd	r23, Y+9	; 0x09
    6dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    6dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    6dc8:	20 e0       	ldi	r18, 0x00	; 0
    6dca:	3f ef       	ldi	r19, 0xFF	; 255
    6dcc:	4f e7       	ldi	r20, 0x7F	; 127
    6dce:	57 e4       	ldi	r21, 0x47	; 71
    6dd0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__gtsf2>
    6dd4:	18 16       	cp	r1, r24
    6dd6:	4c f5       	brge	.+82     	; 0x6e2a <Ultrasonic_GetReading_Polling+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6dd8:	6c 85       	ldd	r22, Y+12	; 0x0c
    6dda:	7d 85       	ldd	r23, Y+13	; 0x0d
    6ddc:	8e 85       	ldd	r24, Y+14	; 0x0e
    6dde:	9f 85       	ldd	r25, Y+15	; 0x0f
    6de0:	20 e0       	ldi	r18, 0x00	; 0
    6de2:	30 e0       	ldi	r19, 0x00	; 0
    6de4:	40 e2       	ldi	r20, 0x20	; 32
    6de6:	51 e4       	ldi	r21, 0x41	; 65
    6de8:	0e 94 0e 0a 	call	0x141c	; 0x141c <__mulsf3>
    6dec:	dc 01       	movw	r26, r24
    6dee:	cb 01       	movw	r24, r22
    6df0:	bc 01       	movw	r22, r24
    6df2:	cd 01       	movw	r24, r26
    6df4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6df8:	dc 01       	movw	r26, r24
    6dfa:	cb 01       	movw	r24, r22
    6dfc:	9f 83       	std	Y+7, r25	; 0x07
    6dfe:	8e 83       	std	Y+6, r24	; 0x06
    6e00:	0f c0       	rjmp	.+30     	; 0x6e20 <Ultrasonic_GetReading_Polling+0x15e>
    6e02:	88 ec       	ldi	r24, 0xC8	; 200
    6e04:	90 e0       	ldi	r25, 0x00	; 0
    6e06:	9d 83       	std	Y+5, r25	; 0x05
    6e08:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    6e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    6e0e:	01 97       	sbiw	r24, 0x01	; 1
    6e10:	f1 f7       	brne	.-4      	; 0x6e0e <Ultrasonic_GetReading_Polling+0x14c>
    6e12:	9d 83       	std	Y+5, r25	; 0x05
    6e14:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e16:	8e 81       	ldd	r24, Y+6	; 0x06
    6e18:	9f 81       	ldd	r25, Y+7	; 0x07
    6e1a:	01 97       	sbiw	r24, 0x01	; 1
    6e1c:	9f 83       	std	Y+7, r25	; 0x07
    6e1e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e20:	8e 81       	ldd	r24, Y+6	; 0x06
    6e22:	9f 81       	ldd	r25, Y+7	; 0x07
    6e24:	00 97       	sbiw	r24, 0x00	; 0
    6e26:	69 f7       	brne	.-38     	; 0x6e02 <Ultrasonic_GetReading_Polling+0x140>
    6e28:	24 c0       	rjmp	.+72     	; 0x6e72 <Ultrasonic_GetReading_Polling+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e2a:	68 85       	ldd	r22, Y+8	; 0x08
    6e2c:	79 85       	ldd	r23, Y+9	; 0x09
    6e2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6e30:	9b 85       	ldd	r25, Y+11	; 0x0b
    6e32:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6e36:	dc 01       	movw	r26, r24
    6e38:	cb 01       	movw	r24, r22
    6e3a:	9f 83       	std	Y+7, r25	; 0x07
    6e3c:	8e 83       	std	Y+6, r24	; 0x06
    6e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    6e40:	9f 81       	ldd	r25, Y+7	; 0x07
    6e42:	9b 83       	std	Y+3, r25	; 0x03
    6e44:	8a 83       	std	Y+2, r24	; 0x02
    6e46:	8a 81       	ldd	r24, Y+2	; 0x02
    6e48:	9b 81       	ldd	r25, Y+3	; 0x03
    6e4a:	01 97       	sbiw	r24, 0x01	; 1
    6e4c:	f1 f7       	brne	.-4      	; 0x6e4a <Ultrasonic_GetReading_Polling+0x188>
    6e4e:	9b 83       	std	Y+3, r25	; 0x03
    6e50:	8a 83       	std	Y+2, r24	; 0x02
    6e52:	0f c0       	rjmp	.+30     	; 0x6e72 <Ultrasonic_GetReading_Polling+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6e54:	69 89       	ldd	r22, Y+17	; 0x11
    6e56:	7a 89       	ldd	r23, Y+18	; 0x12
    6e58:	8b 89       	ldd	r24, Y+19	; 0x13
    6e5a:	9c 89       	ldd	r25, Y+20	; 0x14
    6e5c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    6e60:	dc 01       	movw	r26, r24
    6e62:	cb 01       	movw	r24, r22
    6e64:	88 8b       	std	Y+16, r24	; 0x10
    6e66:	88 89       	ldd	r24, Y+16	; 0x10
    6e68:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6e6a:	89 81       	ldd	r24, Y+1	; 0x01
    6e6c:	8a 95       	dec	r24
    6e6e:	f1 f7       	brne	.-4      	; 0x6e6c <Ultrasonic_GetReading_Polling+0x1aa>
    6e70:	89 83       	std	Y+1, r24	; 0x01
   _delay_us(TRIGGER_DURATION_US);
   DIO_PinWrite(PC0,LOW);
    6e72:	80 e1       	ldi	r24, 0x10	; 16
    6e74:	60 e0       	ldi	r22, 0x00	; 0
    6e76:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
   //wait for echo detection to complete
   while (!Reading_Flag);
    6e7a:	80 91 e2 01 	lds	r24, 0x01E2
    6e7e:	88 23       	and	r24, r24
    6e80:	e1 f3       	breq	.-8      	; 0x6e7a <Ultrasonic_GetReading_Polling+0x1b8>
   //calculate the distance
   *Distance=((Reading2-Reading1))/US_CM_FACTOR;
    6e82:	20 91 de 01 	lds	r18, 0x01DE
    6e86:	30 91 df 01 	lds	r19, 0x01DF
    6e8a:	40 91 e0 01 	lds	r20, 0x01E0
    6e8e:	50 91 e1 01 	lds	r21, 0x01E1
    6e92:	80 91 da 01 	lds	r24, 0x01DA
    6e96:	90 91 db 01 	lds	r25, 0x01DB
    6e9a:	a0 91 dc 01 	lds	r26, 0x01DC
    6e9e:	b0 91 dd 01 	lds	r27, 0x01DD
    6ea2:	79 01       	movw	r14, r18
    6ea4:	8a 01       	movw	r16, r20
    6ea6:	e8 1a       	sub	r14, r24
    6ea8:	f9 0a       	sbc	r15, r25
    6eaa:	0a 0b       	sbc	r16, r26
    6eac:	1b 0b       	sbc	r17, r27
    6eae:	d8 01       	movw	r26, r16
    6eb0:	c7 01       	movw	r24, r14
    6eb2:	2a e3       	ldi	r18, 0x3A	; 58
    6eb4:	30 e0       	ldi	r19, 0x00	; 0
    6eb6:	40 e0       	ldi	r20, 0x00	; 0
    6eb8:	50 e0       	ldi	r21, 0x00	; 0
    6eba:	bc 01       	movw	r22, r24
    6ebc:	cd 01       	movw	r24, r26
    6ebe:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__udivmodsi4>
    6ec2:	da 01       	movw	r26, r20
    6ec4:	c9 01       	movw	r24, r18
    6ec6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    6ec8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6eca:	80 83       	st	Z, r24
    6ecc:	91 83       	std	Z+1, r25	; 0x01
    6ece:	a2 83       	std	Z+2, r26	; 0x02
    6ed0:	b3 83       	std	Z+3, r27	; 0x03
   //return an OK state
   return E_OK;
    6ed2:	81 e0       	ldi	r24, 0x01	; 1
}
    6ed4:	6b 96       	adiw	r28, 0x1b	; 27
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	cf 91       	pop	r28
    6ee2:	df 91       	pop	r29
    6ee4:	1f 91       	pop	r17
    6ee6:	0f 91       	pop	r16
    6ee8:	ff 90       	pop	r15
    6eea:	ef 90       	pop	r14
    6eec:	08 95       	ret

00006eee <SW_ICU_Init>:
* Parameters (out): None
* Return value    : enuErrorStatus_t ... 1=E_OK - 0=E_ERROR
* Description     : A function to initialize the Software ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_Init(void)
{
    6eee:	df 93       	push	r29
    6ef0:	cf 93       	push	r28
    6ef2:	cd b7       	in	r28, 0x3d	; 61
    6ef4:	de b7       	in	r29, 0x3e	; 62
   //initialize the software ICU
   EXTINT_Init(SW_ICU_EX_INT_CH);
    6ef6:	82 e0       	ldi	r24, 0x02	; 2
    6ef8:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <EXTINT_Init>
   //Set external interrupt channel to detect rising edge 
   EXTINT_SetSenseMode(EXT_RAISING_MODE,SW_ICU_EX_INT_CH);
    6efc:	83 e0       	ldi	r24, 0x03	; 3
    6efe:	62 e0       	ldi	r22, 0x02	; 2
    6f00:	0e 94 ad 30 	call	0x615a	; 0x615a <EXTINT_SetSenseMode>
   //initialize timer1 
   Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8);
    6f04:	8e e0       	ldi	r24, 0x0E	; 14
    6f06:	62 e0       	ldi	r22, 0x02	; 2
    6f08:	0e 94 65 1f 	call	0x3eca	; 0x3eca <Timer1_Init>
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
    6f0c:	0e 94 3e 21 	call	0x427c	; 0x427c <Timer1_ResetOVFCount>
   //enable timer1 overflow interrupt
   Timer1_OVF_InterruptEnable();
    6f10:	0e 94 a2 20 	call	0x4144	; 0x4144 <Timer1_OVF_InterruptEnable>
   //update the ICR register value to apply the new frequency
   ICR1_R=(TIMER1_FREQ_KHZ*SW_ICU_THOUSAND_MULTIPLIER)/SW_ICU_TWO_DIVISOR;
    6f14:	e6 e4       	ldi	r30, 0x46	; 70
    6f16:	f0 e0       	ldi	r31, 0x00	; 0
    6f18:	80 e1       	ldi	r24, 0x10	; 16
    6f1a:	97 e2       	ldi	r25, 0x27	; 39
    6f1c:	91 83       	std	Z+1, r25	; 0x01
    6f1e:	80 83       	st	Z, r24
   //reset timer register
   TCNT1_R=SW_ICU_TIMER_RESET_VALUE;
    6f20:	ec e4       	ldi	r30, 0x4C	; 76
    6f22:	f0 e0       	ldi	r31, 0x00	; 0
    6f24:	11 82       	std	Z+1, r1	; 0x01
    6f26:	10 82       	st	Z, r1
   //return OK status
   return E_OK;
    6f28:	81 e0       	ldi	r24, 0x01	; 1
}
    6f2a:	cf 91       	pop	r28
    6f2c:	df 91       	pop	r29
    6f2e:	08 95       	ret

00006f30 <SW_ICU_SetEdge>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to set the detection edge of the SW_ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_SetEdge(enuSW_ICU_TriggerMode_t enuEdge)
{
    6f30:	df 93       	push	r29
    6f32:	cf 93       	push	r28
    6f34:	0f 92       	push	r0
    6f36:	cd b7       	in	r28, 0x3d	; 61
    6f38:	de b7       	in	r29, 0x3e	; 62
    6f3a:	89 83       	std	Y+1, r24	; 0x01
   //Set external interrupt channel to detect the specified edge
   EXTINT_SetSenseMode(enuEdge,SW_ICU_EX_INT_CH);
    6f3c:	89 81       	ldd	r24, Y+1	; 0x01
    6f3e:	62 e0       	ldi	r22, 0x02	; 2
    6f40:	0e 94 ad 30 	call	0x615a	; 0x615a <EXTINT_SetSenseMode>
   //return OK status
   return E_OK;
    6f44:	81 e0       	ldi	r24, 0x01	; 1
}
    6f46:	0f 90       	pop	r0
    6f48:	cf 91       	pop	r28
    6f4a:	df 91       	pop	r29
    6f4c:	08 95       	ret

00006f4e <SW_ICU_Reset_Reading>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to reset the SW_ICU logic
************************************************************************************/
enuErrorStatus_t SW_ICU_Reset_Reading(void)
{
    6f4e:	df 93       	push	r29
    6f50:	cf 93       	push	r28
    6f52:	cd b7       	in	r28, 0x3d	; 61
    6f54:	de b7       	in	r29, 0x3e	; 62
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
    6f56:	0e 94 3e 21 	call	0x427c	; 0x427c <Timer1_ResetOVFCount>
   //return OK status
   return E_OK;
    6f5a:	81 e0       	ldi	r24, 0x01	; 1
}
    6f5c:	cf 91       	pop	r28
    6f5e:	df 91       	pop	r29
    6f60:	08 95       	ret

00006f62 <SW_ICU_GetReading>:
* Parameters (out): uint32_t *u32Buffer
* Return value    : enuErrorStatus_t
* Description     : A function to get the SW_ICU register reading
************************************************************************************/
enuErrorStatus_t SW_ICU_GetReading(uint32_t *u32Buffer)
{
    6f62:	ef 92       	push	r14
    6f64:	ff 92       	push	r15
    6f66:	0f 93       	push	r16
    6f68:	1f 93       	push	r17
    6f6a:	df 93       	push	r29
    6f6c:	cf 93       	push	r28
    6f6e:	cd b7       	in	r28, 0x3d	; 61
    6f70:	de b7       	in	r29, 0x3e	; 62
    6f72:	29 97       	sbiw	r28, 0x09	; 9
    6f74:	0f b6       	in	r0, 0x3f	; 63
    6f76:	f8 94       	cli
    6f78:	de bf       	out	0x3e, r29	; 62
    6f7a:	0f be       	out	0x3f, r0	; 63
    6f7c:	cd bf       	out	0x3d, r28	; 61
    6f7e:	98 87       	std	Y+8, r25	; 0x08
    6f80:	8f 83       	std	Y+7, r24	; 0x07
   //check if sent pointer points to a valid location
   if (u32Buffer==NULLPTR)
    6f82:	8f 81       	ldd	r24, Y+7	; 0x07
    6f84:	98 85       	ldd	r25, Y+8	; 0x08
    6f86:	00 97       	sbiw	r24, 0x00	; 0
    6f88:	11 f4       	brne	.+4      	; 0x6f8e <SW_ICU_GetReading+0x2c>
   {
      //return a NOK status
      return E_ERROR;
    6f8a:	19 86       	std	Y+9, r1	; 0x09
    6f8c:	2d c0       	rjmp	.+90     	; 0x6fe8 <SW_ICU_GetReading+0x86>
   }
   //get a snapshot of the timer register
   uint16_t Buffer=TCNT1_R;
    6f8e:	ec e4       	ldi	r30, 0x4C	; 76
    6f90:	f0 e0       	ldi	r31, 0x00	; 0
    6f92:	80 81       	ld	r24, Z
    6f94:	91 81       	ldd	r25, Z+1	; 0x01
    6f96:	9a 83       	std	Y+2, r25	; 0x02
    6f98:	89 83       	std	Y+1, r24	; 0x01
   uint32_t overflows=0;
    6f9a:	1b 82       	std	Y+3, r1	; 0x03
    6f9c:	1c 82       	std	Y+4, r1	; 0x04
    6f9e:	1d 82       	std	Y+5, r1	; 0x05
    6fa0:	1e 82       	std	Y+6, r1	; 0x06
   //get the overflow counter value
   Timer1_GetOVFCount(&overflows);
    6fa2:	ce 01       	movw	r24, r28
    6fa4:	03 96       	adiw	r24, 0x03	; 3
    6fa6:	0e 94 19 21 	call	0x4232	; 0x4232 <Timer1_GetOVFCount>
   //calculate actual timer value based on overflows number
   *u32Buffer=Buffer+(overflows*TIMER_MAX);
    6faa:	89 81       	ldd	r24, Y+1	; 0x01
    6fac:	9a 81       	ldd	r25, Y+2	; 0x02
    6fae:	7c 01       	movw	r14, r24
    6fb0:	00 e0       	ldi	r16, 0x00	; 0
    6fb2:	10 e0       	ldi	r17, 0x00	; 0
    6fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    6fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    6fb8:	ad 81       	ldd	r26, Y+5	; 0x05
    6fba:	be 81       	ldd	r27, Y+6	; 0x06
    6fbc:	21 e1       	ldi	r18, 0x11	; 17
    6fbe:	37 e2       	ldi	r19, 0x27	; 39
    6fc0:	40 e0       	ldi	r20, 0x00	; 0
    6fc2:	50 e0       	ldi	r21, 0x00	; 0
    6fc4:	bc 01       	movw	r22, r24
    6fc6:	cd 01       	movw	r24, r26
    6fc8:	0e 94 65 3e 	call	0x7cca	; 0x7cca <__mulsi3>
    6fcc:	dc 01       	movw	r26, r24
    6fce:	cb 01       	movw	r24, r22
    6fd0:	8e 0d       	add	r24, r14
    6fd2:	9f 1d       	adc	r25, r15
    6fd4:	a0 1f       	adc	r26, r16
    6fd6:	b1 1f       	adc	r27, r17
    6fd8:	ef 81       	ldd	r30, Y+7	; 0x07
    6fda:	f8 85       	ldd	r31, Y+8	; 0x08
    6fdc:	80 83       	st	Z, r24
    6fde:	91 83       	std	Z+1, r25	; 0x01
    6fe0:	a2 83       	std	Z+2, r26	; 0x02
    6fe2:	b3 83       	std	Z+3, r27	; 0x03
   //return OK status
   return E_OK;   
    6fe4:	81 e0       	ldi	r24, 0x01	; 1
    6fe6:	89 87       	std	Y+9, r24	; 0x09
    6fe8:	89 85       	ldd	r24, Y+9	; 0x09
}
    6fea:	29 96       	adiw	r28, 0x09	; 9
    6fec:	0f b6       	in	r0, 0x3f	; 63
    6fee:	f8 94       	cli
    6ff0:	de bf       	out	0x3e, r29	; 62
    6ff2:	0f be       	out	0x3f, r0	; 63
    6ff4:	cd bf       	out	0x3d, r28	; 61
    6ff6:	cf 91       	pop	r28
    6ff8:	df 91       	pop	r29
    6ffa:	1f 91       	pop	r17
    6ffc:	0f 91       	pop	r16
    6ffe:	ff 90       	pop	r15
    7000:	ef 90       	pop	r14
    7002:	08 95       	ret

00007004 <SW_ICU_SetCallback>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to set callback function to be called in case of ICU event
************************************************************************************/
enuErrorStatus_t SW_ICU_SetCallback(void(*local_fptr)(void))
{
    7004:	df 93       	push	r29
    7006:	cf 93       	push	r28
    7008:	00 d0       	rcall	.+0      	; 0x700a <SW_ICU_SetCallback+0x6>
    700a:	0f 92       	push	r0
    700c:	cd b7       	in	r28, 0x3d	; 61
    700e:	de b7       	in	r29, 0x3e	; 62
    7010:	9a 83       	std	Y+2, r25	; 0x02
    7012:	89 83       	std	Y+1, r24	; 0x01
   //check if sent pointer points to a valid location
   if (local_fptr == NULLPTR)
    7014:	89 81       	ldd	r24, Y+1	; 0x01
    7016:	9a 81       	ldd	r25, Y+2	; 0x02
    7018:	00 97       	sbiw	r24, 0x00	; 0
    701a:	11 f4       	brne	.+4      	; 0x7020 <SW_ICU_SetCallback+0x1c>
   {
      //return a NOK status
      return E_ERROR;
    701c:	1b 82       	std	Y+3, r1	; 0x03
    701e:	07 c0       	rjmp	.+14     	; 0x702e <SW_ICU_SetCallback+0x2a>
   }
   //set the external interrupt callback to call the sent function
   EXTINT_SetCallBack(local_fptr, SW_ICU_EX_INT_CH);
    7020:	89 81       	ldd	r24, Y+1	; 0x01
    7022:	9a 81       	ldd	r25, Y+2	; 0x02
    7024:	62 e0       	ldi	r22, 0x02	; 2
    7026:	0e 94 a7 31 	call	0x634e	; 0x634e <EXTINT_SetCallBack>
   //return OK status
   return E_OK;
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	8b 83       	std	Y+3, r24	; 0x03
    702e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    7030:	0f 90       	pop	r0
    7032:	0f 90       	pop	r0
    7034:	0f 90       	pop	r0
    7036:	cf 91       	pop	r28
    7038:	df 91       	pop	r29
    703a:	08 95       	ret

0000703c <LCD_Callback>:
/* Flag for the callback function after having the timer finished counting */
static volatile uint8_t u8LCDFlag=0;

/* The callback function after having the timer finished counting */
static void LCD_Callback(void)
{
    703c:	df 93       	push	r29
    703e:	cf 93       	push	r28
    7040:	cd b7       	in	r28, 0x3d	; 61
    7042:	de b7       	in	r29, 0x3e	; 62
	if(u8LCDFlag==LCD_INIT_FLAG) //init
    7044:	80 91 e8 01 	lds	r24, 0x01E8
    7048:	81 30       	cpi	r24, 0x01	; 1
    704a:	31 f4       	brne	.+12     	; 0x7058 <LCD_Callback+0x1c>
	{
		enuInitCurrentState++; //Moving to the next state for the LCD_Init function
    704c:	80 91 e4 01 	lds	r24, 0x01E4
    7050:	8f 5f       	subi	r24, 0xFF	; 255
    7052:	80 93 e4 01 	sts	0x01E4, r24
    7056:	1d c0       	rjmp	.+58     	; 0x7092 <LCD_Callback+0x56>
	}
   else if(u8LCDFlag==LCD_SEND_COMMAND_FLAG)//send command
    7058:	80 91 e8 01 	lds	r24, 0x01E8
    705c:	82 30       	cpi	r24, 0x02	; 2
    705e:	31 f4       	brne	.+12     	; 0x706c <LCD_Callback+0x30>
	{
		enuCommandCurrentState++;	//Moving to the next state for the LCD_sendCommand function
    7060:	80 91 e5 01 	lds	r24, 0x01E5
    7064:	8f 5f       	subi	r24, 0xFF	; 255
    7066:	80 93 e5 01 	sts	0x01E5, r24
    706a:	13 c0       	rjmp	.+38     	; 0x7092 <LCD_Callback+0x56>
	}
   else if(u8LCDFlag==LCD_DISPLAY_CHARACTER_FLAG)///send data
    706c:	80 91 e8 01 	lds	r24, 0x01E8
    7070:	83 30       	cpi	r24, 0x03	; 3
    7072:	31 f4       	brne	.+12     	; 0x7080 <LCD_Callback+0x44>
	{
		enuDataCurrentState++;  //Moving to the next state for the LCD_displayCharacter function
    7074:	80 91 e6 01 	lds	r24, 0x01E6
    7078:	8f 5f       	subi	r24, 0xFF	; 255
    707a:	80 93 e6 01 	sts	0x01E6, r24
    707e:	09 c0       	rjmp	.+18     	; 0x7092 <LCD_Callback+0x56>
	}
   else if(u8LCDFlag==LCD_CLEAR_SCREEN_FLAG)//clear
    7080:	80 91 e8 01 	lds	r24, 0x01E8
    7084:	84 30       	cpi	r24, 0x04	; 4
    7086:	29 f4       	brne	.+10     	; 0x7092 <LCD_Callback+0x56>
	{
		enuClearState++;  //Moving to the next state for the LCD_clearScreen function
    7088:	80 91 e7 01 	lds	r24, 0x01E7
    708c:	8f 5f       	subi	r24, 0xFF	; 255
    708e:	80 93 e7 01 	sts	0x01E7, r24
	}
	
	T0_Stop(); //Resetting the timer to count again 
    7092:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <T0_Stop>
}
    7096:	cf 91       	pop	r28
    7098:	df 91       	pop	r29
    709a:	08 95       	ret

0000709c <LCD_Init>:
* Return Value    : E_ERROR , E_OK
* Description     : A function to initialize the LCD
*************************************************************************************************/
#include "../../MCAL/DIO/DIO.h"
enuErrorStatus_t LCD_Init(void)
{
    709c:	ef 92       	push	r14
    709e:	ff 92       	push	r15
    70a0:	0f 93       	push	r16
    70a2:	1f 93       	push	r17
    70a4:	df 93       	push	r29
    70a6:	cf 93       	push	r28
    70a8:	00 d0       	rcall	.+0      	; 0x70aa <LCD_Init+0xe>
    70aa:	cd b7       	in	r28, 0x3d	; 61
    70ac:	de b7       	in	r29, 0x3e	; 62
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar=E_ERROR;
	
	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuInitPreviousState != enuInitCurrentState)
    70ae:	90 91 7d 01 	lds	r25, 0x017D
    70b2:	80 91 e4 01 	lds	r24, 0x01E4
    70b6:	98 17       	cp	r25, r24
    70b8:	09 f4       	brne	.+2      	; 0x70bc <LCD_Init+0x20>
    70ba:	ea c0       	rjmp	.+468    	; 0x7290 <LCD_Init+0x1f4>
	{
		switch(enuInitCurrentState) //Switching case on the current state 
    70bc:	80 91 e4 01 	lds	r24, 0x01E4
    70c0:	28 2f       	mov	r18, r24
    70c2:	30 e0       	ldi	r19, 0x00	; 0
    70c4:	3a 83       	std	Y+2, r19	; 0x02
    70c6:	29 83       	std	Y+1, r18	; 0x01
    70c8:	89 81       	ldd	r24, Y+1	; 0x01
    70ca:	9a 81       	ldd	r25, Y+2	; 0x02
    70cc:	83 30       	cpi	r24, 0x03	; 3
    70ce:	91 05       	cpc	r25, r1
    70d0:	09 f4       	brne	.+2      	; 0x70d4 <LCD_Init+0x38>
    70d2:	85 c0       	rjmp	.+266    	; 0x71de <LCD_Init+0x142>
    70d4:	29 81       	ldd	r18, Y+1	; 0x01
    70d6:	3a 81       	ldd	r19, Y+2	; 0x02
    70d8:	24 30       	cpi	r18, 0x04	; 4
    70da:	31 05       	cpc	r19, r1
    70dc:	8c f4       	brge	.+34     	; 0x7100 <LCD_Init+0x64>
    70de:	89 81       	ldd	r24, Y+1	; 0x01
    70e0:	9a 81       	ldd	r25, Y+2	; 0x02
    70e2:	81 30       	cpi	r24, 0x01	; 1
    70e4:	91 05       	cpc	r25, r1
    70e6:	09 f4       	brne	.+2      	; 0x70ea <LCD_Init+0x4e>
    70e8:	42 c0       	rjmp	.+132    	; 0x716e <LCD_Init+0xd2>
    70ea:	29 81       	ldd	r18, Y+1	; 0x01
    70ec:	3a 81       	ldd	r19, Y+2	; 0x02
    70ee:	22 30       	cpi	r18, 0x02	; 2
    70f0:	31 05       	cpc	r19, r1
    70f2:	0c f0       	brlt	.+2      	; 0x70f6 <LCD_Init+0x5a>
    70f4:	58 c0       	rjmp	.+176    	; 0x71a6 <LCD_Init+0x10a>
    70f6:	89 81       	ldd	r24, Y+1	; 0x01
    70f8:	9a 81       	ldd	r25, Y+2	; 0x02
    70fa:	00 97       	sbiw	r24, 0x00	; 0
    70fc:	a1 f0       	breq	.+40     	; 0x7126 <LCD_Init+0x8a>
    70fe:	c8 c0       	rjmp	.+400    	; 0x7290 <LCD_Init+0x1f4>
    7100:	29 81       	ldd	r18, Y+1	; 0x01
    7102:	3a 81       	ldd	r19, Y+2	; 0x02
    7104:	25 30       	cpi	r18, 0x05	; 5
    7106:	31 05       	cpc	r19, r1
    7108:	09 f4       	brne	.+2      	; 0x710c <LCD_Init+0x70>
    710a:	a0 c0       	rjmp	.+320    	; 0x724c <LCD_Init+0x1b0>
    710c:	89 81       	ldd	r24, Y+1	; 0x01
    710e:	9a 81       	ldd	r25, Y+2	; 0x02
    7110:	85 30       	cpi	r24, 0x05	; 5
    7112:	91 05       	cpc	r25, r1
    7114:	0c f4       	brge	.+2      	; 0x7118 <LCD_Init+0x7c>
    7116:	7f c0       	rjmp	.+254    	; 0x7216 <LCD_Init+0x17a>
    7118:	29 81       	ldd	r18, Y+1	; 0x01
    711a:	3a 81       	ldd	r19, Y+2	; 0x02
    711c:	26 30       	cpi	r18, 0x06	; 6
    711e:	31 05       	cpc	r19, r1
    7120:	09 f4       	brne	.+2      	; 0x7124 <LCD_Init+0x88>
    7122:	af c0       	rjmp	.+350    	; 0x7282 <LCD_Init+0x1e6>
    7124:	b5 c0       	rjmp	.+362    	; 0x7290 <LCD_Init+0x1f4>
		{
			/* The first state , Initializing the DIO pins */
			case START_INIT: 
			LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    7126:	aa e3       	ldi	r26, 0x3A	; 58
    7128:	b0 e0       	ldi	r27, 0x00	; 0
    712a:	ea e3       	ldi	r30, 0x3A	; 58
    712c:	f0 e0       	ldi	r31, 0x00	; 0
    712e:	80 81       	ld	r24, Z
    7130:	8e 60       	ori	r24, 0x0E	; 14
    7132:	8c 93       	st	X, r24
			
			/* Using the 4-bit mode */
			#if (DATA_BITS_MODE == LCD_FOUR_BIT_MODE)
			#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= LCD_HIGHEST_FOUR_PINS_OUTPUT; /* Configure the highest 4 bits of the data port as output pins */
    7134:	aa e3       	ldi	r26, 0x3A	; 58
    7136:	b0 e0       	ldi	r27, 0x00	; 0
    7138:	ea e3       	ldi	r30, 0x3A	; 58
    713a:	f0 e0       	ldi	r31, 0x00	; 0
    713c:	80 81       	ld	r24, Z
    713e:	80 6f       	ori	r24, 0xF0	; 240
    7140:	8c 93       	st	X, r24
			#else
			LCD_DATA_PORT_DIR |= LCD_LOWEST_FOUR_PINS_OUTPUT; /* Configure the lowest 4 bits of the data port as output pins */
			#endif
			#endif
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuInitPreviousState = enuInitCurrentState;
    7142:	80 91 e4 01 	lds	r24, 0x01E4
    7146:	80 93 7d 01 	sts	0x017D, r24
            /* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
			u8LCDFlag=LCD_INIT_FLAG;
    714a:	81 e0       	ldi	r24, 0x01	; 1
    714c:	80 93 e8 01 	sts	0x01E8, r24
			/* Making a delay of 50ms using a timer */
			TDelay_ms(TIMER0, DELAY_50_MS,LCD_Callback);
    7150:	ee e1       	ldi	r30, 0x1E	; 30
    7152:	f8 e3       	ldi	r31, 0x38	; 56
    7154:	80 e0       	ldi	r24, 0x00	; 0
    7156:	02 e3       	ldi	r16, 0x32	; 50
    7158:	10 e0       	ldi	r17, 0x00	; 0
    715a:	20 e0       	ldi	r18, 0x00	; 0
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	40 e0       	ldi	r20, 0x00	; 0
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	60 e0       	ldi	r22, 0x00	; 0
    7164:	70 e0       	ldi	r23, 0x00	; 0
    7166:	7f 01       	movw	r14, r30
    7168:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TDelay_ms>
    716c:	91 c0       	rjmp	.+290    	; 0x7290 <LCD_Init+0x1f4>
         break;
			
			/* The second state , Enabling the 4-bit mode */
			case INIT_DELAY:
			//4 bit mode command 1
			if(LCD_sendCommand(FOUR_BITS_DATA_MODE))
    716e:	82 e0       	ldi	r24, 0x02	; 2
    7170:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    7174:	88 23       	and	r24, r24
    7176:	09 f4       	brne	.+2      	; 0x717a <LCD_Init+0xde>
    7178:	8b c0       	rjmp	.+278    	; 0x7290 <LCD_Init+0x1f4>
			{
				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuInitPreviousState = enuInitCurrentState;
    717a:	80 91 e4 01 	lds	r24, 0x01E4
    717e:	80 93 7d 01 	sts	0x017D, r24
				
				/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/				
				u8LCDFlag=LCD_INIT_FLAG;
    7182:	81 e0       	ldi	r24, 0x01	; 1
    7184:	80 93 e8 01 	sts	0x01E8, r24
				
				/* Making a delay of 39us using a timer */	
				TDelay_us(TIMER0, DELAY_39_US,LCD_Callback);
    7188:	ee e1       	ldi	r30, 0x1E	; 30
    718a:	f8 e3       	ldi	r31, 0x38	; 56
    718c:	80 e0       	ldi	r24, 0x00	; 0
    718e:	07 e2       	ldi	r16, 0x27	; 39
    7190:	10 e0       	ldi	r17, 0x00	; 0
    7192:	20 e0       	ldi	r18, 0x00	; 0
    7194:	30 e0       	ldi	r19, 0x00	; 0
    7196:	40 e0       	ldi	r20, 0x00	; 0
    7198:	50 e0       	ldi	r21, 0x00	; 0
    719a:	60 e0       	ldi	r22, 0x00	; 0
    719c:	70 e0       	ldi	r23, 0x00	; 0
    719e:	7f 01       	movw	r14, r30
    71a0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
    71a4:	75 c0       	rjmp	.+234    	; 0x7290 <LCD_Init+0x1f4>
			break;
			
			/*The third state , configuring the number of lines and the font */
			case FB_MODE_C1_SENT:
			//4 bit mode command 2
			if(LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE)) /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    71a6:	88 e2       	ldi	r24, 0x28	; 40
    71a8:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    71ac:	88 23       	and	r24, r24
    71ae:	09 f4       	brne	.+2      	; 0x71b2 <LCD_Init+0x116>
    71b0:	6f c0       	rjmp	.+222    	; 0x7290 <LCD_Init+0x1f4>
			{
				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuInitPreviousState = enuInitCurrentState;
    71b2:	80 91 e4 01 	lds	r24, 0x01E4
    71b6:	80 93 7d 01 	sts	0x017D, r24
				
				/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
				u8LCDFlag=LCD_INIT_FLAG;
    71ba:	81 e0       	ldi	r24, 0x01	; 1
    71bc:	80 93 e8 01 	sts	0x01E8, r24
				
				/* Making a delay of 39us using a timer */
				TDelay_us(TIMER0, DELAY_39_US,LCD_Callback);
    71c0:	ee e1       	ldi	r30, 0x1E	; 30
    71c2:	f8 e3       	ldi	r31, 0x38	; 56
    71c4:	80 e0       	ldi	r24, 0x00	; 0
    71c6:	07 e2       	ldi	r16, 0x27	; 39
    71c8:	10 e0       	ldi	r17, 0x00	; 0
    71ca:	20 e0       	ldi	r18, 0x00	; 0
    71cc:	30 e0       	ldi	r19, 0x00	; 0
    71ce:	40 e0       	ldi	r20, 0x00	; 0
    71d0:	50 e0       	ldi	r21, 0x00	; 0
    71d2:	60 e0       	ldi	r22, 0x00	; 0
    71d4:	70 e0       	ldi	r23, 0x00	; 0
    71d6:	7f 01       	movw	r14, r30
    71d8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
    71dc:	59 c0       	rjmp	.+178    	; 0x7290 <LCD_Init+0x1f4>
			}
			break;
			
			/* The third state , Adjusting the cursor appearence */
			case FB_MODE_C2_SENT:
			if(LCD_sendCommand(CURSOR_OFF))
    71de:	8c e0       	ldi	r24, 0x0C	; 12
    71e0:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    71e4:	88 23       	and	r24, r24
    71e6:	09 f4       	brne	.+2      	; 0x71ea <LCD_Init+0x14e>
    71e8:	53 c0       	rjmp	.+166    	; 0x7290 <LCD_Init+0x1f4>
			{
				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
				enuInitPreviousState = enuInitCurrentState;
    71ea:	80 91 e4 01 	lds	r24, 0x01E4
    71ee:	80 93 7d 01 	sts	0x017D, r24
				
				/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
				u8LCDFlag=LCD_INIT_FLAG;
    71f2:	81 e0       	ldi	r24, 0x01	; 1
    71f4:	80 93 e8 01 	sts	0x01E8, r24
				
				/* Making a delay of 39us using a timer */
				TDelay_us(TIMER0, DELAY_39_US,LCD_Callback);
    71f8:	ee e1       	ldi	r30, 0x1E	; 30
    71fa:	f8 e3       	ldi	r31, 0x38	; 56
    71fc:	80 e0       	ldi	r24, 0x00	; 0
    71fe:	07 e2       	ldi	r16, 0x27	; 39
    7200:	10 e0       	ldi	r17, 0x00	; 0
    7202:	20 e0       	ldi	r18, 0x00	; 0
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	40 e0       	ldi	r20, 0x00	; 0
    7208:	50 e0       	ldi	r21, 0x00	; 0
    720a:	60 e0       	ldi	r22, 0x00	; 0
    720c:	70 e0       	ldi	r23, 0x00	; 0
    720e:	7f 01       	movw	r14, r30
    7210:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
    7214:	3d c0       	rjmp	.+122    	; 0x7290 <LCD_Init+0x1f4>
			}
			break;
			
			/* The forth state , updating the cursor move */
			case CURSOR_CMD_SENT:
			if(LCD_sendCommand(CURSOR_INCREMENT))
    7216:	86 e0       	ldi	r24, 0x06	; 6
    7218:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    721c:	88 23       	and	r24, r24
    721e:	c1 f1       	breq	.+112    	; 0x7290 <LCD_Init+0x1f4>
			{ 
				/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */				
				enuInitPreviousState = enuInitCurrentState;
    7220:	80 91 e4 01 	lds	r24, 0x01E4
    7224:	80 93 7d 01 	sts	0x017D, r24
				
				/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
				u8LCDFlag=LCD_INIT_FLAG;
    7228:	81 e0       	ldi	r24, 0x01	; 1
    722a:	80 93 e8 01 	sts	0x01E8, r24
				
				/* Making a delay of 39us using a timer */
				TDelay_us(TIMER0, DELAY_39_US,LCD_Callback);
    722e:	ee e1       	ldi	r30, 0x1E	; 30
    7230:	f8 e3       	ldi	r31, 0x38	; 56
    7232:	80 e0       	ldi	r24, 0x00	; 0
    7234:	07 e2       	ldi	r16, 0x27	; 39
    7236:	10 e0       	ldi	r17, 0x00	; 0
    7238:	20 e0       	ldi	r18, 0x00	; 0
    723a:	30 e0       	ldi	r19, 0x00	; 0
    723c:	40 e0       	ldi	r20, 0x00	; 0
    723e:	50 e0       	ldi	r21, 0x00	; 0
    7240:	60 e0       	ldi	r22, 0x00	; 0
    7242:	70 e0       	ldi	r23, 0x00	; 0
    7244:	7f 01       	movw	r14, r30
    7246:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
    724a:	22 c0       	rjmp	.+68     	; 0x7290 <LCD_Init+0x1f4>
			}
			break;
         
		 /* The fifth state , indicating that the cursor options configured successfully , then sending the clear command */
         case CURSOR_INC_CMD_SENT:
         if(LCD_sendCommand(CLEAR_COMMAND))
    724c:	81 e0       	ldi	r24, 0x01	; 1
    724e:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    7252:	88 23       	and	r24, r24
    7254:	e9 f0       	breq	.+58     	; 0x7290 <LCD_Init+0x1f4>
         {
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
            enuInitPreviousState = enuInitCurrentState;
    7256:	80 91 e4 01 	lds	r24, 0x01E4
    725a:	80 93 7d 01 	sts	0x017D, r24
            
			/* Making the flag equal to 1 to make it updating the LCD_Init state in the callback function*/
			u8LCDFlag=LCD_INIT_FLAG;
    725e:	81 e0       	ldi	r24, 0x01	; 1
    7260:	80 93 e8 01 	sts	0x01E8, r24
			
			/* Making a delay of 1530us using a timer */
            TDelay_us(TIMER0, DELAY_1530_US,LCD_Callback);
    7264:	ee e1       	ldi	r30, 0x1E	; 30
    7266:	f8 e3       	ldi	r31, 0x38	; 56
    7268:	80 e0       	ldi	r24, 0x00	; 0
    726a:	0a ef       	ldi	r16, 0xFA	; 250
    726c:	15 e0       	ldi	r17, 0x05	; 5
    726e:	20 e0       	ldi	r18, 0x00	; 0
    7270:	30 e0       	ldi	r19, 0x00	; 0
    7272:	40 e0       	ldi	r20, 0x00	; 0
    7274:	50 e0       	ldi	r21, 0x00	; 0
    7276:	60 e0       	ldi	r22, 0x00	; 0
    7278:	70 e0       	ldi	r23, 0x00	; 0
    727a:	7f 01       	movw	r14, r30
    727c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
    7280:	07 c0       	rjmp	.+14     	; 0x7290 <LCD_Init+0x1f4>
			
			/* The sixth state , indicating that the clear command is sent successfully */
			case LCD_CLEARED:
			
			/* Returning the handler E_ON , indicating that the function done successfully */
			enuRetVar=E_OK;
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	80 93 e9 01 	sts	0x01E9, r24
			
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuInitPreviousState=enuInitCurrentState;
    7288:	80 91 e4 01 	lds	r24, 0x01E4
    728c:	80 93 7d 01 	sts	0x017D, r24
		}
	}else
	{		
		//do nothing when the previous state is the current state
	}
	return enuRetVar; //return the Error handler
    7290:	80 91 e9 01 	lds	r24, 0x01E9
	/***********************************************/

}//end LCD_init
    7294:	0f 90       	pop	r0
    7296:	0f 90       	pop	r0
    7298:	cf 91       	pop	r28
    729a:	df 91       	pop	r29
    729c:	1f 91       	pop	r17
    729e:	0f 91       	pop	r16
    72a0:	ff 90       	pop	r15
    72a2:	ef 90       	pop	r14
    72a4:	08 95       	ret

000072a6 <LCD_sendCommand>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to send command to LCD
*************************************************************************************************/
static enuErrorStatus_t LCD_sendCommand(uint8_t u8Command)
{
    72a6:	ef 92       	push	r14
    72a8:	ff 92       	push	r15
    72aa:	0f 93       	push	r16
    72ac:	1f 93       	push	r17
    72ae:	df 93       	push	r29
    72b0:	cf 93       	push	r28
    72b2:	00 d0       	rcall	.+0      	; 0x72b4 <LCD_sendCommand+0xe>
    72b4:	0f 92       	push	r0
    72b6:	cd b7       	in	r28, 0x3d	; 61
    72b8:	de b7       	in	r29, 0x3e	; 62
    72ba:	89 83       	std	Y+1, r24	; 0x01
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar=E_ERROR;
	
	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuCommandPreviousState != enuCommandCurrentState)
    72bc:	90 91 7e 01 	lds	r25, 0x017E
    72c0:	80 91 e5 01 	lds	r24, 0x01E5
    72c4:	98 17       	cp	r25, r24
    72c6:	09 f4       	brne	.+2      	; 0x72ca <LCD_sendCommand+0x24>
    72c8:	c1 c0       	rjmp	.+386    	; 0x744c <LCD_sendCommand+0x1a6>
	{
		switch(enuCommandCurrentState)  //Switching case on the current state 
    72ca:	80 91 e5 01 	lds	r24, 0x01E5
    72ce:	28 2f       	mov	r18, r24
    72d0:	30 e0       	ldi	r19, 0x00	; 0
    72d2:	3b 83       	std	Y+3, r19	; 0x03
    72d4:	2a 83       	std	Y+2, r18	; 0x02
    72d6:	8a 81       	ldd	r24, Y+2	; 0x02
    72d8:	9b 81       	ldd	r25, Y+3	; 0x03
    72da:	82 30       	cpi	r24, 0x02	; 2
    72dc:	91 05       	cpc	r25, r1
    72de:	09 f4       	brne	.+2      	; 0x72e2 <LCD_sendCommand+0x3c>
    72e0:	64 c0       	rjmp	.+200    	; 0x73aa <LCD_sendCommand+0x104>
    72e2:	2a 81       	ldd	r18, Y+2	; 0x02
    72e4:	3b 81       	ldd	r19, Y+3	; 0x03
    72e6:	23 30       	cpi	r18, 0x03	; 3
    72e8:	31 05       	cpc	r19, r1
    72ea:	54 f4       	brge	.+20     	; 0x7300 <LCD_sendCommand+0x5a>
    72ec:	8a 81       	ldd	r24, Y+2	; 0x02
    72ee:	9b 81       	ldd	r25, Y+3	; 0x03
    72f0:	00 97       	sbiw	r24, 0x00	; 0
    72f2:	c9 f0       	breq	.+50     	; 0x7326 <LCD_sendCommand+0x80>
    72f4:	2a 81       	ldd	r18, Y+2	; 0x02
    72f6:	3b 81       	ldd	r19, Y+3	; 0x03
    72f8:	21 30       	cpi	r18, 0x01	; 1
    72fa:	31 05       	cpc	r19, r1
    72fc:	71 f1       	breq	.+92     	; 0x735a <LCD_sendCommand+0xb4>
    72fe:	a6 c0       	rjmp	.+332    	; 0x744c <LCD_sendCommand+0x1a6>
    7300:	8a 81       	ldd	r24, Y+2	; 0x02
    7302:	9b 81       	ldd	r25, Y+3	; 0x03
    7304:	84 30       	cpi	r24, 0x04	; 4
    7306:	91 05       	cpc	r25, r1
    7308:	09 f4       	brne	.+2      	; 0x730c <LCD_sendCommand+0x66>
    730a:	8b c0       	rjmp	.+278    	; 0x7422 <LCD_sendCommand+0x17c>
    730c:	2a 81       	ldd	r18, Y+2	; 0x02
    730e:	3b 81       	ldd	r19, Y+3	; 0x03
    7310:	24 30       	cpi	r18, 0x04	; 4
    7312:	31 05       	cpc	r19, r1
    7314:	0c f4       	brge	.+2      	; 0x7318 <LCD_sendCommand+0x72>
    7316:	56 c0       	rjmp	.+172    	; 0x73c4 <LCD_sendCommand+0x11e>
    7318:	8a 81       	ldd	r24, Y+2	; 0x02
    731a:	9b 81       	ldd	r25, Y+3	; 0x03
    731c:	85 30       	cpi	r24, 0x05	; 5
    731e:	91 05       	cpc	r25, r1
    7320:	09 f4       	brne	.+2      	; 0x7324 <LCD_sendCommand+0x7e>
    7322:	8c c0       	rjmp	.+280    	; 0x743c <LCD_sendCommand+0x196>
    7324:	93 c0       	rjmp	.+294    	; 0x744c <LCD_sendCommand+0x1a6>
		{
			/* The first state , starting the function and initializing the DIO pins */
			case COMMAND_START:
			enuRetVar=E_ERROR;
    7326:	10 92 ea 01 	sts	0x01EA, r1
			CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    732a:	ab e3       	ldi	r26, 0x3B	; 59
    732c:	b0 e0       	ldi	r27, 0x00	; 0
    732e:	eb e3       	ldi	r30, 0x3B	; 59
    7330:	f0 e0       	ldi	r31, 0x00	; 0
    7332:	80 81       	ld	r24, Z
    7334:	8d 7f       	andi	r24, 0xFD	; 253
    7336:	8c 93       	st	X, r24
			CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    7338:	ab e3       	ldi	r26, 0x3B	; 59
    733a:	b0 e0       	ldi	r27, 0x00	; 0
    733c:	eb e3       	ldi	r30, 0x3B	; 59
    733e:	f0 e0       	ldi	r31, 0x00	; 0
    7340:	80 81       	ld	r24, Z
    7342:	8b 7f       	andi	r24, 0xFB	; 251
    7344:	8c 93       	st	X, r24
			
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuCommandPreviousState = enuCommandCurrentState;
    7346:	80 91 e5 01 	lds	r24, 0x01E5
    734a:	80 93 7e 01 	sts	0x017E, r24
			
			/* Moving to the next state */
			enuCommandCurrentState++; 
    734e:	80 91 e5 01 	lds	r24, 0x01E5
    7352:	8f 5f       	subi	r24, 0xFF	; 255
    7354:	80 93 e5 01 	sts	0x01E5, r24
    7358:	79 c0       	rjmp	.+242    	; 0x744c <LCD_sendCommand+0x1a6>
			/* The second state , sending the 4 high bits of the command on the data bus D4 --> D7*/
			case COMMAND_INIT: 
			//4 bit mode command 1
			/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
			#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_LOWEST_FOUR_PINS_OUTPUT) | (u8Command & LCD_HIGHEST_FOUR_PINS_OUTPUT);
    735a:	ab e3       	ldi	r26, 0x3B	; 59
    735c:	b0 e0       	ldi	r27, 0x00	; 0
    735e:	eb e3       	ldi	r30, 0x3B	; 59
    7360:	f0 e0       	ldi	r31, 0x00	; 0
    7362:	80 81       	ld	r24, Z
    7364:	98 2f       	mov	r25, r24
    7366:	9f 70       	andi	r25, 0x0F	; 15
    7368:	89 81       	ldd	r24, Y+1	; 0x01
    736a:	80 7f       	andi	r24, 0xF0	; 240
    736c:	89 2b       	or	r24, r25
    736e:	8c 93       	st	X, r24
			#else
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_HIGHEST_FOUR_PINS_OUTPUT) | ((u8Command & LCD_HIGHEST_FOUR_PINS_OUTPUT) >> LCD_SHIFTING_VALUE);
			#endif
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    7370:	ab e3       	ldi	r26, 0x3B	; 59
    7372:	b0 e0       	ldi	r27, 0x00	; 0
    7374:	eb e3       	ldi	r30, 0x3B	; 59
    7376:	f0 e0       	ldi	r31, 0x00	; 0
    7378:	80 81       	ld	r24, Z
    737a:	88 60       	ori	r24, 0x08	; 8
    737c:	8c 93       	st	X, r24
			
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuCommandPreviousState = enuCommandCurrentState;
    737e:	80 91 e5 01 	lds	r24, 0x01E5
    7382:	80 93 7e 01 	sts	0x017E, r24
			u8LCDFlag=LCD_SEND_COMMAND_FLAG;
    7386:	82 e0       	ldi	r24, 0x02	; 2
    7388:	80 93 e8 01 	sts	0x01E8, r24
			TDelay_ms(TIMER0, DELAY_1_MS,LCD_Callback);
    738c:	ee e1       	ldi	r30, 0x1E	; 30
    738e:	f8 e3       	ldi	r31, 0x38	; 56
    7390:	80 e0       	ldi	r24, 0x00	; 0
    7392:	01 e0       	ldi	r16, 0x01	; 1
    7394:	10 e0       	ldi	r17, 0x00	; 0
    7396:	20 e0       	ldi	r18, 0x00	; 0
    7398:	30 e0       	ldi	r19, 0x00	; 0
    739a:	40 e0       	ldi	r20, 0x00	; 0
    739c:	50 e0       	ldi	r21, 0x00	; 0
    739e:	60 e0       	ldi	r22, 0x00	; 0
    73a0:	70 e0       	ldi	r23, 0x00	; 0
    73a2:	7f 01       	movw	r14, r30
    73a4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TDelay_ms>
    73a8:	51 c0       	rjmp	.+162    	; 0x744c <LCD_sendCommand+0x1a6>
			break;			

			/* The third state , Indicating that the previous state is done successfully , then clearing the E pin*/
			case COMMAND1_CFG:
			CLEAR_BIT(LCD_CTRL_PORT,E); // clear the E-pin
    73aa:	ab e3       	ldi	r26, 0x3B	; 59
    73ac:	b0 e0       	ldi	r27, 0x00	; 0
    73ae:	eb e3       	ldi	r30, 0x3B	; 59
    73b0:	f0 e0       	ldi	r31, 0x00	; 0
    73b2:	80 81       	ld	r24, Z
    73b4:	87 7f       	andi	r24, 0xF7	; 247
    73b6:	8c 93       	st	X, r24
			
			/* Moving to the next state */
			enuCommandCurrentState++;	
    73b8:	80 91 e5 01 	lds	r24, 0x01E5
    73bc:	8f 5f       	subi	r24, 0xFF	; 255
    73be:	80 93 e5 01 	sts	0x01E5, r24
    73c2:	44 c0       	rjmp	.+136    	; 0x744c <LCD_sendCommand+0x1a6>
			break;
			
			/* The forth state , indicating the the high 4 bits are sent successfully */
			case COMMAND1_SENT:
			#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_LOWEST_FOUR_PINS_OUTPUT) | ((u8Command & LCD_LOWEST_FOUR_PINS_OUTPUT) << LCD_SHIFTING_VALUE);
    73c4:	ab e3       	ldi	r26, 0x3B	; 59
    73c6:	b0 e0       	ldi	r27, 0x00	; 0
    73c8:	eb e3       	ldi	r30, 0x3B	; 59
    73ca:	f0 e0       	ldi	r31, 0x00	; 0
    73cc:	80 81       	ld	r24, Z
    73ce:	28 2f       	mov	r18, r24
    73d0:	2f 70       	andi	r18, 0x0F	; 15
    73d2:	89 81       	ldd	r24, Y+1	; 0x01
    73d4:	88 2f       	mov	r24, r24
    73d6:	90 e0       	ldi	r25, 0x00	; 0
    73d8:	82 95       	swap	r24
    73da:	92 95       	swap	r25
    73dc:	90 7f       	andi	r25, 0xF0	; 240
    73de:	98 27       	eor	r25, r24
    73e0:	80 7f       	andi	r24, 0xF0	; 240
    73e2:	98 27       	eor	r25, r24
    73e4:	82 2b       	or	r24, r18
    73e6:	8c 93       	st	X, r24
			#else
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_HIGHEST_FOUR_PINS_OUTPUT) | (u8Command & LCD_LOWEST_FOUR_PINS_OUTPUT);
			#endif
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    73e8:	ab e3       	ldi	r26, 0x3B	; 59
    73ea:	b0 e0       	ldi	r27, 0x00	; 0
    73ec:	eb e3       	ldi	r30, 0x3B	; 59
    73ee:	f0 e0       	ldi	r31, 0x00	; 0
    73f0:	80 81       	ld	r24, Z
    73f2:	88 60       	ori	r24, 0x08	; 8
    73f4:	8c 93       	st	X, r24
			
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuCommandPreviousState = enuCommandCurrentState;
    73f6:	80 91 e5 01 	lds	r24, 0x01E5
    73fa:	80 93 7e 01 	sts	0x017E, r24
			u8LCDFlag=LCD_SEND_COMMAND_FLAG;
    73fe:	82 e0       	ldi	r24, 0x02	; 2
    7400:	80 93 e8 01 	sts	0x01E8, r24
			TDelay_ms(TIMER0, DELAY_1_MS,LCD_Callback);
    7404:	ee e1       	ldi	r30, 0x1E	; 30
    7406:	f8 e3       	ldi	r31, 0x38	; 56
    7408:	80 e0       	ldi	r24, 0x00	; 0
    740a:	01 e0       	ldi	r16, 0x01	; 1
    740c:	10 e0       	ldi	r17, 0x00	; 0
    740e:	20 e0       	ldi	r18, 0x00	; 0
    7410:	30 e0       	ldi	r19, 0x00	; 0
    7412:	40 e0       	ldi	r20, 0x00	; 0
    7414:	50 e0       	ldi	r21, 0x00	; 0
    7416:	60 e0       	ldi	r22, 0x00	; 0
    7418:	70 e0       	ldi	r23, 0x00	; 0
    741a:	7f 01       	movw	r14, r30
    741c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TDelay_ms>
    7420:	15 c0       	rjmp	.+42     	; 0x744c <LCD_sendCommand+0x1a6>
			break;
			
			/* The fifth state */
			case COMMAND2_CFG:
			CLEAR_BIT(LCD_CTRL_PORT,E); // clear the E-pin
    7422:	ab e3       	ldi	r26, 0x3B	; 59
    7424:	b0 e0       	ldi	r27, 0x00	; 0
    7426:	eb e3       	ldi	r30, 0x3B	; 59
    7428:	f0 e0       	ldi	r31, 0x00	; 0
    742a:	80 81       	ld	r24, Z
    742c:	87 7f       	andi	r24, 0xF7	; 247
    742e:	8c 93       	st	X, r24
			
			/*Moving to the next state*/
			enuCommandCurrentState++;
    7430:	80 91 e5 01 	lds	r24, 0x01E5
    7434:	8f 5f       	subi	r24, 0xFF	; 255
    7436:	80 93 e5 01 	sts	0x01E5, r24
    743a:	08 c0       	rjmp	.+16     	; 0x744c <LCD_sendCommand+0x1a6>
			
			/*The sixth state */
			case COMMAND2_SENT:
			
			/*Returning E_OK*/
			enuRetVar=E_OK;
    743c:	81 e0       	ldi	r24, 0x01	; 1
    743e:	80 93 ea 01 	sts	0x01EA, r24
			
			/* Re-initialize the current state and the previous state to start again from the same point */
 			enuCommandCurrentState=COMMAND_START;
    7442:	10 92 e5 01 	sts	0x01E5, r1
 			enuCommandPreviousState=COMMAND2_SENT;
    7446:	85 e0       	ldi	r24, 0x05	; 5
    7448:	80 93 7e 01 	sts	0x017E, r24
	}
	else
	{	
		// do nothing
	}
	return enuRetVar;	
    744c:	80 91 ea 01 	lds	r24, 0x01EA
	/**************************/

}//end LCD_sendCommand
    7450:	0f 90       	pop	r0
    7452:	0f 90       	pop	r0
    7454:	0f 90       	pop	r0
    7456:	cf 91       	pop	r28
    7458:	df 91       	pop	r29
    745a:	1f 91       	pop	r17
    745c:	0f 91       	pop	r16
    745e:	ff 90       	pop	r15
    7460:	ef 90       	pop	r14
    7462:	08 95       	ret

00007464 <LCD_displayCharacter>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to display a character on the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_displayCharacter(uint8_t u8Data)
{
    7464:	ef 92       	push	r14
    7466:	ff 92       	push	r15
    7468:	0f 93       	push	r16
    746a:	1f 93       	push	r17
    746c:	df 93       	push	r29
    746e:	cf 93       	push	r28
    7470:	00 d0       	rcall	.+0      	; 0x7472 <LCD_displayCharacter+0xe>
    7472:	0f 92       	push	r0
    7474:	cd b7       	in	r28, 0x3d	; 61
    7476:	de b7       	in	r29, 0x3e	; 62
    7478:	89 83       	std	Y+1, r24	; 0x01
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar=E_ERROR;
	
	/* Making sure that the function won't proceed as long as the previous state is the current state */
	if(enuDataPreviousState != enuDataCurrentState)
    747a:	90 91 7f 01 	lds	r25, 0x017F
    747e:	80 91 e6 01 	lds	r24, 0x01E6
    7482:	98 17       	cp	r25, r24
    7484:	09 f4       	brne	.+2      	; 0x7488 <LCD_displayCharacter+0x24>
    7486:	c1 c0       	rjmp	.+386    	; 0x760a <LCD_displayCharacter+0x1a6>
	{
		switch(enuDataCurrentState)		//Switching case on the current state 
    7488:	80 91 e6 01 	lds	r24, 0x01E6
    748c:	28 2f       	mov	r18, r24
    748e:	30 e0       	ldi	r19, 0x00	; 0
    7490:	3b 83       	std	Y+3, r19	; 0x03
    7492:	2a 83       	std	Y+2, r18	; 0x02
    7494:	8a 81       	ldd	r24, Y+2	; 0x02
    7496:	9b 81       	ldd	r25, Y+3	; 0x03
    7498:	82 30       	cpi	r24, 0x02	; 2
    749a:	91 05       	cpc	r25, r1
    749c:	09 f4       	brne	.+2      	; 0x74a0 <LCD_displayCharacter+0x3c>
    749e:	64 c0       	rjmp	.+200    	; 0x7568 <LCD_displayCharacter+0x104>
    74a0:	2a 81       	ldd	r18, Y+2	; 0x02
    74a2:	3b 81       	ldd	r19, Y+3	; 0x03
    74a4:	23 30       	cpi	r18, 0x03	; 3
    74a6:	31 05       	cpc	r19, r1
    74a8:	54 f4       	brge	.+20     	; 0x74be <LCD_displayCharacter+0x5a>
    74aa:	8a 81       	ldd	r24, Y+2	; 0x02
    74ac:	9b 81       	ldd	r25, Y+3	; 0x03
    74ae:	00 97       	sbiw	r24, 0x00	; 0
    74b0:	c9 f0       	breq	.+50     	; 0x74e4 <LCD_displayCharacter+0x80>
    74b2:	2a 81       	ldd	r18, Y+2	; 0x02
    74b4:	3b 81       	ldd	r19, Y+3	; 0x03
    74b6:	21 30       	cpi	r18, 0x01	; 1
    74b8:	31 05       	cpc	r19, r1
    74ba:	71 f1       	breq	.+92     	; 0x7518 <LCD_displayCharacter+0xb4>
    74bc:	a6 c0       	rjmp	.+332    	; 0x760a <LCD_displayCharacter+0x1a6>
    74be:	8a 81       	ldd	r24, Y+2	; 0x02
    74c0:	9b 81       	ldd	r25, Y+3	; 0x03
    74c2:	84 30       	cpi	r24, 0x04	; 4
    74c4:	91 05       	cpc	r25, r1
    74c6:	09 f4       	brne	.+2      	; 0x74ca <LCD_displayCharacter+0x66>
    74c8:	8b c0       	rjmp	.+278    	; 0x75e0 <LCD_displayCharacter+0x17c>
    74ca:	2a 81       	ldd	r18, Y+2	; 0x02
    74cc:	3b 81       	ldd	r19, Y+3	; 0x03
    74ce:	24 30       	cpi	r18, 0x04	; 4
    74d0:	31 05       	cpc	r19, r1
    74d2:	0c f4       	brge	.+2      	; 0x74d6 <LCD_displayCharacter+0x72>
    74d4:	56 c0       	rjmp	.+172    	; 0x7582 <LCD_displayCharacter+0x11e>
    74d6:	8a 81       	ldd	r24, Y+2	; 0x02
    74d8:	9b 81       	ldd	r25, Y+3	; 0x03
    74da:	85 30       	cpi	r24, 0x05	; 5
    74dc:	91 05       	cpc	r25, r1
    74de:	09 f4       	brne	.+2      	; 0x74e2 <LCD_displayCharacter+0x7e>
    74e0:	8c c0       	rjmp	.+280    	; 0x75fa <LCD_displayCharacter+0x196>
    74e2:	93 c0       	rjmp	.+294    	; 0x760a <LCD_displayCharacter+0x1a6>
		{
			/*The first state , Initializing the DIO pins*/
			case DATA_START:
			enuRetVar=E_ERROR;
    74e4:	10 92 eb 01 	sts	0x01EB, r1
			SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    74e8:	ab e3       	ldi	r26, 0x3B	; 59
    74ea:	b0 e0       	ldi	r27, 0x00	; 0
    74ec:	eb e3       	ldi	r30, 0x3B	; 59
    74ee:	f0 e0       	ldi	r31, 0x00	; 0
    74f0:	80 81       	ld	r24, Z
    74f2:	82 60       	ori	r24, 0x02	; 2
    74f4:	8c 93       	st	X, r24
			CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    74f6:	ab e3       	ldi	r26, 0x3B	; 59
    74f8:	b0 e0       	ldi	r27, 0x00	; 0
    74fa:	eb e3       	ldi	r30, 0x3B	; 59
    74fc:	f0 e0       	ldi	r31, 0x00	; 0
    74fe:	80 81       	ld	r24, Z
    7500:	8b 7f       	andi	r24, 0xFB	; 251
    7502:	8c 93       	st	X, r24
			
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			enuDataPreviousState = enuDataCurrentState;
    7504:	80 91 e6 01 	lds	r24, 0x01E6
    7508:	80 93 7f 01 	sts	0x017F, r24
			
			/* Moving to the next state */
			enuDataCurrentState++;
    750c:	80 91 e6 01 	lds	r24, 0x01E6
    7510:	8f 5f       	subi	r24, 0xFF	; 255
    7512:	80 93 e6 01 	sts	0x01E6, r24
    7516:	79 c0       	rjmp	.+242    	; 0x760a <LCD_displayCharacter+0x1a6>
			
			/* The second state , sending the high 4 bits */
			case DATA_INIT:
			 /* out the highest 4 bits of the required data to the data bus D4 --> D7 */
			 #ifdef UPPER_PORT_PINS
			 LCD_DATA_PORT = (LCD_DATA_PORT & LCD_LOWEST_FOUR_PINS_OUTPUT) | (u8Data & LCD_HIGHEST_FOUR_PINS_OUTPUT);
    7518:	ab e3       	ldi	r26, 0x3B	; 59
    751a:	b0 e0       	ldi	r27, 0x00	; 0
    751c:	eb e3       	ldi	r30, 0x3B	; 59
    751e:	f0 e0       	ldi	r31, 0x00	; 0
    7520:	80 81       	ld	r24, Z
    7522:	98 2f       	mov	r25, r24
    7524:	9f 70       	andi	r25, 0x0F	; 15
    7526:	89 81       	ldd	r24, Y+1	; 0x01
    7528:	80 7f       	andi	r24, 0xF0	; 240
    752a:	89 2b       	or	r24, r25
    752c:	8c 93       	st	X, r24
			 #else
			 LCD_DATA_PORT = (LCD_DATA_PORT & LCD_HIGHEST_FOUR_PINS_OUTPUT) | ((u8Data & LCD_HIGHEST_FOUR_PINS_OUTPUT) >> LCD_SHIFTING_VALUE);
			 #endif
			 SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    752e:	ab e3       	ldi	r26, 0x3B	; 59
    7530:	b0 e0       	ldi	r27, 0x00	; 0
    7532:	eb e3       	ldi	r30, 0x3B	; 59
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	80 81       	ld	r24, Z
    7538:	88 60       	ori	r24, 0x08	; 8
    753a:	8c 93       	st	X, r24
         
			 /* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			 enuDataPreviousState = enuDataCurrentState;
    753c:	80 91 e6 01 	lds	r24, 0x01E6
    7540:	80 93 7f 01 	sts	0x017F, r24
			 /* For updating the state */
			 u8LCDFlag=LCD_DISPLAY_CHARACTER_FLAG;
    7544:	83 e0       	ldi	r24, 0x03	; 3
    7546:	80 93 e8 01 	sts	0x01E8, r24
			 TDelay_ms(TIMER0, DELAY_1_MS,LCD_Callback);
    754a:	ee e1       	ldi	r30, 0x1E	; 30
    754c:	f8 e3       	ldi	r31, 0x38	; 56
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	01 e0       	ldi	r16, 0x01	; 1
    7552:	10 e0       	ldi	r17, 0x00	; 0
    7554:	20 e0       	ldi	r18, 0x00	; 0
    7556:	30 e0       	ldi	r19, 0x00	; 0
    7558:	40 e0       	ldi	r20, 0x00	; 0
    755a:	50 e0       	ldi	r21, 0x00	; 0
    755c:	60 e0       	ldi	r22, 0x00	; 0
    755e:	70 e0       	ldi	r23, 0x00	; 0
    7560:	7f 01       	movw	r14, r30
    7562:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TDelay_ms>
    7566:	51 c0       	rjmp	.+162    	; 0x760a <LCD_displayCharacter+0x1a6>
			 break;		
			
			/* The third state */
			case DATA1_CFG:
			CLEAR_BIT(LCD_CTRL_PORT,E); // clear the E-pin
    7568:	ab e3       	ldi	r26, 0x3B	; 59
    756a:	b0 e0       	ldi	r27, 0x00	; 0
    756c:	eb e3       	ldi	r30, 0x3B	; 59
    756e:	f0 e0       	ldi	r31, 0x00	; 0
    7570:	80 81       	ld	r24, Z
    7572:	87 7f       	andi	r24, 0xF7	; 247
    7574:	8c 93       	st	X, r24
			
			/* Moving to the next state*/
			enuDataCurrentState++;
    7576:	80 91 e6 01 	lds	r24, 0x01E6
    757a:	8f 5f       	subi	r24, 0xFF	; 255
    757c:	80 93 e6 01 	sts	0x01E6, r24
    7580:	44 c0       	rjmp	.+136    	; 0x760a <LCD_displayCharacter+0x1a6>
			break;
			
			/* The forth state , sending the lower 4 bits */
			case DATA1_SENT:
			#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_LOWEST_FOUR_PINS_OUTPUT) | ((u8Data & LCD_LOWEST_FOUR_PINS_OUTPUT) << LCD_SHIFTING_VALUE);
    7582:	ab e3       	ldi	r26, 0x3B	; 59
    7584:	b0 e0       	ldi	r27, 0x00	; 0
    7586:	eb e3       	ldi	r30, 0x3B	; 59
    7588:	f0 e0       	ldi	r31, 0x00	; 0
    758a:	80 81       	ld	r24, Z
    758c:	28 2f       	mov	r18, r24
    758e:	2f 70       	andi	r18, 0x0F	; 15
    7590:	89 81       	ldd	r24, Y+1	; 0x01
    7592:	88 2f       	mov	r24, r24
    7594:	90 e0       	ldi	r25, 0x00	; 0
    7596:	82 95       	swap	r24
    7598:	92 95       	swap	r25
    759a:	90 7f       	andi	r25, 0xF0	; 240
    759c:	98 27       	eor	r25, r24
    759e:	80 7f       	andi	r24, 0xF0	; 240
    75a0:	98 27       	eor	r25, r24
    75a2:	82 2b       	or	r24, r18
    75a4:	8c 93       	st	X, r24
			#else
			LCD_DATA_PORT = (LCD_DATA_PORT & LCD_HIGHEST_FOUR_PINS_OUTPUT) | (u8Data & LCD_LOWEST_FOUR_PINS_OUTPUT);
			#endif
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    75a6:	ab e3       	ldi	r26, 0x3B	; 59
    75a8:	b0 e0       	ldi	r27, 0x00	; 0
    75aa:	eb e3       	ldi	r30, 0x3B	; 59
    75ac:	f0 e0       	ldi	r31, 0x00	; 0
    75ae:	80 81       	ld	r24, Z
    75b0:	88 60       	ori	r24, 0x08	; 8
    75b2:	8c 93       	st	X, r24
			/* Making the current state equal to the previous state to make sure that the function won't proceed till the timer finishes counting */
			 enuDataPreviousState = enuDataCurrentState;
    75b4:	80 91 e6 01 	lds	r24, 0x01E6
    75b8:	80 93 7f 01 	sts	0x017F, r24
			
			/* For updating the state */
			u8LCDFlag=LCD_DISPLAY_CHARACTER_FLAG;
    75bc:	83 e0       	ldi	r24, 0x03	; 3
    75be:	80 93 e8 01 	sts	0x01E8, r24
			TDelay_ms(TIMER0, DELAY_1_MS,LCD_Callback);
    75c2:	ee e1       	ldi	r30, 0x1E	; 30
    75c4:	f8 e3       	ldi	r31, 0x38	; 56
    75c6:	80 e0       	ldi	r24, 0x00	; 0
    75c8:	01 e0       	ldi	r16, 0x01	; 1
    75ca:	10 e0       	ldi	r17, 0x00	; 0
    75cc:	20 e0       	ldi	r18, 0x00	; 0
    75ce:	30 e0       	ldi	r19, 0x00	; 0
    75d0:	40 e0       	ldi	r20, 0x00	; 0
    75d2:	50 e0       	ldi	r21, 0x00	; 0
    75d4:	60 e0       	ldi	r22, 0x00	; 0
    75d6:	70 e0       	ldi	r23, 0x00	; 0
    75d8:	7f 01       	movw	r14, r30
    75da:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <TDelay_ms>
    75de:	15 c0       	rjmp	.+42     	; 0x760a <LCD_displayCharacter+0x1a6>
			break;


			/* The fifth state*/
			case DATA2_CFG:
			CLEAR_BIT(LCD_CTRL_PORT,E); // clear the E-pin
    75e0:	ab e3       	ldi	r26, 0x3B	; 59
    75e2:	b0 e0       	ldi	r27, 0x00	; 0
    75e4:	eb e3       	ldi	r30, 0x3B	; 59
    75e6:	f0 e0       	ldi	r31, 0x00	; 0
    75e8:	80 81       	ld	r24, Z
    75ea:	87 7f       	andi	r24, 0xF7	; 247
    75ec:	8c 93       	st	X, r24
			/* Moving to the next state */
			enuDataCurrentState++;
    75ee:	80 91 e6 01 	lds	r24, 0x01E6
    75f2:	8f 5f       	subi	r24, 0xFF	; 255
    75f4:	80 93 e6 01 	sts	0x01E6, r24
    75f8:	08 c0       	rjmp	.+16     	; 0x760a <LCD_displayCharacter+0x1a6>
			break;
			
			/* The sixth state*/
			case DATA2_SENT:
			/* Returning E_OK*/
			enuRetVar=E_OK;
    75fa:	81 e0       	ldi	r24, 0x01	; 1
    75fc:	80 93 eb 01 	sts	0x01EB, r24
			
			 /* Re-initialize the current state and the previous state to start again from the same point *//* Re-initialize the */
			 enuDataCurrentState=DATA_START;
    7600:	10 92 e6 01 	sts	0x01E6, r1
			 enuDataPreviousState=DATA2_SENT;
    7604:	85 e0       	ldi	r24, 0x05	; 5
    7606:	80 93 7f 01 	sts	0x017F, r24
	}
	else
	{
		// do nothing 	
	}
	return enuRetVar;
    760a:	80 91 eb 01 	lds	r24, 0x01EB
	
	/**************************/

}//end LCD_displayCharacter
    760e:	0f 90       	pop	r0
    7610:	0f 90       	pop	r0
    7612:	0f 90       	pop	r0
    7614:	cf 91       	pop	r28
    7616:	df 91       	pop	r29
    7618:	1f 91       	pop	r17
    761a:	0f 91       	pop	r16
    761c:	ff 90       	pop	r15
    761e:	ef 90       	pop	r14
    7620:	08 95       	ret

00007622 <LCD_displayString>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to display a string on the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_displayString(const uint8_t *pu8Str)
{
    7622:	df 93       	push	r29
    7624:	cf 93       	push	r28
    7626:	00 d0       	rcall	.+0      	; 0x7628 <LCD_displayString+0x6>
    7628:	0f 92       	push	r0
    762a:	cd b7       	in	r28, 0x3d	; 61
    762c:	de b7       	in	r29, 0x3e	; 62
    762e:	9a 83       	std	Y+2, r25	; 0x02
    7630:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the index*/
	static uint8_t u8I = 0;
   if (pu8Str == NULLPTR)
    7632:	89 81       	ldd	r24, Y+1	; 0x01
    7634:	9a 81       	ldd	r25, Y+2	; 0x02
    7636:	00 97       	sbiw	r24, 0x00	; 0
    7638:	11 f4       	brne	.+4      	; 0x763e <LCD_displayString+0x1c>
   {
      return E_ERROR;
    763a:	1b 82       	std	Y+3, r1	; 0x03
    763c:	25 c0       	rjmp	.+74     	; 0x7688 <LCD_displayString+0x66>
   }
   
   /*Displaying a character as long as it is not a NULL*/
   if (pu8Str[u8I] != '\0')
    763e:	80 91 ec 01 	lds	r24, 0x01EC
    7642:	28 2f       	mov	r18, r24
    7644:	30 e0       	ldi	r19, 0x00	; 0
    7646:	89 81       	ldd	r24, Y+1	; 0x01
    7648:	9a 81       	ldd	r25, Y+2	; 0x02
    764a:	fc 01       	movw	r30, r24
    764c:	e2 0f       	add	r30, r18
    764e:	f3 1f       	adc	r31, r19
    7650:	80 81       	ld	r24, Z
    7652:	88 23       	and	r24, r24
    7654:	a9 f0       	breq	.+42     	; 0x7680 <LCD_displayString+0x5e>
   {
      if (LCD_displayCharacter(pu8Str[u8I]))
    7656:	80 91 ec 01 	lds	r24, 0x01EC
    765a:	28 2f       	mov	r18, r24
    765c:	30 e0       	ldi	r19, 0x00	; 0
    765e:	89 81       	ldd	r24, Y+1	; 0x01
    7660:	9a 81       	ldd	r25, Y+2	; 0x02
    7662:	fc 01       	movw	r30, r24
    7664:	e2 0f       	add	r30, r18
    7666:	f3 1f       	adc	r31, r19
    7668:	80 81       	ld	r24, Z
    766a:	0e 94 32 3a 	call	0x7464	; 0x7464 <LCD_displayCharacter>
    766e:	88 23       	and	r24, r24
    7670:	29 f0       	breq	.+10     	; 0x767c <LCD_displayString+0x5a>
      {
		  /* updating the index value */
         u8I++;
    7672:	80 91 ec 01 	lds	r24, 0x01EC
    7676:	8f 5f       	subi	r24, 0xFF	; 255
    7678:	80 93 ec 01 	sts	0x01EC, r24
   {
	   /* re-initialize the index value */
      u8I=0;
      return E_OK;
   }
   return E_ERROR;
    767c:	1b 82       	std	Y+3, r1	; 0x03
    767e:	04 c0       	rjmp	.+8      	; 0x7688 <LCD_displayString+0x66>
      }
   }
   else
   {
	   /* re-initialize the index value */
      u8I=0;
    7680:	10 92 ec 01 	sts	0x01EC, r1
      return E_OK;
    7684:	81 e0       	ldi	r24, 0x01	; 1
    7686:	8b 83       	std	Y+3, r24	; 0x03
    7688:	8b 81       	ldd	r24, Y+3	; 0x03
   }
   return E_ERROR;
}//end LCD_displayString
    768a:	0f 90       	pop	r0
    768c:	0f 90       	pop	r0
    768e:	0f 90       	pop	r0
    7690:	cf 91       	pop	r28
    7692:	df 91       	pop	r29
    7694:	08 95       	ret

00007696 <LCD_goToRowColumn>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR , E_OK
* Description     : A function to set the cursor in a particular row and column
*************************************************************************************************/
enuErrorStatus_t LCD_goToRowColumn(uint8_t u8Row, uint8_t u8Col)
{
    7696:	df 93       	push	r29
    7698:	cf 93       	push	r28
    769a:	00 d0       	rcall	.+0      	; 0x769c <LCD_goToRowColumn+0x6>
    769c:	00 d0       	rcall	.+0      	; 0x769e <LCD_goToRowColumn+0x8>
    769e:	0f 92       	push	r0
    76a0:	cd b7       	in	r28, 0x3d	; 61
    76a2:	de b7       	in	r29, 0x3e	; 62
    76a4:	89 83       	std	Y+1, r24	; 0x01
    76a6:	6a 83       	std	Y+2, r22	; 0x02
	/* Initializing the address and the flag */
	static uint8_t u8Address = 0;
	static uint8_t Flag=0;
   
   if (!Flag)
    76a8:	80 91 ed 01 	lds	r24, 0x01ED
    76ac:	88 23       	and	r24, r24
    76ae:	d9 f5       	brne	.+118    	; 0x7726 <LCD_goToRowColumn+0x90>
   {
      /* first of all calculate the required address */
      switch(u8Row)
    76b0:	89 81       	ldd	r24, Y+1	; 0x01
    76b2:	28 2f       	mov	r18, r24
    76b4:	30 e0       	ldi	r19, 0x00	; 0
    76b6:	3d 83       	std	Y+5, r19	; 0x05
    76b8:	2c 83       	std	Y+4, r18	; 0x04
    76ba:	8c 81       	ldd	r24, Y+4	; 0x04
    76bc:	9d 81       	ldd	r25, Y+5	; 0x05
    76be:	81 30       	cpi	r24, 0x01	; 1
    76c0:	91 05       	cpc	r25, r1
    76c2:	c9 f0       	breq	.+50     	; 0x76f6 <LCD_goToRowColumn+0x60>
    76c4:	2c 81       	ldd	r18, Y+4	; 0x04
    76c6:	3d 81       	ldd	r19, Y+5	; 0x05
    76c8:	22 30       	cpi	r18, 0x02	; 2
    76ca:	31 05       	cpc	r19, r1
    76cc:	2c f4       	brge	.+10     	; 0x76d8 <LCD_goToRowColumn+0x42>
    76ce:	8c 81       	ldd	r24, Y+4	; 0x04
    76d0:	9d 81       	ldd	r25, Y+5	; 0x05
    76d2:	00 97       	sbiw	r24, 0x00	; 0
    76d4:	61 f0       	breq	.+24     	; 0x76ee <LCD_goToRowColumn+0x58>
    76d6:	1d c0       	rjmp	.+58     	; 0x7712 <LCD_goToRowColumn+0x7c>
    76d8:	2c 81       	ldd	r18, Y+4	; 0x04
    76da:	3d 81       	ldd	r19, Y+5	; 0x05
    76dc:	22 30       	cpi	r18, 0x02	; 2
    76de:	31 05       	cpc	r19, r1
    76e0:	79 f0       	breq	.+30     	; 0x7700 <LCD_goToRowColumn+0x6a>
    76e2:	8c 81       	ldd	r24, Y+4	; 0x04
    76e4:	9d 81       	ldd	r25, Y+5	; 0x05
    76e6:	83 30       	cpi	r24, 0x03	; 3
    76e8:	91 05       	cpc	r25, r1
    76ea:	79 f0       	breq	.+30     	; 0x770a <LCD_goToRowColumn+0x74>
    76ec:	12 c0       	rjmp	.+36     	; 0x7712 <LCD_goToRowColumn+0x7c>
      {
		 /* Row 0 */
         case LCD_ROW0:
         u8Address=u8Col;
    76ee:	8a 81       	ldd	r24, Y+2	; 0x02
    76f0:	80 93 ee 01 	sts	0x01EE, r24
    76f4:	0e c0       	rjmp	.+28     	; 0x7712 <LCD_goToRowColumn+0x7c>
         break;
		 /* Row 1 */
         case LCD_ROW1:
         u8Address=u8Col+ADDRESS_ROW_1;
    76f6:	8a 81       	ldd	r24, Y+2	; 0x02
    76f8:	80 5c       	subi	r24, 0xC0	; 192
    76fa:	80 93 ee 01 	sts	0x01EE, r24
    76fe:	09 c0       	rjmp	.+18     	; 0x7712 <LCD_goToRowColumn+0x7c>
         break;
		 /* Row 2 */
         case LCD_ROW2:
         u8Address=u8Col+ADDRESS_ROW_2;
    7700:	8a 81       	ldd	r24, Y+2	; 0x02
    7702:	80 5f       	subi	r24, 0xF0	; 240
    7704:	80 93 ee 01 	sts	0x01EE, r24
    7708:	04 c0       	rjmp	.+8      	; 0x7712 <LCD_goToRowColumn+0x7c>
         break;
		 /* Row 3 */
         case LCD_ROW3:
         u8Address=u8Col+ADDRESS_ROW_3;
    770a:	8a 81       	ldd	r24, Y+2	; 0x02
    770c:	80 5b       	subi	r24, 0xB0	; 176
    770e:	80 93 ee 01 	sts	0x01EE, r24
         break;
      }
	  /* Adding the cursor location to the address*/
      u8Address |= SET_CURSOR_LOCATION;
    7712:	80 91 ee 01 	lds	r24, 0x01EE
    7716:	80 68       	ori	r24, 0x80	; 128
    7718:	80 93 ee 01 	sts	0x01EE, r24
      Flag++; //Incrementing the flag to go out of the block indicating that the address has been calculated
    771c:	80 91 ed 01 	lds	r24, 0x01ED
    7720:	8f 5f       	subi	r24, 0xFF	; 255
    7722:	80 93 ed 01 	sts	0x01ED, r24
   }
			
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
   if (LCD_sendCommand(u8Address))
    7726:	80 91 ee 01 	lds	r24, 0x01EE
    772a:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
    772e:	88 23       	and	r24, r24
    7730:	29 f0       	breq	.+10     	; 0x773c <LCD_goToRowColumn+0xa6>
   {
	   /* re-initialize the flag*/
      Flag=0;
    7732:	10 92 ed 01 	sts	0x01ED, r1
      return E_OK;
    7736:	91 e0       	ldi	r25, 0x01	; 1
    7738:	9b 83       	std	Y+3, r25	; 0x03
    773a:	01 c0       	rjmp	.+2      	; 0x773e <LCD_goToRowColumn+0xa8>
   }
	return E_ERROR;
    773c:	1b 82       	std	Y+3, r1	; 0x03
    773e:	8b 81       	ldd	r24, Y+3	; 0x03
}//end LCD_goToRowColumn
    7740:	0f 90       	pop	r0
    7742:	0f 90       	pop	r0
    7744:	0f 90       	pop	r0
    7746:	0f 90       	pop	r0
    7748:	0f 90       	pop	r0
    774a:	cf 91       	pop	r28
    774c:	df 91       	pop	r29
    774e:	08 95       	ret

00007750 <LCD_displayStringRowColumn>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display a string with particular row and column
*************************************************************************************************/
void LCD_displayStringRowColumn(uint8_t u8Row, uint8_t u8Col, const uint8_t *pu8Str)
{
    7750:	df 93       	push	r29
    7752:	cf 93       	push	r28
    7754:	00 d0       	rcall	.+0      	; 0x7756 <LCD_displayStringRowColumn+0x6>
    7756:	00 d0       	rcall	.+0      	; 0x7758 <LCD_displayStringRowColumn+0x8>
    7758:	cd b7       	in	r28, 0x3d	; 61
    775a:	de b7       	in	r29, 0x3e	; 62
    775c:	89 83       	std	Y+1, r24	; 0x01
    775e:	6a 83       	std	Y+2, r22	; 0x02
    7760:	5c 83       	std	Y+4, r21	; 0x04
    7762:	4b 83       	std	Y+3, r20	; 0x03
	/* go to to the required LCD position */
	LCD_goToRowColumn(u8Row, u8Col);
    7764:	89 81       	ldd	r24, Y+1	; 0x01
    7766:	6a 81       	ldd	r22, Y+2	; 0x02
    7768:	0e 94 4b 3b 	call	0x7696	; 0x7696 <LCD_goToRowColumn>
	/* display the string */
	LCD_displayString(pu8Str);
    776c:	8b 81       	ldd	r24, Y+3	; 0x03
    776e:	9c 81       	ldd	r25, Y+4	; 0x04
    7770:	0e 94 11 3b 	call	0x7622	; 0x7622 <LCD_displayString>
}//end LCD_displayStringRowColumn
    7774:	0f 90       	pop	r0
    7776:	0f 90       	pop	r0
    7778:	0f 90       	pop	r0
    777a:	0f 90       	pop	r0
    777c:	cf 91       	pop	r28
    777e:	df 91       	pop	r29
    7780:	08 95       	ret

00007782 <LCD_intgerToString>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display integer
*************************************************************************************************/
enuErrorStatus_t LCD_intgerToString(uint16_t u16Data)
{
    7782:	df 93       	push	r29
    7784:	cf 93       	push	r28
    7786:	cd b7       	in	r28, 0x3d	; 61
    7788:	de b7       	in	r29, 0x3e	; 62
    778a:	62 97       	sbiw	r28, 0x12	; 18
    778c:	0f b6       	in	r0, 0x3f	; 63
    778e:	f8 94       	cli
    7790:	de bf       	out	0x3e, r29	; 62
    7792:	0f be       	out	0x3f, r0	; 63
    7794:	cd bf       	out	0x3d, r28	; 61
    7796:	9a 8b       	std	Y+18, r25	; 0x12
    7798:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result */
   uint8_t strBuff[SCREEN_WIDTH];
   itoa(u16Data, (char*)strBuff, DECIMAL_BASE); /* 10 for decimal */
    779a:	89 89       	ldd	r24, Y+17	; 0x11
    779c:	9a 89       	ldd	r25, Y+18	; 0x12
    779e:	9e 01       	movw	r18, r28
    77a0:	2f 5f       	subi	r18, 0xFF	; 255
    77a2:	3f 4f       	sbci	r19, 0xFF	; 255
    77a4:	b9 01       	movw	r22, r18
    77a6:	4a e0       	ldi	r20, 0x0A	; 10
    77a8:	50 e0       	ldi	r21, 0x00	; 0
    77aa:	0e 94 dd 3e 	call	0x7dba	; 0x7dba <itoa>
   return LCD_displayString(strBuff);
    77ae:	ce 01       	movw	r24, r28
    77b0:	01 96       	adiw	r24, 0x01	; 1
    77b2:	0e 94 11 3b 	call	0x7622	; 0x7622 <LCD_displayString>
}//end LCD_intgerToString
    77b6:	62 96       	adiw	r28, 0x12	; 18
    77b8:	0f b6       	in	r0, 0x3f	; 63
    77ba:	f8 94       	cli
    77bc:	de bf       	out	0x3e, r29	; 62
    77be:	0f be       	out	0x3f, r0	; 63
    77c0:	cd bf       	out	0x3d, r28	; 61
    77c2:	cf 91       	pop	r28
    77c4:	df 91       	pop	r29
    77c6:	08 95       	ret

000077c8 <LCD_clearScreen>:
* Parameters (out): None
* Return Value    : E_ERROR , E_OK
* Description     : A function to clear the screen of the LCD
*************************************************************************************************/
enuErrorStatus_t LCD_clearScreen(void)
{
    77c8:	ef 92       	push	r14
    77ca:	ff 92       	push	r15
    77cc:	0f 93       	push	r16
    77ce:	1f 93       	push	r17
    77d0:	df 93       	push	r29
    77d2:	cf 93       	push	r28
    77d4:	00 d0       	rcall	.+0      	; 0x77d6 <LCD_clearScreen+0xe>
    77d6:	cd b7       	in	r28, 0x3d	; 61
    77d8:	de b7       	in	r29, 0x3e	; 62
	/* Error handler initialization */
	static enuErrorStatus_t enuRetVar=E_ERROR;
	/*For updating the state*/
	u8LCDFlag=LCD_CLEAR_SCREEN_FLAG;
    77da:	84 e0       	ldi	r24, 0x04	; 4
    77dc:	80 93 e8 01 	sts	0x01E8, r24
	switch(enuClearState)
    77e0:	80 91 e7 01 	lds	r24, 0x01E7
    77e4:	28 2f       	mov	r18, r24
    77e6:	30 e0       	ldi	r19, 0x00	; 0
    77e8:	3a 83       	std	Y+2, r19	; 0x02
    77ea:	29 83       	std	Y+1, r18	; 0x01
    77ec:	89 81       	ldd	r24, Y+1	; 0x01
    77ee:	9a 81       	ldd	r25, Y+2	; 0x02
    77f0:	81 30       	cpi	r24, 0x01	; 1
    77f2:	91 05       	cpc	r25, r1
    77f4:	09 f1       	breq	.+66     	; 0x7838 <LCD_clearScreen+0x70>
    77f6:	29 81       	ldd	r18, Y+1	; 0x01
    77f8:	3a 81       	ldd	r19, Y+2	; 0x02
    77fa:	22 30       	cpi	r18, 0x02	; 2
    77fc:	31 05       	cpc	r19, r1
    77fe:	c9 f0       	breq	.+50     	; 0x7832 <LCD_clearScreen+0x6a>
    7800:	89 81       	ldd	r24, Y+1	; 0x01
    7802:	9a 81       	ldd	r25, Y+2	; 0x02
    7804:	00 97       	sbiw	r24, 0x00	; 0
    7806:	c1 f4       	brne	.+48     	; 0x7838 <LCD_clearScreen+0x70>
		{
			/* The first state */
			case CLEAR_UNDONE:
			LCD_sendCommand(CLEAR_COMMAND);
    7808:	81 e0       	ldi	r24, 0x01	; 1
    780a:	0e 94 53 39 	call	0x72a6	; 0x72a6 <LCD_sendCommand>
			TDelay_us(TIMER0, DELAY_1530_US,LCD_Callback);
    780e:	ee e1       	ldi	r30, 0x1E	; 30
    7810:	f8 e3       	ldi	r31, 0x38	; 56
    7812:	80 e0       	ldi	r24, 0x00	; 0
    7814:	0a ef       	ldi	r16, 0xFA	; 250
    7816:	15 e0       	ldi	r17, 0x05	; 5
    7818:	20 e0       	ldi	r18, 0x00	; 0
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	40 e0       	ldi	r20, 0x00	; 0
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	60 e0       	ldi	r22, 0x00	; 0
    7822:	70 e0       	ldi	r23, 0x00	; 0
    7824:	7f 01       	movw	r14, r30
    7826:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <TDelay_us>
			enuClearState=CLEAR_PROGRESS;
    782a:	81 e0       	ldi	r24, 0x01	; 1
    782c:	80 93 e7 01 	sts	0x01E7, r24
    7830:	03 c0       	rjmp	.+6      	; 0x7838 <LCD_clearScreen+0x70>
			case CLEAR_PROGRESS:
			break;
			
			/* The thirs state*/
			case CLEAR_DONE:
			enuRetVar=E_OK;
    7832:	81 e0       	ldi	r24, 0x01	; 1
    7834:	80 93 ef 01 	sts	0x01EF, r24
		}
	
	 return enuRetVar;
    7838:	80 91 ef 01 	lds	r24, 0x01EF
}//end LCD_clearScreen
    783c:	0f 90       	pop	r0
    783e:	0f 90       	pop	r0
    7840:	cf 91       	pop	r28
    7842:	df 91       	pop	r29
    7844:	1f 91       	pop	r17
    7846:	0f 91       	pop	r16
    7848:	ff 90       	pop	r15
    784a:	ef 90       	pop	r14
    784c:	08 95       	ret

0000784e <HBridge_Init>:
* Parameters	: enuPWMMode, enuPWMCompareOutputMode, enuPWMClock
* Return Value	: enuErrorStatus_t
* Description  : Initialize the H Bridge module according to the configuration
*************************************************************************************************/
enuErrorStatus_t HBridge_Init(enuPWMMode_t enuPWMMode, enuPWMCompareOutputMode_t enuPWMCompareOutputMode, enuPWMClock_t enuPWMClock)
{
    784e:	df 93       	push	r29
    7850:	cf 93       	push	r28
    7852:	00 d0       	rcall	.+0      	; 0x7854 <HBridge_Init+0x6>
    7854:	00 d0       	rcall	.+0      	; 0x7856 <HBridge_Init+0x8>
    7856:	cd b7       	in	r28, 0x3d	; 61
    7858:	de b7       	in	r29, 0x3e	; 62
    785a:	8a 83       	std	Y+2, r24	; 0x02
    785c:	6b 83       	std	Y+3, r22	; 0x03
    785e:	4c 83       	std	Y+4, r20	; 0x04
   enuErrorStatus_t enuRetVar;
   
   if(((enuPWMCompareOutputMode == NORMAL_OPERATION)	|| (enuPWMCompareOutputMode == INVERTED_PWM) || (enuPWMCompareOutputMode == NON_INVERTED_PWM))	&&
    7860:	8b 81       	ldd	r24, Y+3	; 0x03
    7862:	88 23       	and	r24, r24
    7864:	31 f0       	breq	.+12     	; 0x7872 <HBridge_Init+0x24>
    7866:	8b 81       	ldd	r24, Y+3	; 0x03
    7868:	83 30       	cpi	r24, 0x03	; 3
    786a:	19 f0       	breq	.+6      	; 0x7872 <HBridge_Init+0x24>
    786c:	8b 81       	ldd	r24, Y+3	; 0x03
    786e:	82 30       	cpi	r24, 0x02	; 2
    7870:	61 f5       	brne	.+88     	; 0x78ca <HBridge_Init+0x7c>
    7872:	8c 81       	ldd	r24, Y+4	; 0x04
    7874:	88 30       	cpi	r24, 0x08	; 8
    7876:	48 f5       	brcc	.+82     	; 0x78ca <HBridge_Init+0x7c>
		(enuPWMClock > HBRIDGE_CLOCK_MIN_VALUE)			&& (enuPWMClock < HBRIDGE_CLOCK_MAX_VALUE))
   {
	   /* Initializing the DIO pin for motor 1 enable pin */
	   DIO_PinInit(HBRIDGE_MOTOR_1_ENABLE_PIN_NO, OUTPUT, NO_CONNECTION);
    7878:	8c e1       	ldi	r24, 0x1C	; 28
    787a:	61 e0       	ldi	r22, 0x01	; 1
    787c:	40 e0       	ldi	r20, 0x00	; 0
    787e:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2 enable pin */
	   DIO_PinInit(HBRIDGE_MOTOR_2_ENABLE_PIN_NO, OUTPUT, NO_CONNECTION);
    7882:	8d e1       	ldi	r24, 0x1D	; 29
    7884:	61 e0       	ldi	r22, 0x01	; 1
    7886:	40 e0       	ldi	r20, 0x00	; 0
    7888:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the DIO pin for motor 1A direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, OUTPUT, NO_CONNECTION);
    788c:	8a e1       	ldi	r24, 0x1A	; 26
    788e:	61 e0       	ldi	r22, 0x01	; 1
    7890:	40 e0       	ldi	r20, 0x00	; 0
    7892:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the DIO pin for motor 1B direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, OUTPUT, NO_CONNECTION);
    7896:	8b e1       	ldi	r24, 0x1B	; 27
    7898:	61 e0       	ldi	r22, 0x01	; 1
    789a:	40 e0       	ldi	r20, 0x00	; 0
    789c:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2A direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, OUTPUT, NO_CONNECTION);
    78a0:	8e e1       	ldi	r24, 0x1E	; 30
    78a2:	61 e0       	ldi	r22, 0x01	; 1
    78a4:	40 e0       	ldi	r20, 0x00	; 0
    78a6:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2B direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, OUTPUT, NO_CONNECTION);
    78aa:	8f e1       	ldi	r24, 0x1F	; 31
    78ac:	61 e0       	ldi	r22, 0x01	; 1
    78ae:	40 e0       	ldi	r20, 0x00	; 0
    78b0:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <DIO_PinInit>
	   /* Initializing the PWM signal used for the HBridge module */
	   PWM_Init(enuPWMMode, enuPWMCompareOutputMode, enuPWMClock);
    78b4:	8a 81       	ldd	r24, Y+2	; 0x02
    78b6:	6b 81       	ldd	r22, Y+3	; 0x03
    78b8:	4c 81       	ldd	r20, Y+4	; 0x04
    78ba:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <PWM_Init>
		enuHBridgeState = HBRIDGE_INIT_DONE;
    78be:	81 e0       	ldi	r24, 0x01	; 1
    78c0:	80 93 f0 01 	sts	0x01F0, r24
	   enuRetVar = E_OK;
    78c4:	81 e0       	ldi	r24, 0x01	; 1
    78c6:	89 83       	std	Y+1, r24	; 0x01
    78c8:	01 c0       	rjmp	.+2      	; 0x78cc <HBridge_Init+0x7e>
   }
   else
   {
	   enuRetVar = E_ERROR;
    78ca:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;	
    78cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    78ce:	0f 90       	pop	r0
    78d0:	0f 90       	pop	r0
    78d2:	0f 90       	pop	r0
    78d4:	0f 90       	pop	r0
    78d6:	cf 91       	pop	r28
    78d8:	df 91       	pop	r29
    78da:	08 95       	ret

000078dc <HBridge_SetSpeed>:
* Parameters	: u8HBridgeMotorSpeed
* Return Value	: enuErrorStatus_t
* Description  : Set the speed of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_SetSpeed(uint8_t u8HBridgeMotorSpeed)
{
    78dc:	df 93       	push	r29
    78de:	cf 93       	push	r28
    78e0:	00 d0       	rcall	.+0      	; 0x78e2 <HBridge_SetSpeed+0x6>
    78e2:	cd b7       	in	r28, 0x3d	; 61
    78e4:	de b7       	in	r29, 0x3e	; 62
    78e6:	8a 83       	std	Y+2, r24	; 0x02
   enuErrorStatus_t enuRetVar;
   
   if((enuHBridgeState == HBRIDGE_INIT_DONE) && (u8HBridgeMotorSpeed >= HBRIDGE_MOTOR_SPEED_MIN_VALUE) && (u8HBridgeMotorSpeed <= HBRIDGE_MOTOR_SPEED_MAX_VALUE))
    78e8:	80 91 f0 01 	lds	r24, 0x01F0
    78ec:	81 30       	cpi	r24, 0x01	; 1
    78ee:	49 f4       	brne	.+18     	; 0x7902 <HBridge_SetSpeed+0x26>
    78f0:	8a 81       	ldd	r24, Y+2	; 0x02
    78f2:	85 36       	cpi	r24, 0x65	; 101
    78f4:	30 f4       	brcc	.+12     	; 0x7902 <HBridge_SetSpeed+0x26>
   {
		gu8HBridgeMotorSpeed = u8HBridgeMotorSpeed;
    78f6:	8a 81       	ldd	r24, Y+2	; 0x02
    78f8:	80 93 f1 01 	sts	0x01F1, r24
	   enuRetVar = E_OK;
    78fc:	81 e0       	ldi	r24, 0x01	; 1
    78fe:	89 83       	std	Y+1, r24	; 0x01
    7900:	01 c0       	rjmp	.+2      	; 0x7904 <HBridge_SetSpeed+0x28>
   }
   else
   {
	   enuRetVar = E_ERROR;
    7902:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;
    7904:	89 81       	ldd	r24, Y+1	; 0x01
}
    7906:	0f 90       	pop	r0
    7908:	0f 90       	pop	r0
    790a:	cf 91       	pop	r28
    790c:	df 91       	pop	r29
    790e:	08 95       	ret

00007910 <HBridge_SetDirection>:
* Parameters	: enuHBridgeMotorDirection
* Return Value	: enuErrorStatus_t
* Description  : Set the direction of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_SetDirection(enuHBridgeMotorDirection_t enuHBridgeMotorDirection)
{
    7910:	df 93       	push	r29
    7912:	cf 93       	push	r28
    7914:	00 d0       	rcall	.+0      	; 0x7916 <HBridge_SetDirection+0x6>
    7916:	cd b7       	in	r28, 0x3d	; 61
    7918:	de b7       	in	r29, 0x3e	; 62
    791a:	8a 83       	std	Y+2, r24	; 0x02
   enuErrorStatus_t enuRetVar;
   
   if((enuHBridgeState == HBRIDGE_INIT_DONE) && (enuHBridgeMotorDirection > HBRIDGE_MOTOR_DIRECTION_MIN_VALUE) && (enuHBridgeMotorDirection < HBRIDGE_MOTOR_DIRECTION_MAX_VALUE))
    791c:	80 91 f0 01 	lds	r24, 0x01F0
    7920:	81 30       	cpi	r24, 0x01	; 1
    7922:	09 f0       	breq	.+2      	; 0x7926 <HBridge_SetDirection+0x16>
    7924:	53 c0       	rjmp	.+166    	; 0x79cc <HBridge_SetDirection+0xbc>
    7926:	8a 81       	ldd	r24, Y+2	; 0x02
    7928:	84 30       	cpi	r24, 0x04	; 4
    792a:	08 f0       	brcs	.+2      	; 0x792e <HBridge_SetDirection+0x1e>
    792c:	4f c0       	rjmp	.+158    	; 0x79cc <HBridge_SetDirection+0xbc>
   {
	   /* Checking if the motor is moving forward or backward */
	   if(enuHBridgeMotorDirection == MOVE_FORWARD)
    792e:	8a 81       	ldd	r24, Y+2	; 0x02
    7930:	88 23       	and	r24, r24
    7932:	89 f4       	brne	.+34     	; 0x7956 <HBridge_SetDirection+0x46>
	   {
		   /* Setting the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, HIGH);
    7934:	8a e1       	ldi	r24, 0x1A	; 26
    7936:	61 e0       	ldi	r22, 0x01	; 1
    7938:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, LOW);
    793c:	8b e1       	ldi	r24, 0x1B	; 27
    793e:	60 e0       	ldi	r22, 0x00	; 0
    7940:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, HIGH);
    7944:	8e e1       	ldi	r24, 0x1E	; 30
    7946:	61 e0       	ldi	r22, 0x01	; 1
    7948:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
    794c:	8f e1       	ldi	r24, 0x1F	; 31
    794e:	60 e0       	ldi	r22, 0x00	; 0
    7950:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
    7954:	38 c0       	rjmp	.+112    	; 0x79c6 <HBridge_SetDirection+0xb6>
	   }
	   else if(enuHBridgeMotorDirection == MOVE_BACKWARD)
    7956:	8a 81       	ldd	r24, Y+2	; 0x02
    7958:	81 30       	cpi	r24, 0x01	; 1
    795a:	89 f4       	brne	.+34     	; 0x797e <HBridge_SetDirection+0x6e>
	   {
		   /* Clearing the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, LOW);
    795c:	8a e1       	ldi	r24, 0x1A	; 26
    795e:	60 e0       	ldi	r22, 0x00	; 0
    7960:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, HIGH);
    7964:	8b e1       	ldi	r24, 0x1B	; 27
    7966:	61 e0       	ldi	r22, 0x01	; 1
    7968:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
    796c:	8e e1       	ldi	r24, 0x1E	; 30
    796e:	60 e0       	ldi	r22, 0x00	; 0
    7970:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
    7974:	8f e1       	ldi	r24, 0x1F	; 31
    7976:	61 e0       	ldi	r22, 0x01	; 1
    7978:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
    797c:	24 c0       	rjmp	.+72     	; 0x79c6 <HBridge_SetDirection+0xb6>
	   }
	   else if(enuHBridgeMotorDirection == TURN_LEFT)
    797e:	8a 81       	ldd	r24, Y+2	; 0x02
    7980:	82 30       	cpi	r24, 0x02	; 2
    7982:	89 f4       	brne	.+34     	; 0x79a6 <HBridge_SetDirection+0x96>
	   {
		   /* Clearing the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, LOW);
    7984:	8a e1       	ldi	r24, 0x1A	; 26
    7986:	60 e0       	ldi	r22, 0x00	; 0
    7988:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, HIGH);
    798c:	8b e1       	ldi	r24, 0x1B	; 27
    798e:	61 e0       	ldi	r22, 0x01	; 1
    7990:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, HIGH);
    7994:	8e e1       	ldi	r24, 0x1E	; 30
    7996:	61 e0       	ldi	r22, 0x01	; 1
    7998:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
    799c:	8f e1       	ldi	r24, 0x1F	; 31
    799e:	60 e0       	ldi	r22, 0x00	; 0
    79a0:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
    79a4:	10 c0       	rjmp	.+32     	; 0x79c6 <HBridge_SetDirection+0xb6>
	   }
	   else
	   {
		   /* Setting the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, HIGH);
    79a6:	8a e1       	ldi	r24, 0x1A	; 26
    79a8:	61 e0       	ldi	r22, 0x01	; 1
    79aa:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, LOW);
    79ae:	8b e1       	ldi	r24, 0x1B	; 27
    79b0:	60 e0       	ldi	r22, 0x00	; 0
    79b2:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
    79b6:	8e e1       	ldi	r24, 0x1E	; 30
    79b8:	60 e0       	ldi	r22, 0x00	; 0
    79ba:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
    79be:	8f e1       	ldi	r24, 0x1F	; 31
    79c0:	61 e0       	ldi	r22, 0x01	; 1
    79c2:	0e 94 37 33 	call	0x666e	; 0x666e <DIO_PinWrite>
	   }
	   enuRetVar = E_OK;
    79c6:	81 e0       	ldi	r24, 0x01	; 1
    79c8:	89 83       	std	Y+1, r24	; 0x01
    79ca:	01 c0       	rjmp	.+2      	; 0x79ce <HBridge_SetDirection+0xbe>
   }
   else
   {
	   enuRetVar = E_ERROR;
    79cc:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;	
    79ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    79d0:	0f 90       	pop	r0
    79d2:	0f 90       	pop	r0
    79d4:	cf 91       	pop	r28
    79d6:	df 91       	pop	r29
    79d8:	08 95       	ret

000079da <HBridge_Start>:
* Parameters	: void
* Return Value	: enuErrorStatus_t
* Description  : Start the rotation of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_Start(void)
{
    79da:	df 93       	push	r29
    79dc:	cf 93       	push	r28
    79de:	0f 92       	push	r0
    79e0:	cd b7       	in	r28, 0x3d	; 61
    79e2:	de b7       	in	r29, 0x3e	; 62
   enuErrorStatus_t enuRetVar;
   
   if(enuHBridgeState == HBRIDGE_INIT_DONE)
    79e4:	80 91 f0 01 	lds	r24, 0x01F0
    79e8:	81 30       	cpi	r24, 0x01	; 1
    79ea:	39 f4       	brne	.+14     	; 0x79fa <HBridge_Start+0x20>
   {
	   #if HBRIDGE_PWM_CONTROL_ON_ENABLE_PINS == HBRIDGE_ENABLE_PWM_ON_ENABLE_PINS
	   /* Stopping both motors */
	   PWM_Start(gu8HBridgeMotorSpeed);
    79ec:	80 91 f1 01 	lds	r24, 0x01F1
    79f0:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <PWM_Start>
		/* Starting motor 1 to move */
		DIO_PinWrite(HBRIDGE_MOTOR_1_ENABLE_PIN_NO, HIGH);
		/* Starting motor 2 to move */
		DIO_PinWrite(HBRIDGE_MOTOR_2_ENABLE_PIN_NO, HIGH);
	   #endif
	   enuRetVar = E_OK;
    79f4:	81 e0       	ldi	r24, 0x01	; 1
    79f6:	89 83       	std	Y+1, r24	; 0x01
    79f8:	01 c0       	rjmp	.+2      	; 0x79fc <HBridge_Start+0x22>
   }
   else
   {
	   enuRetVar = E_ERROR;
    79fa:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;	
    79fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    79fe:	0f 90       	pop	r0
    7a00:	cf 91       	pop	r28
    7a02:	df 91       	pop	r29
    7a04:	08 95       	ret

00007a06 <HBridge_Stop>:
* Parameters	: void
* Return Value	: enuErrorStatus_t
* Description  : Stop the rotation of motors
*************************************************************************************************/
enuErrorStatus_t HBridge_Stop(void)
{
    7a06:	df 93       	push	r29
    7a08:	cf 93       	push	r28
    7a0a:	0f 92       	push	r0
    7a0c:	cd b7       	in	r28, 0x3d	; 61
    7a0e:	de b7       	in	r29, 0x3e	; 62
   enuErrorStatus_t enuRetVar;
   
   if(enuHBridgeState == HBRIDGE_INIT_DONE)
    7a10:	80 91 f0 01 	lds	r24, 0x01F0
    7a14:	81 30       	cpi	r24, 0x01	; 1
    7a16:	29 f4       	brne	.+10     	; 0x7a22 <HBridge_Stop+0x1c>
   {
	   #if HBRIDGE_PWM_CONTROL_ON_ENABLE_PINS == HBRIDGE_ENABLE_PWM_ON_ENABLE_PINS
	   /* Stopping both motors */
	   PWM_Stop();
    7a18:	0e 94 1f 30 	call	0x603e	; 0x603e <PWM_Stop>
	   /* Stopping motor 1 */
	   DIO_PinWrite(HBRIDGE_MOTOR_1_ENABLE_PIN_NO, LOW);
	   /* Stopping motor 2 */
	   DIO_PinWrite(HBRIDGE_MOTOR_2_ENABLE_PIN_NO, LOW);
	   #endif
	   enuRetVar = E_OK;
    7a1c:	81 e0       	ldi	r24, 0x01	; 1
    7a1e:	89 83       	std	Y+1, r24	; 0x01
    7a20:	01 c0       	rjmp	.+2      	; 0x7a24 <HBridge_Stop+0x1e>
   }
   else
   {
	   enuRetVar = E_ERROR;
    7a22:	19 82       	std	Y+1, r1	; 0x01
   }
   return enuRetVar;	
    7a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a26:	0f 90       	pop	r0
    7a28:	cf 91       	pop	r28
    7a2a:	df 91       	pop	r29
    7a2c:	08 95       	ret

00007a2e <HBridgeControl_Init>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to initialize all APIs responsible for robot control
*************************************************************************************************/
enuErrorStatus_t HBridgeControl_Init(void)
{
    7a2e:	df 93       	push	r29
    7a30:	cf 93       	push	r28
    7a32:	0f 92       	push	r0
    7a34:	cd b7       	in	r28, 0x3d	; 61
    7a36:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge module according to the configuration parameters */
	enuRetVar = HBridge_Init(FAST_PWM_ICR1, NON_INVERTED_PWM, PWM_PRESCALER_8);
    7a38:	8e e0       	ldi	r24, 0x0E	; 14
    7a3a:	62 e0       	ldi	r22, 0x02	; 2
    7a3c:	42 e0       	ldi	r20, 0x02	; 2
    7a3e:	0e 94 27 3c 	call	0x784e	; 0x784e <HBridge_Init>
    7a42:	89 83       	std	Y+1, r24	; 0x01
	if(enuRetVar == E_OK)
    7a44:	89 81       	ldd	r24, Y+1	; 0x01
    7a46:	81 30       	cpi	r24, 0x01	; 1
    7a48:	51 f4       	brne	.+20     	; 0x7a5e <HBridgeControl_Init+0x30>
	{
		/* Setting the speed of the H-bridge to 40% of its speed */
		enuRetVar = HBridge_SetSpeed(HBRIDGECONTROL_SPEED);
    7a4a:	88 e2       	ldi	r24, 0x28	; 40
    7a4c:	0e 94 6e 3c 	call	0x78dc	; 0x78dc <HBridge_SetSpeed>
    7a50:	89 83       	std	Y+1, r24	; 0x01
		if(enuRetVar == E_OK)
    7a52:	89 81       	ldd	r24, Y+1	; 0x01
    7a54:	81 30       	cpi	r24, 0x01	; 1
    7a56:	19 f4       	brne	.+6      	; 0x7a5e <HBridgeControl_Init+0x30>
		{
			/* Triggering the H-bridge's motors to start movement */
			enuRetVar = HBridge_Start();
    7a58:	0e 94 ed 3c 	call	0x79da	; 0x79da <HBridge_Start>
    7a5c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else
	{
	}
	return enuRetVar;
    7a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    7a60:	0f 90       	pop	r0
    7a62:	cf 91       	pop	r28
    7a64:	df 91       	pop	r29
    7a66:	08 95       	ret

00007a68 <HBridgeControl_Update>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to control the movement of the robot
*************************************************************************************************/
enuErrorStatus_t HBridgeControl_Update(void)
{
    7a68:	df 93       	push	r29
    7a6a:	cf 93       	push	r28
    7a6c:	0f 92       	push	r0
    7a6e:	cd b7       	in	r28, 0x3d	; 61
    7a70:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	if((gu16Distance >= HBRIDGECONTROL_MIN_DISTANCE) && (gu16Distance <= HBRIDGECONTROL_MAX_DISTANCE))
    7a72:	80 91 fa 01 	lds	r24, 0x01FA
    7a76:	90 91 fb 01 	lds	r25, 0x01FB
    7a7a:	82 33       	cpi	r24, 0x32	; 50
    7a7c:	91 05       	cpc	r25, r1
    7a7e:	60 f0       	brcs	.+24     	; 0x7a98 <HBridgeControl_Update+0x30>
    7a80:	80 91 fa 01 	lds	r24, 0x01FA
    7a84:	90 91 fb 01 	lds	r25, 0x01FB
    7a88:	88 33       	cpi	r24, 0x38	; 56
    7a8a:	91 05       	cpc	r25, r1
    7a8c:	28 f4       	brcc	.+10     	; 0x7a98 <HBridgeControl_Update+0x30>
	{
		/* Setting the direction of H-bridge's motors to turn right */
		enuRetVar = HBridge_SetDirection(TURN_RIGHT);
    7a8e:	83 e0       	ldi	r24, 0x03	; 3
    7a90:	0e 94 88 3c 	call	0x7910	; 0x7910 <HBridge_SetDirection>
    7a94:	89 83       	std	Y+1, r24	; 0x01
    7a96:	19 c0       	rjmp	.+50     	; 0x7aca <HBridgeControl_Update+0x62>
	}
	else if(gu16Distance < HBRIDGECONTROL_MIN_DISTANCE)
    7a98:	80 91 fa 01 	lds	r24, 0x01FA
    7a9c:	90 91 fb 01 	lds	r25, 0x01FB
    7aa0:	82 33       	cpi	r24, 0x32	; 50
    7aa2:	91 05       	cpc	r25, r1
    7aa4:	28 f4       	brcc	.+10     	; 0x7ab0 <HBridgeControl_Update+0x48>
	{
		/* Setting the direction of H-bridge's motors to move backward */
		enuRetVar = HBridge_SetDirection(MOVE_BACKWARD);
    7aa6:	81 e0       	ldi	r24, 0x01	; 1
    7aa8:	0e 94 88 3c 	call	0x7910	; 0x7910 <HBridge_SetDirection>
    7aac:	89 83       	std	Y+1, r24	; 0x01
    7aae:	0d c0       	rjmp	.+26     	; 0x7aca <HBridgeControl_Update+0x62>
	}
	else if(gu16Distance > HBRIDGECONTROL_MAX_DISTANCE)
    7ab0:	80 91 fa 01 	lds	r24, 0x01FA
    7ab4:	90 91 fb 01 	lds	r25, 0x01FB
    7ab8:	88 33       	cpi	r24, 0x38	; 56
    7aba:	91 05       	cpc	r25, r1
    7abc:	28 f0       	brcs	.+10     	; 0x7ac8 <HBridgeControl_Update+0x60>
	{
		/* Setting the direction of H-bridge's motors to move forward */
		enuRetVar = HBridge_SetDirection(MOVE_FORWARD);
    7abe:	80 e0       	ldi	r24, 0x00	; 0
    7ac0:	0e 94 88 3c 	call	0x7910	; 0x7910 <HBridge_SetDirection>
    7ac4:	89 83       	std	Y+1, r24	; 0x01
    7ac6:	01 c0       	rjmp	.+2      	; 0x7aca <HBridgeControl_Update+0x62>
	}
	else
	{
		enuRetVar = E_ERROR;
    7ac8:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    7aca:	89 81       	ldd	r24, Y+1	; 0x01
}
    7acc:	0f 90       	pop	r0
    7ace:	cf 91       	pop	r28
    7ad0:	df 91       	pop	r29
    7ad2:	08 95       	ret

00007ad4 <GetDistance_Init>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to initialize all APIs responsible for getting distance
*************************************************************************************************/
enuErrorStatus_t GetDistance_Init(void)
{
    7ad4:	df 93       	push	r29
    7ad6:	cf 93       	push	r28
    7ad8:	0f 92       	push	r0
    7ada:	cd b7       	in	r28, 0x3d	; 61
    7adc:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	/* Initializing the ultrasonic sensor module to start */
	enuRetVar = Ultrasonic_Init();
    7ade:	0e 94 22 35 	call	0x6a44	; 0x6a44 <Ultrasonic_Init>
    7ae2:	89 83       	std	Y+1, r24	; 0x01
	gu8UltrasonicFlag = LOW;
    7ae4:	10 92 fc 01 	sts	0x01FC, r1
	return enuRetVar;
    7ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    7aea:	0f 90       	pop	r0
    7aec:	cf 91       	pop	r28
    7aee:	df 91       	pop	r29
    7af0:	08 95       	ret

00007af2 <GetDistance_Update>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to get the current distance of the robot from any obstacle
*************************************************************************************************/
enuErrorStatus_t GetDistance_Update(void)
{
    7af2:	df 93       	push	r29
    7af4:	cf 93       	push	r28
    7af6:	0f 92       	push	r0
    7af8:	cd b7       	in	r28, 0x3d	; 61
    7afa:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	if(gu8UltrasonicFlag == HIGH)
    7afc:	80 91 fc 01 	lds	r24, 0x01FC
    7b00:	81 30       	cpi	r24, 0x01	; 1
    7b02:	59 f4       	brne	.+22     	; 0x7b1a <GetDistance_Update+0x28>
	{
		/* Getting the distance read from the ultrasonic sensor */
		enuRetVar = Ultrasonic_GetDistance(&gu16Distance);
    7b04:	8a ef       	ldi	r24, 0xFA	; 250
    7b06:	91 e0       	ldi	r25, 0x01	; 1
    7b08:	0e 94 1c 36 	call	0x6c38	; 0x6c38 <Ultrasonic_GetDistance>
    7b0c:	89 83       	std	Y+1, r24	; 0x01
		if(enuRetVar == E_OK)
    7b0e:	89 81       	ldd	r24, Y+1	; 0x01
    7b10:	81 30       	cpi	r24, 0x01	; 1
    7b12:	21 f4       	brne	.+8      	; 0x7b1c <GetDistance_Update+0x2a>
		{
			gu8UltrasonicFlag = LOW;
    7b14:	10 92 fc 01 	sts	0x01FC, r1
    7b18:	01 c0       	rjmp	.+2      	; 0x7b1c <GetDistance_Update+0x2a>
		{
		}
	}
	else
	{
		enuRetVar = E_ERROR;
    7b1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuRetVar;
    7b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    7b1e:	0f 90       	pop	r0
    7b20:	cf 91       	pop	r28
    7b22:	df 91       	pop	r29
    7b24:	08 95       	ret

00007b26 <DisplayDistance_Init>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to initialize all APIs responsible for displaying distance
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Init(void)
{
    7b26:	df 93       	push	r29
    7b28:	cf 93       	push	r28
    7b2a:	00 d0       	rcall	.+0      	; 0x7b2c <DisplayDistance_Init+0x6>
    7b2c:	0f 92       	push	r0
    7b2e:	cd b7       	in	r28, 0x3d	; 61
    7b30:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
    7b32:	80 91 f2 01 	lds	r24, 0x01F2
    7b36:	28 2f       	mov	r18, r24
    7b38:	30 e0       	ldi	r19, 0x00	; 0
    7b3a:	3b 83       	std	Y+3, r19	; 0x03
    7b3c:	2a 83       	std	Y+2, r18	; 0x02
    7b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b40:	9b 81       	ldd	r25, Y+3	; 0x03
    7b42:	81 30       	cpi	r24, 0x01	; 1
    7b44:	91 05       	cpc	r25, r1
    7b46:	a1 f0       	breq	.+40     	; 0x7b70 <DisplayDistance_Init+0x4a>
    7b48:	2a 81       	ldd	r18, Y+2	; 0x02
    7b4a:	3b 81       	ldd	r19, Y+3	; 0x03
    7b4c:	22 30       	cpi	r18, 0x02	; 2
    7b4e:	31 05       	cpc	r19, r1
    7b50:	e1 f0       	breq	.+56     	; 0x7b8a <DisplayDistance_Init+0x64>
    7b52:	8a 81       	ldd	r24, Y+2	; 0x02
    7b54:	9b 81       	ldd	r25, Y+3	; 0x03
    7b56:	00 97       	sbiw	r24, 0x00	; 0
    7b58:	21 f5       	brne	.+72     	; 0x7ba2 <DisplayDistance_Init+0x7c>
	{
		case LCD_START:
			/* Initializing the LCD module to start displaying on it */
			enuRetVar = LCD_Init();
    7b5a:	0e 94 4e 38 	call	0x709c	; 0x709c <LCD_Init>
    7b5e:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7b60:	89 81       	ldd	r24, Y+1	; 0x01
    7b62:	81 30       	cpi	r24, 0x01	; 1
    7b64:	f9 f4       	brne	.+62     	; 0x7ba4 <DisplayDistance_Init+0x7e>
			{
				genuLCDFlagStates = LCD_INIT_DONE;
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	80 93 f2 01 	sts	0x01F2, r24
				enuRetVar = E_ERROR;
    7b6c:	19 82       	std	Y+1, r1	; 0x01
    7b6e:	1a c0       	rjmp	.+52     	; 0x7ba4 <DisplayDistance_Init+0x7e>
			}
		break;

		case LCD_INIT_DONE:
			/* Setting the position on the cursor at row 0 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLAYDISTANCE_LCD_POSITION_ROW0, DISPLAYDISTANCE_LCD_POSITION_COL0);
    7b70:	80 e0       	ldi	r24, 0x00	; 0
    7b72:	60 e0       	ldi	r22, 0x00	; 0
    7b74:	0e 94 4b 3b 	call	0x7696	; 0x7696 <LCD_goToRowColumn>
    7b78:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7b7a:	89 81       	ldd	r24, Y+1	; 0x01
    7b7c:	81 30       	cpi	r24, 0x01	; 1
    7b7e:	91 f4       	brne	.+36     	; 0x7ba4 <DisplayDistance_Init+0x7e>
			{
				genuLCDFlagStates = LCD_SET_POSITION_0_0_DONE;
    7b80:	82 e0       	ldi	r24, 0x02	; 2
    7b82:	80 93 f2 01 	sts	0x01F2, r24
				enuRetVar = E_ERROR;
    7b86:	19 82       	std	Y+1, r1	; 0x01
    7b88:	0d c0       	rjmp	.+26     	; 0x7ba4 <DisplayDistance_Init+0x7e>
			}
		break;

		case LCD_SET_POSITION_0_0_DONE:
			/* Displaying the string "Distance:" on the LCD screen */
			enuRetVar = LCD_displayString((uint8_t*)"Distance:");
    7b8a:	80 e6       	ldi	r24, 0x60	; 96
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	0e 94 11 3b 	call	0x7622	; 0x7622 <LCD_displayString>
    7b92:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7b94:	89 81       	ldd	r24, Y+1	; 0x01
    7b96:	81 30       	cpi	r24, 0x01	; 1
    7b98:	29 f4       	brne	.+10     	; 0x7ba4 <DisplayDistance_Init+0x7e>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
    7b9a:	83 e0       	ldi	r24, 0x03	; 3
    7b9c:	80 93 f2 01 	sts	0x01F2, r24
    7ba0:	01 c0       	rjmp	.+2      	; 0x7ba4 <DisplayDistance_Init+0x7e>
			{
			}
		break;

		default:
			enuRetVar = E_ERROR;
    7ba2:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return enuRetVar;
    7ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    7ba6:	0f 90       	pop	r0
    7ba8:	0f 90       	pop	r0
    7baa:	0f 90       	pop	r0
    7bac:	cf 91       	pop	r28
    7bae:	df 91       	pop	r29
    7bb0:	08 95       	ret

00007bb2 <DisplayDistance_Update>:
* Parameters (out): enuErrorStatus_t
* Return Value    : E_ERROR, E_OK
* Description     : A function to display the current distance of the robot from any obstacle
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Update(void)
{
    7bb2:	df 93       	push	r29
    7bb4:	cf 93       	push	r28
    7bb6:	00 d0       	rcall	.+0      	; 0x7bb8 <DisplayDistance_Update+0x6>
    7bb8:	0f 92       	push	r0
    7bba:	cd b7       	in	r28, 0x3d	; 61
    7bbc:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
    7bbe:	80 91 f2 01 	lds	r24, 0x01F2
    7bc2:	28 2f       	mov	r18, r24
    7bc4:	30 e0       	ldi	r19, 0x00	; 0
    7bc6:	3b 83       	std	Y+3, r19	; 0x03
    7bc8:	2a 83       	std	Y+2, r18	; 0x02
    7bca:	8a 81       	ldd	r24, Y+2	; 0x02
    7bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    7bce:	84 30       	cpi	r24, 0x04	; 4
    7bd0:	91 05       	cpc	r25, r1
    7bd2:	b9 f0       	breq	.+46     	; 0x7c02 <DisplayDistance_Update+0x50>
    7bd4:	2a 81       	ldd	r18, Y+2	; 0x02
    7bd6:	3b 81       	ldd	r19, Y+3	; 0x03
    7bd8:	25 30       	cpi	r18, 0x05	; 5
    7bda:	31 05       	cpc	r19, r1
    7bdc:	39 f1       	breq	.+78     	; 0x7c2c <DisplayDistance_Update+0x7a>
    7bde:	8a 81       	ldd	r24, Y+2	; 0x02
    7be0:	9b 81       	ldd	r25, Y+3	; 0x03
    7be2:	83 30       	cpi	r24, 0x03	; 3
    7be4:	91 05       	cpc	r25, r1
    7be6:	71 f5       	brne	.+92     	; 0x7c44 <DisplayDistance_Update+0x92>
	{
		case LCD_DISPLAY_STRING_DONE:
			/* Setting the position on the cursor at row 1 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLAYDISTANCE_LCD_POSITION_ROW1, DISPLAYDISTANCE_LCD_POSITION_COL0);
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	60 e0       	ldi	r22, 0x00	; 0
    7bec:	0e 94 4b 3b 	call	0x7696	; 0x7696 <LCD_goToRowColumn>
    7bf0:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7bf2:	89 81       	ldd	r24, Y+1	; 0x01
    7bf4:	81 30       	cpi	r24, 0x01	; 1
    7bf6:	39 f5       	brne	.+78     	; 0x7c46 <DisplayDistance_Update+0x94>
			{
				genuLCDFlagStates = LCD_SET_POSITION_1_0_DONE;
    7bf8:	84 e0       	ldi	r24, 0x04	; 4
    7bfa:	80 93 f2 01 	sts	0x01F2, r24
				enuRetVar = E_ERROR;
    7bfe:	19 82       	std	Y+1, r1	; 0x01
    7c00:	22 c0       	rjmp	.+68     	; 0x7c46 <DisplayDistance_Update+0x94>
			}
		break;

		case LCD_SET_POSITION_1_0_DONE:
			/* Displaying the distance of the obstacle on the LCD screen */
			enuRetVar = LCD_intgerToString(gu16Distance);
    7c02:	80 91 fa 01 	lds	r24, 0x01FA
    7c06:	90 91 fb 01 	lds	r25, 0x01FB
    7c0a:	0e 94 c1 3b 	call	0x7782	; 0x7782 <LCD_intgerToString>
    7c0e:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7c10:	89 81       	ldd	r24, Y+1	; 0x01
    7c12:	81 30       	cpi	r24, 0x01	; 1
    7c14:	c1 f4       	brne	.+48     	; 0x7c46 <DisplayDistance_Update+0x94>
			{
				genuLCDFlagStates = LCD_DISPLAY_DISTANCE_DONE;
    7c16:	85 e0       	ldi	r24, 0x05	; 5
    7c18:	80 93 f2 01 	sts	0x01F2, r24
				Ultrasonic_Trigger(US_CH1);
    7c1c:	80 e0       	ldi	r24, 0x00	; 0
    7c1e:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <Ultrasonic_Trigger>
				gu8UltrasonicFlag = HIGH;
    7c22:	81 e0       	ldi	r24, 0x01	; 1
    7c24:	80 93 fc 01 	sts	0x01FC, r24
				enuRetVar = E_ERROR;
    7c28:	19 82       	std	Y+1, r1	; 0x01
    7c2a:	0d c0       	rjmp	.+26     	; 0x7c46 <DisplayDistance_Update+0x94>
			}
		break;

		case LCD_DISPLAY_DISTANCE_DONE:
			/* Displaying spaces on LCD screen to clear any extra numbers */
			enuRetVar = LCD_displayString((uint8_t*)"          ");
    7c2c:	8a e6       	ldi	r24, 0x6A	; 106
    7c2e:	90 e0       	ldi	r25, 0x00	; 0
    7c30:	0e 94 11 3b 	call	0x7622	; 0x7622 <LCD_displayString>
    7c34:	89 83       	std	Y+1, r24	; 0x01
			if(enuRetVar == E_OK)
    7c36:	89 81       	ldd	r24, Y+1	; 0x01
    7c38:	81 30       	cpi	r24, 0x01	; 1
    7c3a:	29 f4       	brne	.+10     	; 0x7c46 <DisplayDistance_Update+0x94>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
    7c3c:	83 e0       	ldi	r24, 0x03	; 3
    7c3e:	80 93 f2 01 	sts	0x01F2, r24
    7c42:	01 c0       	rjmp	.+2      	; 0x7c46 <DisplayDistance_Update+0x94>
			{
			}
		break;

		default:
			enuRetVar = E_ERROR;
    7c44:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return enuRetVar;
    7c46:	89 81       	ldd	r24, Y+1	; 0x01
}
    7c48:	0f 90       	pop	r0
    7c4a:	0f 90       	pop	r0
    7c4c:	0f 90       	pop	r0
    7c4e:	cf 91       	pop	r28
    7c50:	df 91       	pop	r29
    7c52:	08 95       	ret

00007c54 <CarControl_Init>:
* Parameters (out): void
* Return Value    : void
* Description     : A function to initialize all APIs responsible for controlling the car
*************************************************************************************************/
void CarControl_Init(void)
{
    7c54:	df 93       	push	r29
    7c56:	cf 93       	push	r28
    7c58:	0f 92       	push	r0
    7c5a:	cd b7       	in	r28, 0x3d	; 61
    7c5c:	de b7       	in	r29, 0x3e	; 62
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge Control component */
	enuRetVar = HBridgeControl_Init();
    7c5e:	0e 94 17 3d 	call	0x7a2e	; 0x7a2e <HBridgeControl_Init>
    7c62:	89 83       	std	Y+1, r24	; 0x01
	if(enuRetVar == E_OK)
    7c64:	89 81       	ldd	r24, Y+1	; 0x01
    7c66:	81 30       	cpi	r24, 0x01	; 1
    7c68:	39 f4       	brne	.+14     	; 0x7c78 <CarControl_Init+0x24>
	{
		/* Initializing the Get Distance component */
		enuRetVar = GetDistance_Init();
    7c6a:	0e 94 6a 3d 	call	0x7ad4	; 0x7ad4 <GetDistance_Init>
    7c6e:	89 83       	std	Y+1, r24	; 0x01
		if(enuRetVar == E_OK)
    7c70:	89 81       	ldd	r24, Y+1	; 0x01
    7c72:	81 30       	cpi	r24, 0x01	; 1
    7c74:	09 f4       	brne	.+2      	; 0x7c78 <CarControl_Init+0x24>
		{
			/* Enabling the global interrupt */
			sei();
    7c76:	78 94       	sei
		}
	}
	else
	{
	}
}
    7c78:	0f 90       	pop	r0
    7c7a:	cf 91       	pop	r28
    7c7c:	df 91       	pop	r29
    7c7e:	08 95       	ret

00007c80 <CarControl_Update>:
* Parameters (out): void
* Return Value    : void
* Description     : A function to control the movement of the car based on the obstacle distance
*************************************************************************************************/
void CarControl_Update(void)
{
    7c80:	df 93       	push	r29
    7c82:	cf 93       	push	r28
    7c84:	0f 92       	push	r0
    7c86:	cd b7       	in	r28, 0x3d	; 61
    7c88:	de b7       	in	r29, 0x3e	; 62
	static uint8_t u8LCDInitFlag = LOW;
	enuErrorStatus_t enuRetVar;

	/* Initializing the Display Distance component */
	enuRetVar = DisplayDistance_Init();
    7c8a:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <DisplayDistance_Init>
    7c8e:	89 83       	std	Y+1, r24	; 0x01
	if((u8LCDInitFlag == HIGH) || (enuRetVar == E_OK))
    7c90:	80 91 f3 01 	lds	r24, 0x01F3
    7c94:	81 30       	cpi	r24, 0x01	; 1
    7c96:	19 f0       	breq	.+6      	; 0x7c9e <CarControl_Update+0x1e>
    7c98:	89 81       	ldd	r24, Y+1	; 0x01
    7c9a:	81 30       	cpi	r24, 0x01	; 1
    7c9c:	49 f4       	brne	.+18     	; 0x7cb0 <CarControl_Update+0x30>
	{
		u8LCDInitFlag = HIGH;
    7c9e:	81 e0       	ldi	r24, 0x01	; 1
    7ca0:	80 93 f3 01 	sts	0x01F3, r24
		/* Getting the current distance from the Get Distance component */
		GetDistance_Update();
    7ca4:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <GetDistance_Update>
		/* Displaying the current distance from the Display Distance component */
		DisplayDistance_Update();
    7ca8:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <DisplayDistance_Update>
		/* Controlling the H-bridge module from the H-bridge Control component */
		HBridgeControl_Update();
    7cac:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <HBridgeControl_Update>
	}
	else
	{
	}
}
    7cb0:	0f 90       	pop	r0
    7cb2:	cf 91       	pop	r28
    7cb4:	df 91       	pop	r29
    7cb6:	08 95       	ret

00007cb8 <main>:
#include "APP/CarControl/CarControl.h"


int main(void)
{
    7cb8:	df 93       	push	r29
    7cba:	cf 93       	push	r28
    7cbc:	cd b7       	in	r28, 0x3d	; 61
    7cbe:	de b7       	in	r29, 0x3e	; 62
   CarControl_Init();
    7cc0:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <CarControl_Init>
   while (1) 
   {
      CarControl_Update();
    7cc4:	0e 94 40 3e 	call	0x7c80	; 0x7c80 <CarControl_Update>
    7cc8:	fd cf       	rjmp	.-6      	; 0x7cc4 <main+0xc>

00007cca <__mulsi3>:
    7cca:	62 9f       	mul	r22, r18
    7ccc:	d0 01       	movw	r26, r0
    7cce:	73 9f       	mul	r23, r19
    7cd0:	f0 01       	movw	r30, r0
    7cd2:	82 9f       	mul	r24, r18
    7cd4:	e0 0d       	add	r30, r0
    7cd6:	f1 1d       	adc	r31, r1
    7cd8:	64 9f       	mul	r22, r20
    7cda:	e0 0d       	add	r30, r0
    7cdc:	f1 1d       	adc	r31, r1
    7cde:	92 9f       	mul	r25, r18
    7ce0:	f0 0d       	add	r31, r0
    7ce2:	83 9f       	mul	r24, r19
    7ce4:	f0 0d       	add	r31, r0
    7ce6:	74 9f       	mul	r23, r20
    7ce8:	f0 0d       	add	r31, r0
    7cea:	65 9f       	mul	r22, r21
    7cec:	f0 0d       	add	r31, r0
    7cee:	99 27       	eor	r25, r25
    7cf0:	72 9f       	mul	r23, r18
    7cf2:	b0 0d       	add	r27, r0
    7cf4:	e1 1d       	adc	r30, r1
    7cf6:	f9 1f       	adc	r31, r25
    7cf8:	63 9f       	mul	r22, r19
    7cfa:	b0 0d       	add	r27, r0
    7cfc:	e1 1d       	adc	r30, r1
    7cfe:	f9 1f       	adc	r31, r25
    7d00:	bd 01       	movw	r22, r26
    7d02:	cf 01       	movw	r24, r30
    7d04:	11 24       	eor	r1, r1
    7d06:	08 95       	ret

00007d08 <__udivmodsi4>:
    7d08:	a1 e2       	ldi	r26, 0x21	; 33
    7d0a:	1a 2e       	mov	r1, r26
    7d0c:	aa 1b       	sub	r26, r26
    7d0e:	bb 1b       	sub	r27, r27
    7d10:	fd 01       	movw	r30, r26
    7d12:	0d c0       	rjmp	.+26     	; 0x7d2e <__udivmodsi4_ep>

00007d14 <__udivmodsi4_loop>:
    7d14:	aa 1f       	adc	r26, r26
    7d16:	bb 1f       	adc	r27, r27
    7d18:	ee 1f       	adc	r30, r30
    7d1a:	ff 1f       	adc	r31, r31
    7d1c:	a2 17       	cp	r26, r18
    7d1e:	b3 07       	cpc	r27, r19
    7d20:	e4 07       	cpc	r30, r20
    7d22:	f5 07       	cpc	r31, r21
    7d24:	20 f0       	brcs	.+8      	; 0x7d2e <__udivmodsi4_ep>
    7d26:	a2 1b       	sub	r26, r18
    7d28:	b3 0b       	sbc	r27, r19
    7d2a:	e4 0b       	sbc	r30, r20
    7d2c:	f5 0b       	sbc	r31, r21

00007d2e <__udivmodsi4_ep>:
    7d2e:	66 1f       	adc	r22, r22
    7d30:	77 1f       	adc	r23, r23
    7d32:	88 1f       	adc	r24, r24
    7d34:	99 1f       	adc	r25, r25
    7d36:	1a 94       	dec	r1
    7d38:	69 f7       	brne	.-38     	; 0x7d14 <__udivmodsi4_loop>
    7d3a:	60 95       	com	r22
    7d3c:	70 95       	com	r23
    7d3e:	80 95       	com	r24
    7d40:	90 95       	com	r25
    7d42:	9b 01       	movw	r18, r22
    7d44:	ac 01       	movw	r20, r24
    7d46:	bd 01       	movw	r22, r26
    7d48:	cf 01       	movw	r24, r30
    7d4a:	08 95       	ret

00007d4c <__prologue_saves__>:
    7d4c:	2f 92       	push	r2
    7d4e:	3f 92       	push	r3
    7d50:	4f 92       	push	r4
    7d52:	5f 92       	push	r5
    7d54:	6f 92       	push	r6
    7d56:	7f 92       	push	r7
    7d58:	8f 92       	push	r8
    7d5a:	9f 92       	push	r9
    7d5c:	af 92       	push	r10
    7d5e:	bf 92       	push	r11
    7d60:	cf 92       	push	r12
    7d62:	df 92       	push	r13
    7d64:	ef 92       	push	r14
    7d66:	ff 92       	push	r15
    7d68:	0f 93       	push	r16
    7d6a:	1f 93       	push	r17
    7d6c:	cf 93       	push	r28
    7d6e:	df 93       	push	r29
    7d70:	cd b7       	in	r28, 0x3d	; 61
    7d72:	de b7       	in	r29, 0x3e	; 62
    7d74:	ca 1b       	sub	r28, r26
    7d76:	db 0b       	sbc	r29, r27
    7d78:	0f b6       	in	r0, 0x3f	; 63
    7d7a:	f8 94       	cli
    7d7c:	de bf       	out	0x3e, r29	; 62
    7d7e:	0f be       	out	0x3f, r0	; 63
    7d80:	cd bf       	out	0x3d, r28	; 61
    7d82:	09 94       	ijmp

00007d84 <__epilogue_restores__>:
    7d84:	2a 88       	ldd	r2, Y+18	; 0x12
    7d86:	39 88       	ldd	r3, Y+17	; 0x11
    7d88:	48 88       	ldd	r4, Y+16	; 0x10
    7d8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    7d8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    7d8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7d90:	8c 84       	ldd	r8, Y+12	; 0x0c
    7d92:	9b 84       	ldd	r9, Y+11	; 0x0b
    7d94:	aa 84       	ldd	r10, Y+10	; 0x0a
    7d96:	b9 84       	ldd	r11, Y+9	; 0x09
    7d98:	c8 84       	ldd	r12, Y+8	; 0x08
    7d9a:	df 80       	ldd	r13, Y+7	; 0x07
    7d9c:	ee 80       	ldd	r14, Y+6	; 0x06
    7d9e:	fd 80       	ldd	r15, Y+5	; 0x05
    7da0:	0c 81       	ldd	r16, Y+4	; 0x04
    7da2:	1b 81       	ldd	r17, Y+3	; 0x03
    7da4:	aa 81       	ldd	r26, Y+2	; 0x02
    7da6:	b9 81       	ldd	r27, Y+1	; 0x01
    7da8:	ce 0f       	add	r28, r30
    7daa:	d1 1d       	adc	r29, r1
    7dac:	0f b6       	in	r0, 0x3f	; 63
    7dae:	f8 94       	cli
    7db0:	de bf       	out	0x3e, r29	; 62
    7db2:	0f be       	out	0x3f, r0	; 63
    7db4:	cd bf       	out	0x3d, r28	; 61
    7db6:	ed 01       	movw	r28, r26
    7db8:	08 95       	ret

00007dba <itoa>:
    7dba:	fb 01       	movw	r30, r22
    7dbc:	9f 01       	movw	r18, r30
    7dbe:	e8 94       	clt
    7dc0:	42 30       	cpi	r20, 0x02	; 2
    7dc2:	c4 f0       	brlt	.+48     	; 0x7df4 <itoa+0x3a>
    7dc4:	45 32       	cpi	r20, 0x25	; 37
    7dc6:	b4 f4       	brge	.+44     	; 0x7df4 <itoa+0x3a>
    7dc8:	4a 30       	cpi	r20, 0x0A	; 10
    7dca:	29 f4       	brne	.+10     	; 0x7dd6 <itoa+0x1c>
    7dcc:	97 fb       	bst	r25, 7
    7dce:	1e f4       	brtc	.+6      	; 0x7dd6 <itoa+0x1c>
    7dd0:	90 95       	com	r25
    7dd2:	81 95       	neg	r24
    7dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    7dd6:	64 2f       	mov	r22, r20
    7dd8:	77 27       	eor	r23, r23
    7dda:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__udivmodhi4>
    7dde:	80 5d       	subi	r24, 0xD0	; 208
    7de0:	8a 33       	cpi	r24, 0x3A	; 58
    7de2:	0c f0       	brlt	.+2      	; 0x7de6 <itoa+0x2c>
    7de4:	89 5d       	subi	r24, 0xD9	; 217
    7de6:	81 93       	st	Z+, r24
    7de8:	cb 01       	movw	r24, r22
    7dea:	00 97       	sbiw	r24, 0x00	; 0
    7dec:	a1 f7       	brne	.-24     	; 0x7dd6 <itoa+0x1c>
    7dee:	16 f4       	brtc	.+4      	; 0x7df4 <itoa+0x3a>
    7df0:	5d e2       	ldi	r21, 0x2D	; 45
    7df2:	51 93       	st	Z+, r21
    7df4:	10 82       	st	Z, r1
    7df6:	c9 01       	movw	r24, r18
    7df8:	0c 94 fe 3e 	jmp	0x7dfc	; 0x7dfc <strrev>

00007dfc <strrev>:
    7dfc:	dc 01       	movw	r26, r24
    7dfe:	fc 01       	movw	r30, r24
    7e00:	67 2f       	mov	r22, r23
    7e02:	71 91       	ld	r23, Z+
    7e04:	77 23       	and	r23, r23
    7e06:	e1 f7       	brne	.-8      	; 0x7e00 <strrev+0x4>
    7e08:	32 97       	sbiw	r30, 0x02	; 2
    7e0a:	04 c0       	rjmp	.+8      	; 0x7e14 <strrev+0x18>
    7e0c:	7c 91       	ld	r23, X
    7e0e:	6d 93       	st	X+, r22
    7e10:	70 83       	st	Z, r23
    7e12:	62 91       	ld	r22, -Z
    7e14:	ae 17       	cp	r26, r30
    7e16:	bf 07       	cpc	r27, r31
    7e18:	c8 f3       	brcs	.-14     	; 0x7e0c <strrev+0x10>
    7e1a:	08 95       	ret

00007e1c <__udivmodhi4>:
    7e1c:	aa 1b       	sub	r26, r26
    7e1e:	bb 1b       	sub	r27, r27
    7e20:	51 e1       	ldi	r21, 0x11	; 17
    7e22:	07 c0       	rjmp	.+14     	; 0x7e32 <__udivmodhi4_ep>

00007e24 <__udivmodhi4_loop>:
    7e24:	aa 1f       	adc	r26, r26
    7e26:	bb 1f       	adc	r27, r27
    7e28:	a6 17       	cp	r26, r22
    7e2a:	b7 07       	cpc	r27, r23
    7e2c:	10 f0       	brcs	.+4      	; 0x7e32 <__udivmodhi4_ep>
    7e2e:	a6 1b       	sub	r26, r22
    7e30:	b7 0b       	sbc	r27, r23

00007e32 <__udivmodhi4_ep>:
    7e32:	88 1f       	adc	r24, r24
    7e34:	99 1f       	adc	r25, r25
    7e36:	5a 95       	dec	r21
    7e38:	a9 f7       	brne	.-22     	; 0x7e24 <__udivmodhi4_loop>
    7e3a:	80 95       	com	r24
    7e3c:	90 95       	com	r25
    7e3e:	bc 01       	movw	r22, r24
    7e40:	cd 01       	movw	r24, r26
    7e42:	08 95       	ret

00007e44 <_exit>:
    7e44:	f8 94       	cli

00007e46 <__stop_program>:
    7e46:	ff cf       	rjmp	.-2      	; 0x7e46 <__stop_program>
